{"description": "Tox permet de lancer les tests d'un paquet Python dans des environnements\nvirtuels. L'utilisation de ces derniers pose plusieurs probl\u00e8mes:\n\n  * seuls les paquets disponibles sur PyPI sont g\u00e9r\u00e9s. Ainsi, il est parfois n\u00e9cessaire d'utiliser le gestionnaire de paquets de sa distribution pour installer des fichiers d'en-t\u00eate (on pense notamment \u00e0 lib*-dev sous Debian);\n\n  * lorsque plusieurs environnements ont besoin de la m\u00eame d\u00e9pendance, cette derni\u00e8re est install\u00e9e plusieurs fois, et est dupliqu\u00e9e sur le disque, ce qui provoque une perte d'espace disque;\n\n  * mauvais niveau d'abstraction : la tendance actuelle consiste \u00e0 utiliser des gestionnaires de paquets sp\u00e9cifiques \u00e0 des langages (pip, npm, cpan...) plut\u00f4t qu'un gestionnaire de paquets robuste;\n\n  * manque de reproductibilit\u00e9 des tests : les environnements de tests sont loin d'\u00eatre parfaitement isol\u00e9s (les variables d'environnement, les fichiers pr\u00e9sents dans /usr, le choix des locales... peuvent influencer le d\u00e9roulement des tests).\n\nGNU Guix est un gestionnaire de paquets fonctionnel (comme dans \"programmation\nfonctionnelle\") bas\u00e9 sur Nix. Il permet de construire des paquets dans un\nenvironnement compl\u00e8tement isol\u00e9 utilisant les conteneurs fournis par le noyau\nLinux qui garantit la reproductibilit\u00e9 de l'op\u00e9ration. Nous ferons une\npr\u00e9sentation de cet outil et nous attarderons notamment sur la fonctionnalit\u00e9\nque nous serons amen\u00e9s \u00e0 utiliser pour guix-tox : \"guix environment\", qui\npermet de cr\u00e9er un environnement isol\u00e9 contenant uniquement certains paquets.\n\nEnfin, nous verrons comment il est possible de remplacer virtualenv par Guix\ndans tox, afin de profiter des avantages de ce gestionnaire de paquets de\nfa\u00e7on quasi-transparente. Nous montrerons comment il est possible de\nl'utiliser afin de travailler sur des projets OpenStack tels que python-\nkeystoneclient ou encore la biblioth\u00e8que Oslo.\n\n", "video_mp4_url": "http://video-pyconfr2015.paulla.asso.fr/110%20-%20Cyril%20Roelandt%20-%20Guix-tox,%20une%20version%20fonctionnelle%20de%20tox.mp4", "source_url": "http://video-pyconfr2015.paulla.asso.fr/110_-_Cyril_Roelandt_-_Guix-tox,_une_version_fonctionnelle_de_tox.html", "video_webm_url": "http://video-pyconfr2015.paulla.asso.fr/110%20-%20Cyril%20Roelandt%20-%20Guix-tox,%20une%20version%20fonctionnelle%20de%20tox.webm", "duration": 1754, "category": "PyCon FR 2015", "speakers": ["Cyril Roelandt"], "video_ogv_url": "http://video-pyconfr2015.paulla.asso.fr/110%20-%20Cyril%20Roelandt%20-%20Guix-tox,%20une%20version%20fonctionnelle%20de%20tox.ogv", "language": "French", "title": "Guix-tox, une version fonctionnelle de tox.", "recorded": "2015-10-17", "summary": "Tox est un outil, tr\u00e8s utilis\u00e9 dans les projets Python, qui permet de lancer\ndes tests au sein d'environnements virtuels cr\u00e9\u00e9s par virtualenv. Cette\napproche souffre de plusieurs d\u00e9fauts qui affectent la reproductibilit\u00e9 des\ntests. Nous verrons comment il est possible de remplacer virtualenv par Guix\net donnerons quelques exemples issus du quotidien d'un d\u00e9veloppeur OpenStack.\n\n", "state": 2, "thumbnail_url": "http://video-pyconfr2015.paulla.asso.fr/110%20-%20Cyril%20Roelandt%20-%20Guix-tox,%20une%20version%20fonctionnelle%20de%20tox.mp4.jpg"}