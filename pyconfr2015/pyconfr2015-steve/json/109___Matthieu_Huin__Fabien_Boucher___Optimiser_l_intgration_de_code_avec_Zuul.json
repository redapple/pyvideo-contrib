{"description": "Les projets de grande \u00e9chelle comme OpenStack, int\u00e9grant plus d'une centaine\nde contributions par jour en moyenne, ne pourraient aboutir sans un contr\u00f4le\nrigoureux de la qualit\u00e9 du code. C'est pourquoi l'une des t\u00e2ches majeures des\nd\u00e9veloppeurs principaux (\"core devs\") d'OpenStack est de passer en revue les\ncontributions (\"code review\") puis d'\u00e9ventuellement les valider pour\nint\u00e9gration au code source. Mais comment g\u00e9rer un tel flux de contributions en\nun temps raisonnable ? Comment \u00eatre certain qu'une contribution accept\u00e9e par\nun core dev ne va pas avoir des effets de bord sur une autre contribution\naccept\u00e9e simultan\u00e9ment par quelqu'un d'autre, ou sur un projet connexe ?\n\nLa communaut\u00e9 OpenStack utilise un outil cod\u00e9 en Python appel\u00e9 Zuul (en\nr\u00e9f\u00e9rence \u00e0 Ghostbusters) pour r\u00e9pondre \u00e0 ces probl\u00e9matiques, et permettre aux\ncore devs de ne pas avoir \u00e0 consacrer 100% de leur activit\u00e9 \u00e0 la revue de\ncode. L'int\u00e9r\u00eat de Zuul est clair pour tout projet, quel que soit son\nenvergure, n\u00e9cessitant un contr\u00f4le rigoureux pour l'int\u00e9gration et le\nd\u00e9ploiement continus. Nous pr\u00e9sentons donc ici les principales fonctionnalit\u00e9s\nde Zuul \u00e0 travers des cas d'usage simples, et telles que nous les utilisons\ndans le projet [Software Factory](http://softwarefactory.enovance.com\n\"Software Factory\" ), une suite logicielle libre \"all in one\" de gestion de\ncode, pouss\u00e9 par Red Hat.\n\nNous couvrirons les sujets suivants:\n\n  * Comment Zuul interagit avec Gerrit, le service de revue du code\n  * Que signifie la notion de \"pipelines\" dans Zuul, et comment les utiliser\n  * Quelle strat\u00e9gie suit Zuul pour g\u00e9rer la queue des contributions \u00e0 tester ou \u00e0 int\u00e9grer\n  * Comment Zuul g\u00e8re les interd\u00e9pendances de projets\n  * Exemples de workflows de CI et CD facilit\u00e9s par Zuul\n\n", "video_mp4_url": "http://video-pyconfr2015.paulla.asso.fr/109%20-%20Matthieu%20Huin,%20Fabien%20Boucher%20-%20Optimiser%20l'int%C3%A9gration%20de%20code%20avec%20Zuul.mp4", "source_url": "http://video-pyconfr2015.paulla.asso.fr/109_-_Matthieu_Huin,_Fabien_Boucher_-_Optimiser_lintegration_de_code_avec_Zuul.html", "video_webm_url": "http://video-pyconfr2015.paulla.asso.fr/109%20-%20Matthieu%20Huin,%20Fabien%20Boucher%20-%20Optimiser%20l'int%C3%A9gration%20de%20code%20avec%20Zuul.webm", "duration": 1582, "category": "PyCon FR 2015", "speakers": ["Matthieu Huin", "Fabien Boucher"], "video_ogv_url": "http://video-pyconfr2015.paulla.asso.fr/109%20-%20Matthieu%20Huin,%20Fabien%20Boucher%20-%20Optimiser%20l'int%C3%A9gration%20de%20code%20avec%20Zuul.ogv", "language": "French", "title": "Optimiser l'int\u00e9gration de code avec Zuul", "recorded": "2015-10-17", "summary": "Cette pr\u00e9sentation s'adresse \u00e0 tout d\u00e9veloppeur soucieux de la qualit\u00e9 du\ncode, int\u00e9ress\u00e9 par les probl\u00e9matiques d'int\u00e9gration et de d\u00e9veloppement\ncontinus, et travaillant sur un projet comptant plus de 2 contributeurs. Elle\nse concentre sur Zuul, un syst\u00e8me de \"gating\" des contributions \u00e0 un ensemble\nde projets.\n\n", "state": 2, "thumbnail_url": "http://video-pyconfr2015.paulla.asso.fr/109%20-%20Matthieu%20Huin,%20Fabien%20Boucher%20-%20Optimiser%20l'int%C3%A9gration%20de%20code%20avec%20Zuul.mp4.jpg"}