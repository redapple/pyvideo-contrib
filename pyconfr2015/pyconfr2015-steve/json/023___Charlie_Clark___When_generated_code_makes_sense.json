{"description": "Only after a great deal of public pressure did Microsoft agree to make the\nspecification of Microsoft Office 2007 public and even this was after the\nfact. The result was many thousands of pages of narrative description and an\nextensive XML schema. Whatever one may think of the company or the format, the\nfact remains that for many offices Microsoft Excel is a standard format and we\nwant to make it as easy as possible to work with the files with Python.\n\nopenpyxl started largely as the reverse-engineering of existing files. While\nthis allowed the project to get up and running quickly, it also turned out to\nbe a dead-end when it came to supporting more advanced features.\n\nThe Office Open XML Schema is, in effect, the domain-specific language for\nMicrosoft Office. With tools like lxml it's even possible to work with this\ndirectly from Python but this requires extensive and detailed knowledge of\nsomething that is rarely intuitive and often downright confusing. Furthermore,\nmanipulating XML in memory can be a problem on very large workbooks.\n\nIn openpyxl we introduced descriptors to deal with common types in the schema,\nand added class methods so that we could simplify parsing but keep the Python\nAPI as simple as possible. This started out as a fairly laborious\ntranscription of schema to class definitions that has since been replaced by\ncode generated by what might possibly be the world's worst parser \u2013 every\nlibrary has to have some horrible code in it somewhere!\n\nThe result was that over 200 classes and their naive tests could be generated\nautomatically to provide near complete support for the chart API. The process\nisn't perfect: code rarely runs straight out of the box but it has made it\npossible to support features that otherwise could only ever be partially\nsupported at best.\n\nThe talk will cover what tools Python provides to make this kind of adventure\nsucceed and where things could be improved.\n\n", "video_mp4_url": "http://video-pyconfr2015.paulla.asso.fr/023%20-%20Charlie%20Clark%20-%20When%20generated%20code%20makes%20sense.mp4", "video_webm_url": "http://video-pyconfr2015.paulla.asso.fr/023%20-%20Charlie%20Clark%20-%20When%20generated%20code%20makes%20sense.webm", "duration": 1253, "category": "PyCon FR 2015", "speakers": ["Charlie Clark"], "video_ogv_url": "http://video-pyconfr2015.paulla.asso.fr/023%20-%20Charlie%20Clark%20-%20When%20generated%20code%20makes%20sense.ogv", "language": "French", "title": "When generated code makes sense", "summary": "openpyxl started largely as the reverse-engineering of existing files. While\nthis allowed the project to get up and running quickly, it also turned out to\nbe a dead-end when it came to supporting more advanced features. This talk\nwill explain how we've shifted to using descriptors, code generation and\npossibly the world's worst parser for more reliable code and faster\ndevelopment.\n\n", "state": 2, "thumbnail_url": "http://video-pyconfr2015.paulla.asso.fr/023%20-%20Charlie%20Clark%20-%20When%20generated%20code%20makes%20sense.mp4.jpg"}