{"speakers": ["Alex Martelli"], "description": "Our culture\u2019s default assumption is that everybody should always be striving for perfection \u2013 settling for anything less is seen as a regrettable compromise. This is wrong in most software development situations: focus instead on keeping the software simple, just \u201cgood enough\u201d, launch it early, and iteratively improve, enhance, and re-factor it. This is how software success is achieved!\n\nn a 1989 keynote speech at a Lisp conference, Richard Gabriel had a \u201clight relief\u201d section where he caricatured a SW development approach he called \u201cworse is better\u201d (AKA \u201cNew Jersey approach\u201d) and contrasted it with what he called \u201cthe right thing\u201d (AKA \u201cMIT/Stanford approach\u201d)\u2026 and despite the caricatural aspects reluctantly concluded that NJ was the most viable approach, identifying several of the actual reasons (speed of development, less monolithic designs, systems more easily adaptable to a variety of uses [including changes in the underlying requirements], ease of gradual incremental improvement over time, \u2026).\n\nThe debate hasn\u2019t died down since (Gabriel himself contributing richly to both sides (!), sometimes under the pseudonym \u201cNickieben Bourbaki\u201d). My favorite Gabriel quote is \u201cThe right-thing philosophy is based on letting the experts do their expert thing all the way to the end before users get their hands on it [snip] Worse-is-better takes advantage of the natural advantages of incremental development. Incremental improvement satis\ufb01es some human needs\u201d.\n\nHowever, while the debate is still raging, reality has steadily been shifting away from \u201cthe right thing\u201d (inherently \u201cCathedral\u201d-centralized, with \u201cBig Design Up Front\u201d a must, conceived with academia and large firms in mind, and quite unsuited to always-shifting real-world requirements) and towards \u201cthe NJ approach\u201d (suited to \u201cBazaar\u201d-like structures, agile and iterative enhancement, dynamic start-ups and independent developers, in a world of always-shifting specs).\n\nIn this talk, I come down strongly on the side of \u201cthe NJ approach\u201d, illustrating it and defending it on both philosophical and pragmatical grounds.\n\nI draw technical examples from several areas where the systems that won the \u201cmind-share battles\u201d did so by focusing on pragmatic simplicity (\u201cgood enough\u201d) to the expense of theoretical refinement and completeness (the quest for elusive perfection), leading to large ecosystems of developers bent on incremental improvement\u2014the TCP/IP approach to networking contrasted with ISO/OSI, the HTTP/HTML approach to hypertext contrasted with Xanadu, early Unix\u2019s simplistic (but OK) approach to interrupted system calls versus Multic\u2019s and ITS\u2019s perfectionism.\n\nWithin Python, I show how metaclasses\u2019 quest for completeness yielded excessive complexity (and 80% of their intended uses can now be obtained via class decorators for 20% of the complexity), and how well incremental improvement worked instead in areas such as sorting, generators, and \u201cguaranteed\u201d-finalization semantics.\n\nThe talk is not about lowering expectations: our dreams must stay big, bigger than we can achieve. It\u2019s about the best practical track towards making such dreams reality\u2014think grandiose, act humble. \u201cRightly traced and well ordered: what of that? // Speak as they please, what does the mountain care? // Ah, but a man\u2019s reach should exceed his grasp // Or what\u2019s a heaven for? All\u2019s silver-grey // Placid and perfect with my art: the worse!\u201d\n\nThis talk is probably not perfect, but I do think it\u2019s good enough.", "language": "EN", "title": "\"Good enough\" is good enough!", "tags": ["best-practices", "project-management", "principles", "refactoring"], "datetime": "2013-07-01 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/good-enough-is-good-enough", "video": "https://www.youtube.com/embed/gHG9FRSlPxw?feature=oembed", "description_md": "Our culture\u2019s default assumption is that everybody should always be striving\nfor perfection \u2013 settling for anything less is seen as a regrettable\ncompromise. This is wrong in most software development situations: focus\ninstead on keeping the software simple, just \u201cgood enough\u201d, launch it early,\nand iteratively improve, enhance, and re-factor it. This is how software\nsuccess is achieved!\n\nn a 1989 keynote speech at a Lisp conference, Richard Gabriel had a \u201clight\nrelief\u201d section where he caricatured a SW development approach he called\n\u201cworse is better\u201d (AKA \u201cNew Jersey approach\u201d) and contrasted it with what he\ncalled \u201cthe right thing\u201d (AKA \u201cMIT/Stanford approach\u201d)\u2026 and despite the\ncaricatural aspects reluctantly concluded that NJ was the most viable\napproach, identifying several of the actual reasons (speed of development,\nless monolithic designs, systems more easily adaptable to a variety of uses\n[including changes in the underlying requirements], ease of gradual\nincremental improvement over time, \u2026).\n\nThe debate hasn\u2019t died down since (Gabriel himself contributing richly to both\nsides (!), sometimes under the pseudonym \u201cNickieben Bourbaki\u201d). My favorite\nGabriel quote is \u201cThe right-thing philosophy is based on letting the experts\ndo their expert thing all the way to the end before users get their hands on\nit [snip] Worse-is-better takes advantage of the natural advantages of\nincremental development. Incremental improvement satis\ufb01es some human needs\u201d.\n\nHowever, while the debate is still raging, reality has steadily been shifting\naway from \u201cthe right thing\u201d (inherently \u201cCathedral\u201d-centralized, with \u201cBig\nDesign Up Front\u201d a must, conceived with academia and large firms in mind, and\nquite unsuited to always-shifting real-world requirements) and towards \u201cthe NJ\napproach\u201d (suited to \u201cBazaar\u201d-like structures, agile and iterative\nenhancement, dynamic start-ups and independent developers, in a world of\nalways-shifting specs).\n\nIn this talk, I come down strongly on the side of \u201cthe NJ approach\u201d,\nillustrating it and defending it on both philosophical and pragmatical\ngrounds.\n\nI draw technical examples from several areas where the systems that won the\n\u201cmind-share battles\u201d did so by focusing on pragmatic simplicity (\u201cgood\nenough\u201d) to the expense of theoretical refinement and completeness (the quest\nfor elusive perfection), leading to large ecosystems of developers bent on\nincremental improvement\u2014the TCP/IP approach to networking contrasted with\nISO/OSI, the HTTP/HTML approach to hypertext contrasted with Xanadu, early\nUnix\u2019s simplistic (but OK) approach to interrupted system calls versus\nMultic\u2019s and ITS\u2019s perfectionism.\n\nWithin Python, I show how metaclasses\u2019 quest for completeness yielded\nexcessive complexity (and 80% of their intended uses can now be obtained via\nclass decorators for 20% of the complexity), and how well incremental\nimprovement worked instead in areas such as sorting, generators, and\n\u201cguaranteed\u201d-finalization semantics.\n\nThe talk is not about lowering expectations: our dreams must stay big, bigger\nthan we can achieve. It\u2019s about the best practical track towards making such\ndreams reality\u2014think grandiose, act humble. \u201cRightly traced and well ordered:\nwhat of that? // Speak as they please, what does the mountain care? // Ah, but\na man\u2019s reach should exceed his grasp // Or what\u2019s a heaven for? All\u2019s silver-\ngrey // Placid and perfect with my art: the worse!\u201d\n\nThis talk is probably not perfect, but I do think it\u2019s good enough.\n\n"}
{"speakers": ["Erik Janssens", "Jeroen Dierckx"], "description": "Camelot provides components for building business applications on top of Python, SQLAlchemy and Qt.  It is inspired by the Django admin interface.  You can use Camelot to develop both simple and complex business applications at warp speed. Come by to ask us anything or just say hello.", "language": "EN", "title": "Camelot and SQLAlchemy Help desk", "tags": ["camelot", "gui", "sqlalchemy", "desktop"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/camelot-1", "video": null, "description_md": "Camelot provides components for building business applications on top of\nPython, SQLAlchemy and Qt. It is inspired by the Django admin interface. You\ncan use Camelot to develop both simple and complex business applications at\nwarp speed. Come by to ask us anything or just say hello.\n\n"}
{"speakers": ["Antonio Cuni"], "description": "Debugging is one of the most time consuming phases of developing.\nFor a large category of problems, fixing the bug is easy once you find it. The hard part is to spot the right (well, wrong) place in the code.\n\nThis talk presents a series of techniques of suggestions on how to make your debugging sessions more effective, including:\n- exploit the full power of Test Driven Development\n- make your bug repeatable\n- bisect the code and/or the data\n- \u201cPython dirty tricks\u201d\n- how to handle non-deterministic bugs and heisenbugs", "language": "EN", "title": "Bug hunting for dummies", "tags": ["debugging", "testing", "programming", "tdd", "gdb", "code generation", "pdb"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/bug-hunting-for-dummies", "video": null, "description_md": "Debugging is one of the most time consuming phases of developing. For a large\ncategory of problems, fixing the bug is easy once you find it. The hard part\nis to spot the right (well, wrong) place in the code.\n\nThis talk presents a series of techniques of suggestions on how to make your\ndebugging sessions more effective, including: \\- exploit the full power of\nTest Driven Development \\- make your bug repeatable \\- bisect the code and/or\nthe data \\- \u201cPython dirty tricks\u201d \\- how to handle non-deterministic bugs and\nheisenbugs\n\n"}
{"speakers": ["Steven Citron-Pousty"], "description": "Spatial is a hot topic for all sorts of developers and MongoDB offers an easy way to get started.  MongoDB enables search and checkin type applications - ranging from field resource management to social check-in applications. We are going to show you how easy it is to add spatial functionality to your application using MongoDB. In this session we will load up a spatial database and then create a REST web services, using a straight Python Mongo driver and Flask, that let your web or mobile application take advantage of the spatial functionality in MongoDB. Our application will be hosted on OpenShift - Red Hat\u2019s PaaS that provides multiple language development and native MongoDB hosting. By the end of this session, you will be ready to go home and start using MongoDB to add some great spatial functionality to your Python Application.", "language": "EN", "title": "Bringing Spatial Love to your Python Application", "tags": ["flask", "mongodb", "geospatial", "REST"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/bringing-spatial-love-to-your-python-application", "video": null, "description_md": "Spatial is a hot topic for all sorts of developers and MongoDB offers an easy\nway to get started. MongoDB enables search and checkin type applications -\nranging from field resource management to social check-in applications. We are\ngoing to show you how easy it is to add spatial functionality to your\napplication using MongoDB. In this session we will load up a spatial database\nand then create a REST web services, using a straight Python Mongo driver and\nFlask, that let your web or mobile application take advantage of the spatial\nfunctionality in MongoDB. Our application will be hosted on OpenShift - Red\nHat\u2019s PaaS that provides multiple language development and native MongoDB\nhosting. By the end of this session, you will be ready to go home and start\nusing MongoDB to add some great spatial functionality to your Python\nApplication.\n\n"}
{"speakers": ["Honza Kr\u00e1l"], "description": "In this talk I would like to show you a few real-life use-cases where\nElasticsearch can enhance the user experience of your applications. We will\nstart with the most basic use case with a seemingly simple problem of searching\nfor articles by author and move on to more advanced topics such as faceted\nnavigation and structured search.\n\nI would like to demonstrate that the very same tool and data can be used for\nreal-time analytics (topic distribution, publishing frequency, most popular or\ncommented on content) and data mining in a distributed environment capable of\nhandling terabyte-sized datasets.\n\nFinally we will demonstrate how Elasticsearch can provide the infrastructure for\nfeatures beyond search, such as automatic content categorization, user-defined\ncategories or even real-time alerts.\n\nAttendees should walk away with a good understanding of what Elasticsearch can\nbring them and where it is a good fit.", "language": "EN", "title": "Beyond Search", "tags": ["search", "elasticsearch", "data-analysis"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/beyond-search", "video": "https://www.youtube.com/embed/_lVijLepOAM?feature=oembed", "description_md": "In this talk I would like to show you a few real-life use-cases where\nElasticsearch can enhance the user experience of your applications. We will\nstart with the most basic use case with a seemingly simple problem of\nsearching for articles by author and move on to more advanced topics such as\nfaceted navigation and structured search.\n\nI would like to demonstrate that the very same tool and data can be used for\nreal-time analytics (topic distribution, publishing frequency, most popular or\ncommented on content) and data mining in a distributed environment capable of\nhandling terabyte-sized datasets.\n\nFinally we will demonstrate how Elasticsearch can provide the infrastructure\nfor features beyond search, such as automatic content categorization, user-\ndefined categories or even real-time alerts.\n\nAttendees should walk away with a good understanding of what Elasticsearch can\nbring them and where it is a good fit.\n\n"}
{"speakers": ["Kay Hayen"], "description": "Last time, Nuitka was introduced to the public, with a mission statement, and project plan detailed.\n\nIn the mean time, Nuitka has reached milestones of compile and generate efficient code for all current Python versions (2.6, 2.7, 3.2 fully, 3.3 experimental at the time of this writing) and has begun to implement actual standard compiler techniques.\n\nIn this talk, the focus will be on escape analysis, type inference, dead code elimination, value propagation, function call inlining and specialization. Nuitka will perform static code analysis, and this talk is about how this is done, describing the standard algorithms, and their application to Python in particular.", "language": "EN", "title": "An optimizing static Python compiler", "tags": ["performance", "scientific-computing", "optimization", "open-source", "python3"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/an-optimizing-static-python-compiler", "video": "https://www.youtube.com/embed/BDjXZY_8d58?feature=oembed", "description_md": "Last time, Nuitka was introduced to the public, with a mission statement, and\nproject plan detailed.\n\nIn the mean time, Nuitka has reached milestones of compile and generate\nefficient code for all current Python versions (2.6, 2.7, 3.2 fully, 3.3\nexperimental at the time of this writing) and has begun to implement actual\nstandard compiler techniques.\n\nIn this talk, the focus will be on escape analysis, type inference, dead code\nelimination, value propagation, function call inlining and specialization.\nNuitka will perform static code analysis, and this talk is about how this is\ndone, describing the standard algorithms, and their application to Python in\nparticular.\n\n"}
{"speakers": ["Federico Frenguelli"], "description": "This training introduces you to the marvelous world of Blender, the popular opensource 3d computer graphics software. The goal is to create step by step some stunning 3d art by the end of the training giving you the knowledge to start having fun with Blender and python.\n\nIt begins with basic Blender\u2019s features such as 3D modeling tools, materials and textures,  lighting, camera management and a few words about animation tools. \nGoing deeper, we meet Blender\u2019s most appreciated feature: physics simulation! Smoke, fluids, particles, rigid and soft bodies will all be under your control.\nNeed more? We\u2019ll see how to use the embedded Python interpreter and the Blender Python API to expand Blender, creating custom tools and automating boring tasks.", "language": "EN", "title": "An intro to Blender modeling and scripting", "tags": ["graphics", "pythonscripts"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/an-intro-to-blender-modeling-and-scripting", "video": "https://www.youtube.com/embed/4e6z3Ada00I?feature=oembed", "description_md": "This training introduces you to the marvelous world of Blender, the popular\nopensource 3d computer graphics software. The goal is to create step by step\nsome stunning 3d art by the end of the training giving you the knowledge to\nstart having fun with Blender and python.\n\nIt begins with basic Blender\u2019s features such as 3D modeling tools, materials\nand textures, lighting, camera management and a few words about animation\ntools. Going deeper, we meet Blender\u2019s most appreciated feature: physics\nsimulation! Smoke, fluids, particles, rigid and soft bodies will all be under\nyour control. Need more? We\u2019ll see how to use the embedded Python interpreter\nand the Blender Python API to expand Blender, creating custom tools and\nautomating boring tasks.\n\n"}
{"speakers": ["Federico Frenguelli"], "description": "", "language": "EN", "title": "An Intro to Blender Modeling and Scripting (part 2)", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/intro-blender-modeling-and-scripting-part-2", "video": "https://www.youtube.com/embed/U1K19GoLMuk?feature=oembed", "description_md": "\n\n"}
{"speakers": ["Stefano Dindo"], "description": "I will help you to design and develop scalable infrastructure with Amazon Web Services. we can discuss about all AWS service like:\n- EC2\n- RDS\n- DynamoDB\n- Elasticbeanstalk\n- Route53\n- Elastic Load Balancer\n- CLI\n- Cost optimizations", "language": "EN", "title": "Amazon User Group Help Desk", "tags": ["cloud"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/amazon-user-group-help-desk", "video": null, "description_md": "I will help you to design and develop scalable infrastructure with Amazon Web\nServices. we can discuss about all AWS service like: \\- EC2 \\- RDS \\- DynamoDB\n\\- Elasticbeanstalk \\- Route53 \\- Elastic Load Balancer \\- CLI \\- Cost\noptimizations\n\n"}
{"speakers": ["Larry Hastings"], "description": "We all know Python is a bytecode interpreter, but what does that mean? Come find out! You\u2019ll learn what Python bytecodes are, what they do, and even how you can tinker with them. By the end of the talk you\u2019ll be an expert. All code will be 100% Python 3\u2013knowledge of C not required!\n\nThe talk will examine Python bytecodes in depth\u2013the families of bytecodes, how and why they are the way they are, and what some specific Python blocks look like when translated to bytecode.\n\nTo facilitate the discussion, I\u2019ll unveil a Python bytecode disassembler, a matching Python bytecode assembler, and even a (very!) simple Python bytecode interpreter, all written in Python 3.3. Talk will also demonstrate a simple FORTH written in a combination of Python and bytecode assembly. All source code will be made available at the end of the talk under an open source license.", "language": "EN", "title": "All-Singing All-Dancing Python Bytecode", "tags": ["interpreter", "bytecode", "vm"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/all-singing-all-dancing-python-bytecode", "video": "https://www.youtube.com/embed/0IzXcjHs-P8?feature=oembed", "description_md": "We all know Python is a bytecode interpreter, but what does that mean? Come\nfind out! You\u2019ll learn what Python bytecodes are, what they do, and even how\nyou can tinker with them. By the end of the talk you\u2019ll be an expert. All code\nwill be 100% Python 3\u2013knowledge of C not required!\n\nThe talk will examine Python bytecodes in depth\u2013the families of bytecodes, how\nand why they are the way they are, and what some specific Python blocks look\nlike when translated to bytecode.\n\nTo facilitate the discussion, I\u2019ll unveil a Python bytecode disassembler, a\nmatching Python bytecode assembler, and even a (very!) simple Python bytecode\ninterpreter, all written in Python 3.3. Talk will also demonstrate a simple\nFORTH written in a combination of Python and bytecode assembly. All source\ncode will be made available at the end of the talk under an open source\nlicense.\n\n"}
{"speakers": ["Thomas Perl"], "description": "* Talk materials (+ source code) available at http://thp.io/2013/europython/ *\n\nWith the introduction of affordable off-the-shelf motion controllers in game consoles, hacks have been developed to make the Wii Remote, Playstation Move and Microsoft Kinect work together with PCs for all kinds of use cases.\n\nIn this talk, the PS Move API\u2019s Python bindings will be introduced, and we will create an augmented reality game using Python and OpenGL with the PS Move API used for 3D position and rotation tracking (six degrees of freedom, 6DoF). The API and its Python bindings work on Linux, Mac OS X and Windows.\n\nSee this video for a preview on how Augmented Reality with the PS Move works:\n\n\n\nAll important concepts (6DoF tracking, 3D rendering, etc..) will be explained and utilized in the game we walk through during the talk. Recommended prior knowledge: Vector math, basic 3D rendering knowledge. The PS Move API\u2019s Python bindings can also be used for integrating inertial sensor input into existing applications (e.g. interactive whiteboard, game controller in 2D games, acceleration and rotation measurement, magnetic measurement, generic input devices, mouse emulation, ambient display, etc..).\n\nThe contents of this talk is based on my master\u2019s thesis on computer vision and sensor fusion. For other use cases (non-augmented reality), see this showcase video. Controllers will be available for testing during the event - if you want to use it at home, the PS Move controller and PS Eye camera are usually available bundled for around 36 Euro in electronics stores (or you use your laptop\u2019s webcam).", "language": "EN", "title": "Affordable Off-The-Shelf Augmented Reality in Python", "tags": ["opengl", "sensor fusion", "cv", "game-development", "graphics"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/affordable-off-the-shelf-augmented-reality-in-python", "video": "https://www.youtube.com/embed/Hn-XCv7rc7U?feature=oembed", "description_md": "_* Talk materials (+ source code) available at http://thp.io/2013/europython/\n*_\n\nWith the introduction of affordable off-the-shelf motion controllers in game\nconsoles, hacks have been developed to make the Wii Remote, Playstation Move\nand Microsoft Kinect work together with PCs for all kinds of use cases.\n\nIn this talk, the [PS Move API](http://thp.io/2010/psmove/)\u2019s Python bindings\nwill be introduced, and we will create an augmented reality game using Python\nand OpenGL with the PS Move API used for 3D position and rotation tracking\n(six degrees of freedom, 6DoF). The API and its Python bindings work on Linux,\nMac OS X and Windows.\n\nSee [this video](http://youtu.be/xfJCUf1uD3M) for a preview on how Augmented\nReality with the PS Move works:\n\n![](http://thp.io/2010/psmove/ar.png)\n\nAll important concepts (6DoF tracking, 3D rendering, etc..) will be explained\nand utilized in the game we walk through during the talk. Recommended prior\nknowledge: Vector math, basic 3D rendering knowledge. The PS Move API\u2019s Python\nbindings can also be used for integrating inertial sensor input into existing\napplications (e.g. interactive whiteboard, game controller in 2D games,\nacceleration and rotation measurement, magnetic measurement, generic input\ndevices, mouse emulation, ambient display, etc..).\n\nThe contents of this talk is based on my [master\u2019s thesis on computer vision\nand sensor fusion](http://thp.io/2012/thesis/). For other use cases (non-\naugmented reality), see [this showcase video](http://youtu.be/euQU6n1OAqI).\nControllers will be available for testing during the event - if you want to\nuse it at home, the PS Move controller and PS Eye camera are usually available\nbundled for around 36 Euro in electronics stores (or you use your laptop\u2019s\nwebcam).\n\n"}
{"speakers": ["Mike M\u00fcller"], "description": "Special Training\n\nThis two-day training differs from the other trainings in several ways\nwas:\n\n\nit\u2019s longer: two days.\nit\u2019s offered on Saturday (9am-6pm) and Sunday (8am-3pm), after the talk\ndays and in parallel to the sprints, and\nit\u2019s charged for separately, and requires a separate registration fee of\n\u20ac242 (VAT included) for individuals, and \u20ac400+VAT for companies: buy now!\n\n\nTarget Audience\n\nThis course targets medium level Python programmers who would like to dive\ndeeper into the language. Alternatively, participants can attend the course\nPython for Programmers to be able to take full advantage of this advanced course.\n\nMotivation\n\nThe Python programming language is relatively easy to learn and allows to solve\nreal-world problem with a just a few concepts.\n\nBut it also offers several advanced features that can help to greatly improve\nthe programming experience. The latest releases of Python 2.x and 3.x add\ninteresting features that can be used passively without deeper understanding\nabout how they work. The course teaches how these features work and provides\ndetails about meta-programming and other advanced techniques.\n\nComprehensions\n\nThe principle comes from the functional language Haskell but integrates very\nwell into Python. After list comprehension came generator expressions followed\nby dictionary and set comprehensions.\n\nThe course introduces this style of programming with examples focusing on\nadvantages and disadvantages for certain tasks.\nIterators and Generators\n\nIterators and generator make lazy evaluation, that is generating an object just\nwhen it is needed, very convenient. The concept of yielding instead of\nreturning plays a central role. The course shows how to use generators to\nsimplify programming tasks. Furthermore, coroutines will be used to implement\nconcurrent solutions. An overview over the itertools module shows how to\nelegantly solve iteration tasks.\n\nDecorators\n\nDecorator provide a very useful method to add functionality to existing\nfunctions and classes. The course uses examples for caching, proxying, and\nchecking of arguments to demonstrate how decorators can improve code\nreadability and can simplify solutions.\n\nContext Managers\n\nThe with statement helps to make code more robust by simplifying exception\nhandling. The course shows how to use the with statement with the standard\nlibrary and how to write your own objects that take advantage of with. The\ncontextlib from the standard library helps to make this easier.\n\nDescriptors\n\nDescriptors determine how attribute of object are accessed. The course uses\nexamples to show how descriptors work and how they can be used to customize\nattribute access.\n\nMetaclasses\n\nMetaclasses offer a powerful way to change how classes in Python behave. While\nbeing an advanced feature that should be used sparingly, it can provide\ninteresting help for complex problems. The course shows how to apply\nmetaclasses and gives examples where they can be useful.\n\nPatterns\n\nPython comes with batteries included. The language is very expressive\nan therefore many problems that are solved with help of certain\npatterns do not exist in the first place. Nevertheless, a few patterns\noffer pythonic solutions and are presented in this course.\n\n\"It\u2019s easier to ask for forgiveness than permission (EFAP)\"\nOne pythonic principle is \u201cIt\u2019s easier to ask for forgiveness\nthan permission (EFAP)\u201d. Opposed to the approach to look before\nyou leap, this principle states that you should first try an\naction and if it fails react appropriately.\n\nSingelton\nSingeltons are objects of which only one instance\nis supposed to exist. Python provides several ways to\nimplement singeltons.\n\nNull Objects\nNull objects can be used instead of the type None to avoid\ntests for None. Implementation, usage as well as advantages and\ndisadvantages are covered.\n\nProxy\nProxies stand for other objects. Setup and usage\nof proxies are covered.\n\nObserver\nThe observer pattern allows several objects to\nhave access to the same data. The principles\nof this pattern are shown with a comprehensive example.\n\nConstructor\nParameters of constructors are often assigned to\ninstance variables. This pattern can replace a\nmany lines of manual assignment with only one line\nof code.\n\nExercises\n\nThe participants can follow all steps directly on their computers. There are\nexercises at the end of each unit providing ample opportunity to apply the\nfreshly learned knowledge.\n\nCourse Material\n\nEvery participant receives comprehensive printed materials that cover the whole\ncourse content as wells as all source codes and used software.\n\nQuestions\n\nPlease ask Mike M\u00fcller (mmueller [at] python-academy [dot]  de) about\nthe course content.", "language": "EN", "title": "Advanced Python", "tags": [], "datetime": "2013-07-06 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/advanced-python-2", "video": null, "description_md": "**Special Training**\n\nThis two-day training differs from the other trainings in several ways was:\n\n  1. it\u2019s longer: two days.\n  2. it\u2019s offered on Saturday (9am-6pm) and Sunday (8am-3pm), after the talk days and in parallel to the sprints, and\n  3. it\u2019s charged for separately, and requires a separate registration fee of \u20ac242 (VAT included) for individuals, and \u20ac400+VAT for companies: [buy now](https://ep2013.europython.eu/p3/cart/?f=TRAIN01)!\n\n**Target Audience**\n\nThis course targets medium level Python programmers who would like to dive\ndeeper into the language. Alternatively, participants can attend the course\nPython for Programmers to be able to take full advantage of this advanced\ncourse.\n\n**Motivation**\n\nThe Python programming language is relatively easy to learn and allows to\nsolve real-world problem with a just a few concepts.\n\nBut it also offers several advanced features that can help to greatly improve\nthe programming experience. The latest releases of Python 2.x and 3.x add\ninteresting features that can be used passively without deeper understanding\nabout how they work. The course teaches how these features work and provides\ndetails about meta-programming and other advanced techniques.\n\n**Comprehensions**\n\nThe principle comes from the functional language Haskell but integrates very\nwell into Python. After list comprehension came generator expressions followed\nby dictionary and set comprehensions.\n\nThe course introduces this style of programming with examples focusing on\nadvantages and disadvantages for certain tasks. Iterators and Generators\n\nIterators and generator make lazy evaluation, that is generating an object\njust when it is needed, very convenient. The concept of yielding instead of\nreturning plays a central role. The course shows how to use generators to\nsimplify programming tasks. Furthermore, coroutines will be used to implement\nconcurrent solutions. An overview over the itertools module shows how to\nelegantly solve iteration tasks.\n\n**Decorators**\n\nDecorator provide a very useful method to add functionality to existing\nfunctions and classes. The course uses examples for caching, proxying, and\nchecking of arguments to demonstrate how decorators can improve code\nreadability and can simplify solutions.\n\n**Context Managers**\n\nThe with statement helps to make code more robust by simplifying exception\nhandling. The course shows how to use the with statement with the standard\nlibrary and how to write your own objects that take advantage of with. The\ncontextlib from the standard library helps to make this easier.\n\n**Descriptors**\n\nDescriptors determine how attribute of object are accessed. The course uses\nexamples to show how descriptors work and how they can be used to customize\nattribute access.\n\n**Metaclasses**\n\nMetaclasses offer a powerful way to change how classes in Python behave. While\nbeing an advanced feature that should be used sparingly, it can provide\ninteresting help for complex problems. The course shows how to apply\nmetaclasses and gives examples where they can be useful.\n\n**Patterns**\n\nPython comes with batteries included. The language is very expressive an\ntherefore many problems that are solved with help of certain patterns do not\nexist in the first place. Nevertheless, a few patterns offer pythonic\nsolutions and are presented in this course.\n\n_\"It\u2019s easier to ask for forgiveness than permission (EFAP)\"_ One pythonic\nprinciple is \u201cIt\u2019s easier to ask for forgiveness than permission (EFAP)\u201d.\nOpposed to the approach to look before you leap, this principle states that\nyou should first try an action and if it fails react appropriately.\n\n_Singelton_ Singeltons are objects of which only one instance is supposed to\nexist. Python provides several ways to implement singeltons.\n\n_Null Objects_ Null objects can be used instead of the type `None` to avoid\ntests for `None`. Implementation, usage as well as advantages and\ndisadvantages are covered.\n\n_Proxy_ Proxies stand for other objects. Setup and usage of proxies are\ncovered.\n\n_Observer_ The observer pattern allows several objects to have access to the\nsame data. The principles of this pattern are shown with a comprehensive\nexample.\n\n_Constructor_ Parameters of constructors are often assigned to instance\nvariables. This pattern can replace a many lines of manual assignment with\nonly one line of code.\n\n**Exercises**\n\nThe participants can follow all steps directly on their computers. There are\nexercises at the end of each unit providing ample opportunity to apply the\nfreshly learned knowledge.\n\n**Course Material**\n\nEvery participant receives comprehensive printed materials that cover the\nwhole course content as wells as all source codes and used software.\n\n**Questions**\n\nPlease ask Mike M\u00fcller (mmueller [**at**] python-academy [**dot**] de) about\nthe course content.\n\n"}
{"speakers": ["Federico Caboni"], "description": "Note: this is exactly the same training session (but updated to the new and improved technologies!) I had to drop last year due to sickness. By voting this training you\u2019ll help the human race have its moral revenge against viruses, bacteria and other potentially annoying life forms :-)\n\nSoftware testing is an activity that\u2019s all too often neglected by novice and expert programmers alike.\n\nDuring this training we\u2019ll work through both high level concepts and specific techniques to get you started with Python software testing. \n\nWe\u2019ll start with basic concepts and unit testing, using PyUnit, and we\u2019ll build up to fancier stuff like:\n\n\nmock objects; \ntest driven development; \nfuzzing;\nautomated web application testing; \nperformance testing;\nmeaning of life.\n\n\nI\u2019ll also give you sound business motivations to persuade that annoying manager of yours who thinks testing is \u201ca waste of time\u201d (the fool!) :-)\n\nThe training will be, of course, Python-centric but most ideas we\u2019ll talk about are usable in pretty much every language and environment you could happen to work with.\n\nPrerequisites: OOP, basic Python programming. No previous testing experience required.", "language": "EN", "title": "A hands-on introduction to software testing (reloaded)", "tags": ["quality-assurance", "trac", "testing", "tdd", "refactoring", "teamwork", "software-engineering", "performance", "best-practices"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/a-hands-on-introduction-to-software-testing-reloaded", "video": null, "description_md": "**Note**: _this is exactly the same training session (but updated to the new and improved technologies!) I had to drop last year due to sickness. By voting this training you\u2019ll help the human race have its moral revenge against viruses, bacteria and other potentially annoying life forms :-)_\n\nSoftware testing is an activity that\u2019s all too often neglected by novice and\nexpert programmers alike.\n\nDuring this training we\u2019ll work through both high level concepts and specific\ntechniques to get you started with Python software testing.\n\nWe\u2019ll start with basic concepts and unit testing, using _PyUnit_, and we\u2019ll\nbuild up to fancier stuff like:\n\n  * mock objects; \n  * test driven development; \n  * fuzzing;\n  * automated web application testing; \n  * performance testing;\n  * meaning of life.\n\nI\u2019ll also give you sound business motivations to persuade that annoying\nmanager of yours who thinks testing is \u201ca waste of time\u201d (the fool!) :-)\n\nThe training will be, of course, Python-centric but most ideas we\u2019ll talk\nabout are usable in pretty much every language and environment you could\nhappen to work with.\n\n**Prerequisites**: OOP, basic Python programming. No previous testing experience required.\n\n"}
{"speakers": ["Yves Hilpisch"], "description": "Apart from being a programming language, Python and Python-based libraries and tools are used nowadays for a great variety of other purposes than just programming.\n\nThe talk illustrates the impact of Python in areas such as science, research, teaching, publishing, regulation, marketing & sales, business strategy.", "language": "EN", "title": "A Better Future with Python", "tags": [], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/better-future-python", "video": "https://www.youtube.com/embed/48DnfQAMvJs?feature=oembed", "description_md": "Apart from being a programming language, Python and Python-based libraries and\ntools are used nowadays for a great variety of other purposes than just\nprogramming.\n\nThe talk illustrates the impact of Python in areas such as science, research,\nteaching, publishing, regulation, marketing &amp; sales, business strategy.\n\n"}
{"speakers": ["Massimo Azzolini"], "description": "Progettare utilizzando metodologie agili \u00e8 sempre pi\u00f9 un\u2019esigenza piuttosto che una scelta. \u201cTime to market\u201d sempre pi\u00f9 brevi, nuovi tool ed API da integrare, ci sfidano continuamente a migliorarci e ad essere pi\u00f9 efficienti.\nPer questo motivo abbiamo realizzato Penelope (getpenelope.github.com) e lo abbiamo realizzato nel modo pi\u00f9 agile possibile. \nVorrei raccontarvi come abbiamo integrato Trac e come potremo sostituirlo con altri sistemi di issue tracking, come sfruttare GoogleDrive oggi e DropBox domani, come autenticarsi con oauth2 verso Google o saltare in corsa sul tuo provider preferito, come via SqlAlchemy ci siamo dimenticati di avere Postgres dietro le spalle.\nPython \u00e8 stato la colla, Pyramid il framework e Deform/Colander/Bootstrap il sistema rapido per gestire il layout dei nostri dati.", "language": "IT", "title": "Essere agili? Metodi, strumenti e integrazioni: Python \u201cto rule them all\u201d", "tags": ["api", "application-design", "pyramid", "integration", "trac"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/essere-agili-metodi-strumenti-e-integrazioni-python-to-rule-them-all", "video": null, "description_md": "Progettare utilizzando metodologie agili \u00e8 sempre pi\u00f9 un\u2019esigenza piuttosto\nche una scelta. \u201cTime to market\u201d sempre pi\u00f9 brevi, nuovi tool ed API da\nintegrare, ci sfidano continuamente a migliorarci e ad essere pi\u00f9 efficienti.\nPer questo motivo abbiamo realizzato Penelope (getpenelope.github.com) e lo\nabbiamo realizzato nel modo pi\u00f9 agile possibile. Vorrei raccontarvi come\nabbiamo integrato Trac e come potremo sostituirlo con altri sistemi di issue\ntracking, come sfruttare GoogleDrive oggi e DropBox domani, come autenticarsi\ncon oauth2 verso Google o saltare in corsa sul tuo provider preferito, come\nvia SqlAlchemy ci siamo dimenticati di avere Postgres dietro le spalle. Python\n\u00e8 stato la colla, Pyramid il framework e Deform/Colander/Bootstrap il sistema\nrapido per gestire il layout dei nostri dati.\n\n"}
{"speakers": ["Andrea Crotti"], "description": "", "language": "EN", "title": "Emacs and shell as your best friends", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/emacs-and-shell-your-best-friends", "video": null, "description_md": "\n\n"}
{"speakers": ["Dougal Matthews", "Honza Kr\u00e1l"], "description": "I can help you with giving advice on proper and efficient use of elasticsearch and it\u2019s features, including deployment and operation aspects.", "language": "EN", "title": "Elasticsearch Helpdesk", "tags": ["search", "elasticsearch"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/elasticsearch", "video": null, "description_md": "I can help you with giving advice on proper and efficient use of elasticsearch\nand it\u2019s features, including deployment and operation aspects.\n\n"}
{"speakers": ["Dougal Matthews"], "description": "ElasticSearch is a full text search engine based on Apache Lucene. It\u2019s the\nnew kid of the block and competes with other projects like Apache Solr. It is\nopen source under the Apache Licence and backed by the (well funded)\nElasticSearch company which offers support and training.\n\nThis talk will provide an introduction to ElasticSearch, the community around\nit and the lessons learned when working with ElasticSearch to index hundreds\nof millions of documents in a multitude of languages and character sets. The\nrough outline of the talk will be:\n\n\nIntroduction to myself, Artirix and the work that we do.\nElasticSearch introduction - Project background and interesting features.\nAn introduction to the community and third party plugins.\nQuick overview of usage (inserting, querying) and the different versions.\nLessons learned when creating a large index.", "language": "EN", "title": "ElasticSearch: Introduction and lessons learned", "tags": ["elasticsearch", "search", "Full Text Search", "databases"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/elasticsearch-introduction-and-lessons-learned", "video": null, "description_md": "ElasticSearch is a full text search engine based on Apache Lucene. It\u2019s the\nnew kid of the block and competes with other projects like Apache Solr. It is\nopen source under the Apache Licence and backed by the (well funded)\nElasticSearch company which offers support and training.\n\nThis talk will provide an introduction to ElasticSearch, the community around\nit and the lessons learned when working with ElasticSearch to index hundreds\nof millions of documents in a multitude of languages and character sets. The\nrough outline of the talk will be:\n\n  * Introduction to myself, Artirix and the work that we do.\n  * ElasticSearch introduction - Project background and interesting features.\n  * An introduction to the community and third party plugins.\n  * Quick overview of usage (inserting, querying) and the different versions.\n  * Lessons learned when creating a large index.\n\n"}
{"speakers": ["Marc-Andr\u00e9 Lemburg"], "description": "As we all know, Python is a very efficient implementation language - so efficient, that you sometimes face new challenges in projects. Very often, you can completely skip the prototype phase and go directly to the main development phase. Customers love this, of course, but this approach tends to come with its own unique set of requirements and problems.\n\nTeam size, communication, application design, work distribution, milestone and customer expectation management are important factors for the success of such a project.\n\nThe talk will discuss a few strategies that have worked in many larger projects and also touch upon some things that did not work out well.", "language": "EN", "title": "Efficient Python development with small teams", "tags": ["quality-assurance", "project-management", "business", "communication", "testing", "principles", "application-design", "design", "software-engineering", "best-practices", "strategies", "architecture"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/efficient-python-development-with-small-teams", "video": null, "description_md": "As we all know, Python is a very efficient implementation language - so\nefficient, that you sometimes face new challenges in projects. Very often, you\ncan completely skip the prototype phase and go directly to the main\ndevelopment phase. Customers love this, of course, but this approach tends to\ncome with its own unique set of requirements and problems.\n\nTeam size, communication, application design, work distribution, milestone and\ncustomer expectation management are important factors for the success of such\na project.\n\nThe talk will discuss a few strategies that have worked in many larger\nprojects and also touch upon some things that did not work out well.\n\n"}
{"speakers": ["Guillaume Aubert"], "description": "Slides available from speakerdeck.com\nGmvault downloadable from http://www.gmvault.org\nSource code available on Github from https://github.com/gaubert/gmvault\n\n\nWith the emergence of mobile platforms such as IOS and Android, building Applications (Apps) has again been trendy for the last three to five years within the developers\u2019 community. The birth of Apps stores for traditional platforms such as Mac OS X, Windows 8 and Ubuntu also favors a re-birth of cross-plateform desktop applications development. \nGmvault is a standalone open-source application allowing users to backup and restore their Gmail mailbox (www.gmvault.org). Within this talk, the Gmvault creator will detail based on his experience, why he thinks that the Python platform is a mature candidate to be used for developing cross-platform applications. He will detail the strengths of Python, to develop multi-platform applications in addition to its intrinsic qualities, like: the abstraction of Python OS oriented libraries (os, file) making Python agnostic of the hosting platform, the capacity to interface with any c/c++ library, the dedicated OS system APIs (win32, registry, \u2026) to deal with OS specificities. He will also go through the current Python weaknesses when one wants to develop multi-platform applications like the complete lack of mature and well maintained desktop packaging and deployment libraries for Windows and Mac OS X, the limited number of available multi-platform GUI toolkits or the lack of libraries interfacing with the different OS scheduling or notification features. \nHe will finally share his experience on building an open-source application and especially what the developer will get out of this journey if he is brave enough to embark on this adventure.", "language": "EN", "title": "Developing multi-platform apps with Python in 2013", "tags": ["gui", "application-development", "deployment"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/developing-open-source-multi-platform-applications-with-python-in-2013", "video": null, "description_md": "  * Slides available from [speakerdeck.com](https://speakerdeck.com/zoobert/europython-2013-cross-platform-apps-dev-in-python)\n  * Gmvault downloadable from <http://www.gmvault.org>\n  * Source code available on Github from <https://github.com/gaubert/gmvault>\n\nWith the emergence of mobile platforms such as IOS and Android, building\nApplications (Apps) has again been trendy for the last three to five years\nwithin the developers\u2019 community. The birth of Apps stores for traditional\nplatforms such as Mac OS X, Windows 8 and Ubuntu also favors a re-birth of\ncross-plateform desktop applications development. Gmvault is a standalone\nopen-source application allowing users to backup and restore their Gmail\nmailbox ([www.gmvault.org](http://www.gmvault.org)). Within this talk, the\nGmvault creator will detail based on his experience, why he thinks that the\nPython platform is a mature candidate to be used for developing cross-platform\napplications. He will detail the strengths of Python, to develop multi-\nplatform applications in addition to its intrinsic qualities, like: the\nabstraction of Python OS oriented libraries (os, file) making Python agnostic\nof the hosting platform, the capacity to interface with any c/c++ library, the\ndedicated OS system APIs (win32, registry, \u2026) to deal with OS specificities.\nHe will also go through the current Python weaknesses when one wants to\ndevelop multi-platform applications like the complete lack of mature and well\nmaintained desktop packaging and deployment libraries for Windows and Mac OS\nX, the limited number of available multi-platform GUI toolkits or the lack of\nlibraries interfacing with the different OS scheduling or notification\nfeatures. He will finally share his experience on building an open-source\napplication and especially what the developer will get out of this journey if\nhe is brave enough to embark on this adventure.\n\n"}
{"speakers": ["Nahuel Defoss\u00e9"], "description": "SCADA are real time monitoring and controlling systems, they generally control\nremote processes. They\u2019re usually tied to proprietary protocols and even network\nstacks and generally end up being very expensive. Recent Open Hardware boards provide\na very cheap alternative for home and small business applications, and Python has\na very appealing ecosystem of libraries and frameworks to be the language of choice\nif we plan to use the web as the main interface, and develop an open solution.\n\nDjango is a popular framework in the web applications world, but it still \nlacks some features for \u201creal time web\u201d. ZMQ is a very popular library for\nasynchronous communication which provides some very handy abstractions \nover plain UNIX sockets that can be used as a very effective IPC transport\nfor any application. Web Sockets is one of the W3C standards for server to client updates.\nThese three pieces of technology get along very well.\n\nThe goal of this talk is to give an overview and design principles about how can we integrate\nDjango, WebSockets, ZMQ and other libraries to provide real time web based SCADA solution.", "language": "EN", "title": "Designing a Real Time Control System based on Django, ZMQ and WebSockets", "tags": ["web", "django", "twisted", "embedding", "async"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/designing-a-real-time-control-system-based-on-django-zmq-and-websockets", "video": null, "description_md": "SCADA are real time monitoring and controlling systems, they generally control\nremote processes. They\u2019re usually tied to proprietary protocols and even\nnetwork stacks and generally end up being very expensive. Recent Open Hardware\nboards provide a very cheap alternative for home and small business\napplications, and Python has a very appealing ecosystem of libraries and\nframeworks to be the language of choice if we plan to use the web as the main\ninterface, and develop an open solution.\n\nDjango is a popular framework in the web applications world, but it still\nlacks some features for \u201creal time web\u201d. ZMQ is a very popular library for\nasynchronous communication which provides some very handy abstractions over\nplain UNIX sockets that can be used as a very effective IPC transport for any\napplication. Web Sockets is one of the W3C standards for server to client\nupdates. These three pieces of technology get along very well.\n\nThe goal of this talk is to give an overview and design principles about how\ncan we integrate Django, WebSockets, ZMQ and other libraries to provide real\ntime web based SCADA solution.\n\n"}
{"speakers": ["Marc-Andr\u00e9 Lemburg"], "description": "Concepts for designing large and scalable Python applications that work in practice.\n\nPython is often too referred to as a scripting language. While Python is an ideal platform for scripting, integration or plugin tasks, it does in fact cover all the concepts needed for truly large-scale object oriented application development. However, complex applications bring new challenges.\n\nThe talk will draw on the speaker\u2019s experience with large-scale application design using Python as central implementation language and provide a cookbook approach to many of the problems you face when designing and organizing complex application frameworks.\n\nThe approach has been proven in many real-life projects, ranging from web application servers in varying fields of application to complete finance trading systems. Python has always proven to be a truly good choice with an outstanding time-to-market advantage over other implementation languages such as Java or C++. It allows small software development companies to successfully compete against multi-million dollar ventures.", "language": "EN", "title": "Designing Large-Scale Applications in Python", "tags": ["business", "database", "sql", "integration", "scalability", "servers", "refactoring", "application-design", "design", "software-engineering", "framework", "databases", "best-practices", "architecture"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/designing-large-scale-applications-in-python", "video": null, "description_md": "**Concepts for designing large and scalable Python applications that work in practice.**\n\nPython is often too referred to as a scripting language. While Python is an\nideal platform for scripting, integration or plugin tasks, it does in fact\ncover all the concepts needed for truly large-scale object oriented\napplication development. However, complex applications bring new challenges.\n\nThe talk will draw on the speaker\u2019s experience with large-scale application\ndesign using Python as central implementation language and provide a cookbook\napproach to many of the problems you face when designing and organizing\ncomplex application frameworks.\n\nThe approach has been proven in many real-life projects, ranging from web\napplication servers in varying fields of application to complete finance\ntrading systems. Python has always proven to be a truly good choice with an\noutstanding time-to-market advantage over other implementation languages such\nas Java or C++. It allows small software development companies to successfully\ncompete against multi-million dollar ventures.\n\n"}
{"speakers": ["Bruno Reni\u00e9"], "description": "When it comes to deploying web applications, it seems the Python and Django world doesn\u2019t exactly follows the Zen mantra of \u201cThere should be one \u2013 and preferably only one \u2013 obvious way to do it\u201d. This talk will explain a deployment approach based on the Twelve-Factor methodology that leverages standard Python and  system administration techniques.\n\nThis approach allows easy deployments on various hosting environments (PaaS or custom-build infrastructure), minimizes dev/prod divergence and allows interoperability with non-python systems. It is particularly suited for teams practicing continuous deployment.\n\nMost examples and techniques will be based on Django but they can easily be adapted to other Python web frameworks. This talk targets DevOps people and/or application developers.", "language": "EN", "title": "Deployability of Python Web Applications", "tags": ["deployment", "django"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/deployability-of-python-web-applications", "video": null, "description_md": "When it comes to deploying web applications, it seems the Python and Django\nworld doesn\u2019t exactly follows the Zen mantra of \u201cThere should be one \u2013 and\npreferably only one \u2013 obvious way to do it\u201d. This talk will explain a\ndeployment approach based on the [Twelve-Factor\nmethodology](http://12factor.net/) that leverages standard Python and system\nadministration techniques.\n\nThis approach allows easy deployments on various hosting environments (PaaS or\ncustom-build infrastructure), minimizes dev/prod divergence and allows\ninteroperability with non-python systems. It is particularly suited for teams\npracticing continuous deployment.\n\nMost examples and techniques will be based on Django but they can easily be\nadapted to other Python web frameworks. This talk targets DevOps people and/or\napplication developers.\n\n"}
{"speakers": ["Andrea Crotti"], "description": "This talk is about decorators and context managers, what they are, how\nthey really work and how you can benefit from them.\n\nI already gave this talk at Pycon UK 2012, which I will integrate with\nnew material and better examples.", "language": "EN", "title": "Decorators and context managers", "tags": ["best-practices"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/decorators-and-context-managers", "video": null, "description_md": "This talk is about decorators and context managers, what they are, how they\nreally work and how you can benefit from them.\n\nI already gave this talk at Pycon UK 2012, which I will integrate with new\nmaterial and better examples.\n\n"}
{"speakers": ["Erik Janssens"], "description": "The SQLAlchemy ORM presents a method of associating Python classes with database tables while avoiding boilerplate Python and SQL code.  But did you knew you can take it one step further and command the SQLAlchemy metaclasses to implement the data model patterns for your application.  \n\nFirst we will refresh our knowlede about Python metaclasses and then we will discuss the inner workings of the Declarative module and show how to use it to handle data model patterns.\n\nSome knowledge about databases and ORM in general is needed to enjoy this talk.", "language": "EN", "title": "Data model patterns with SQLAlchemy", "tags": ["database", "sqlalchemy", "metaprogramming", "orm", "sql"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/data-model-patterns-with-sqlalchemy", "video": null, "description_md": "The SQLAlchemy ORM presents a method of associating Python classes with\ndatabase tables while avoiding boilerplate Python and SQL code. But did you\nknew you can take it one step further and command the SQLAlchemy metaclasses\nto implement the data model patterns for your application.\n\nFirst we will refresh our knowlede about Python metaclasses and then we will\ndiscuss the inner workings of the Declarative module and show how to use it to\nhandle data model patterns.\n\nSome knowledge about databases and ORM in general is needed to enjoy this\ntalk.\n\n"}
{"speakers": ["Tom Viner"], "description": "", "language": "EN", "title": "DOJO", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/dojo", "video": null, "description_md": "\n\n"}
{"speakers": ["Simone Orsi"], "description": "Oggigiorno le piattaforme di video-sharing sono sicuramente un delle cose pi\u00fa interessanti nel web.\nYouTube ha cambiato il modo di fruire show televisivi, film, musica e il modo in cui condividiamo notizie, informazioni ed esperienze.\n\u00c9 sicuramente una cosa magnifica ma non \u00e9 nostra e non \u00e9 open.\n\nE se necessitassi della tua piattaforma di video-sharing? E se necessitassi di favorire e supportare la nascita di una community intorno ad essa?\nEsistono valide alternative nel mondo Python? Forse Mediacore?\nOttimo, ma se servissero funzionalit\u00e1 pi\u00fa avanzate di quelle fornite con la versione \u2018free\u2019, dovresti pagare la versione entreprise. No, questa non \u00e9 un opzione.\n\nIn questo talk vi mostrer\u00f3 una potente e completa piattaforma scritta in Python che far\u00e1 sicuramente quello che vi serve - e anche di pi\u00fa.\nScoprirete come possa essere facile costruire la propria piattaforma professionale di video sharing e come si possa facilmente costruire una community su di essa.", "language": "IT", "title": "Costruisci la tua piattaforma open-source di video-sharing in Python", "tags": ["youtube", "sharing", "video", "open-source", "community"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/costruisci-la-tua-piattaforma-open-source-di-video-sharing-in-python", "video": null, "description_md": "Oggigiorno le piattaforme di video-sharing sono sicuramente un delle cose pi\u00fa\ninteressanti nel web. YouTube ha cambiato il modo di fruire show televisivi,\nfilm, musica e il modo in cui condividiamo notizie, informazioni ed\nesperienze. \u00c9 sicuramente una cosa magnifica ma non \u00e9 nostra e non \u00e9 open.\n\nE se necessitassi della _tua_ piattaforma di video-sharing? E se necessitassi\ndi favorire e supportare la nascita di una community intorno ad essa? Esistono\nvalide alternative nel mondo Python? Forse Mediacore? Ottimo, ma se servissero\nfunzionalit\u00e1 pi\u00fa avanzate di quelle fornite con la versione \u2018free\u2019, dovresti\npagare la versione entreprise. No, questa non \u00e9 un opzione.\n\nIn questo talk vi mostrer\u00f3 una potente e completa piattaforma scritta in\nPython che far\u00e1 sicuramente quello che vi serve - e anche di pi\u00fa. Scoprirete\ncome possa essere facile costruire la propria piattaforma professionale di\nvideo sharing e come si possa facilmente costruire una community su di essa.\n\n"}
{"speakers": ["Roberto De Ioris"], "description": "Se pensate che il mondo vi sara\u2019 grato e che tutti vi vorranno bene se rilascerete software open source, beh scordatevelo. La via dello sviluppatore open source e\u2019 lunga e tortuosa, piena di insidie, notti insonni, liti furibonde ed enormi delusioni. Questo corso intensivo (ben 45 minuti in 4 parti) vi illustrera\u2019 i nemici che dovrete affrontare lungo il vostro viaggio e vi insegnera\u2019 i trucchi del mestiere per sopravvivere alle insidie di questo selvaggio mondo.", "language": "IT", "title": "Corso di sopravvivenza per sviluppatori OpenSource", "tags": ["humor"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/corso-di-sopravvivenza-per-sviluppatori-opensource", "video": null, "description_md": "Se pensate che il mondo vi sara\u2019 grato e che tutti vi vorranno bene se\nrilascerete software open source, beh scordatevelo. La via dello sviluppatore\nopen source e\u2019 lunga e tortuosa, piena di insidie, notti insonni, liti\nfuribonde ed enormi delusioni. Questo corso intensivo (ben 45 minuti in 4\nparti) vi illustrera\u2019 i nemici che dovrete affrontare lungo il vostro viaggio\ne vi insegnera\u2019 i trucchi del mestiere per sopravvivere alle insidie di questo\nselvaggio mondo.\n\n"}
{"speakers": ["Gemma Hentsch"], "description": "When you deploy web applications, you do so onto air-conditioned servers on UPS powered racks with reliable, redundant fat pipes connected to a world of web services and data. Infrastructure is for the most part thought of as reliable, its one of those things you usually get to assume. But, what happens when you deploy in a very different environment, one in which the connection to the outside world would make a 3g connection look fast and reliable, where your any of your servers might overheat, and where that already clogged internal network cable has a spade go through it mid message?\n\nIts not actually impossible, and you can do it all with python, and I hope to explain how, why and what else you might think of. The talk is going to be split down the middle, one half focusing on low level python networking, and the other about building your apps and daemons with fragility in mind. Most situations are not going to be as extreme as a construction site/event space in Beijing, but it doesn\u2019t hurt to build leaner and more rugged applications even when they are running in the cloud, because lightning can strike the same data centre twice.", "language": "EN", "title": "Coding for the Modern Warzone", "tags": ["udp", "networking", "flask", "tcp", "application-design", "architecture", "resilient"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/coding-for-the-modern-warzone", "video": null, "description_md": "When you deploy web applications, you do so onto air-conditioned servers on\nUPS powered racks with reliable, redundant fat pipes connected to a world of\nweb services and data. Infrastructure is for the most part thought of as\nreliable, its one of those things you usually get to assume. But, what happens\nwhen you deploy in a very different environment, one in which the connection\nto the outside world would make a 3g connection look fast and reliable, where\nyour any of your servers might overheat, and where that already clogged\ninternal network cable has a spade go through it mid message?\n\nIts not actually impossible, and you can do it all with python, and I hope to\nexplain how, why and what else you might think of. The talk is going to be\nsplit down the middle, one half focusing on low level python networking, and\nthe other about building your apps and daemons with fragility in mind. Most\nsituations are not going to be as extreme as a construction site/event space\nin Beijing, but it doesn\u2019t hurt to build leaner and more rugged applications\neven when they are running in the cloud, because lightning can strike the same\ndata centre twice.\n\n"}
{"speakers": ["Alessandro Amici"], "description": "Coding contests have been historically the playground of C++ and JAVA programmers, but with the advent of competitions like the Google Code Jam and the Facebook Hacker Cup many more languages, including Python, are making to the popularity charts with good results.\n\nIn the last couple of years the PyPy interpreter has given a serious boost to the competitiveness of Python thanks to its optimizing Just-In-Time compiler that makes tight loops and low-level memory management not just feasible but even close in efficiency to C++.\n\nCoding for extreme performance with PyPy feels quite different from usual Python coding, but several general lessons can be learned about speed and memory efficiency, that can be applied to real world scenarios, especially in numerical and scientific computing.\n\nIn the talk we are going to present a competition-ready PyPy set-up, the solutions to a few Google Code Jam problems and several techniques to effectively use \u201cPython for the win!\u201d", "language": "EN", "title": "Coding competitions with PyPy aka \"Python for the win!\"", "tags": ["numpy", "JIT", "networkx", "performance", "scientific-computing", "pypy"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/coding-competitions-with-pypy-python-for-the-win", "video": null, "description_md": "Coding contests have been historically the playground of C++ and JAVA\nprogrammers, but with the advent of competitions like the Google Code Jam and\nthe Facebook Hacker Cup many more languages, including Python, are making to\n[the popularity charts](http://www.go-hero.net/jam) with good results.\n\nIn the last couple of years the PyPy interpreter has given a serious boost to\nthe competitiveness of Python thanks to its optimizing Just-In-Time compiler\nthat makes tight loops and low-level memory management not just feasible but\neven close in efficiency to C++.\n\nCoding for extreme performance with PyPy feels quite different from usual\nPython coding, but several general lessons can be learned about speed and\nmemory efficiency, that can be applied to real world scenarios, especially in\nnumerical and scientific computing.\n\nIn the talk we are going to present a competition-ready PyPy set-up, the\nsolutions to a few Google Code Jam problems and several techniques to\neffectively use \u201cPython for the win!\u201d\n\n"}
{"speakers": ["Tarek Ziad\u00e9"], "description": "= introduction =\n\nBuilt with zmq, Circus (http://circus.io) is a process and socket manager we\u2019re writing at Mozilla Services.\n\nIt has many features like a web interface with a live stream of process/socket stats, a command line tool to drive the system. etc.\n\nThis talk will present the architecture of the tool, its uses cases at Mozilla, and what we\u2019re planning next.\n\n= agenda = \n\n\nmozilla use case\noverview of existing tools\nfeatures we wanted to have\ntechnical choices: psutil, zmq, socket.io, bottle, gevent\ncircusd, circusctl, circus-top\nconfig files\ndetailed architecture and the Chaussette WSGI app\nplugins\nbenchmarks\nwhat\u2019s next\n\n\nNB this talk was given at Pycon Ireland - slides : http://blog.ziade.org/slides/pyconireland2012/\n\nThe Europython version will be longer with more information and new things", "language": "EN", "title": "Circus, process and socket manager", "tags": ["sysadmin", "web", "service-orchestration", "servers"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/circus-process-and-socket-manager", "video": null, "description_md": "= introduction =\n\nBuilt with zmq, Circus (http://circus.io) is a process and socket manager\nwe\u2019re writing at Mozilla Services.\n\nIt has many features like a web interface with a live stream of process/socket\nstats, a command line tool to drive the system. etc.\n\nThis talk will present the architecture of the tool, its uses cases at\nMozilla, and what we\u2019re planning next.\n\n= agenda =\n\n  * mozilla use case\n  * overview of existing tools\n  * features we wanted to have\n  * technical choices: psutil, zmq, socket.io, bottle, gevent\n  * circusd, circusctl, circus-top\n  * config files\n  * detailed architecture and the Chaussette WSGI app\n  * plugins\n  * benchmarks\n  * what\u2019s next\n\nNB this talk was given at Pycon Ireland - slides :\nhttp://blog.ziade.org/slides/pyconireland2012/\n\nThe Europython version will be longer with more information and new things\n\n"}
{"speakers": ["Michal Petrucha"], "description": "", "language": "EN", "title": "Chem/Bio Informatics using Python", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/chembio-informatics-using-python", "video": null, "description_md": "\n\n"}
{"speakers": ["Andrew Mleczko"], "description": "When the earthquake hit Northern Italy last year the most reliable information source were the social networks. We wanted to squeeze all their potential to help spread the information. However, most popular social networks such as Twitter and Facebook have rate limits, multiple error messages for the same exception and other broken functionalities. Sometimes (often) they can drive you crazy. \nCelery can help you deal with it by providing a reliable and fast social features to your website. Most of celery\u2019s supporters points out its stability and performance. I will focus on intelligent distribution, covering topics like: task organization and policies, fail-overs and rate limitings.", "language": "EN", "title": "Celery and Social Networks. 5 Things I Have Learned During Earthquake Hackathon.", "tags": ["celery", "security", "open-source", "case-study", "social"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/celery-and-social-networks-5-things-i-have-learned-during-earthquake-hackathon", "video": null, "description_md": "When the earthquake hit Northern Italy last year the most reliable information\nsource were the social networks. We wanted to squeeze all their potential to\nhelp spread the information. However, most popular social networks such as\nTwitter and Facebook have rate limits, multiple error messages for the same\nexception and other broken functionalities. Sometimes (often) they can drive\nyou crazy. **Celery** can help you deal with it by providing a reliable and\nfast social features to your website. Most of celery\u2019s supporters points out\nits stability and performance. I will focus on intelligent distribution,\ncovering topics like: task organization and policies, fail-overs and rate\nlimitings.\n\n"}
{"speakers": ["Ezio Melotti"], "description": "Lavorare con encoding e Unicode pu\u00f2 sembrare complicato, ma ogni sviluppatore deve sapere come funzionano. Anche se lo standard Unicode \u00e8 in effetti abbastanza complesso, ci sono solo pochi concetti basilari che sono necessari per lavorare con Python e Unicode:\n\n\nla differenza tra stringhe Unicode e bytes;\nil modo in cui le encoding sono usate per rappresentare i caratteri;\nle differenze tra le varie encoding;\ncome capire gli errori relati a Unicode;\n\n\nL\u2019obiettivo di questo talk \u00e8 quello di esporre questi concetti. Durante il talk verranno anche affrontati temi come: raccomandazioni per usare Unicode, la situazione corrente di Unicode in Python 2 e Python 3 e le ultime novit\u00e0 riguardanti Unicode in Python 3 (es. PEP393 - Flexible string representation). Questo talk \u00e8 adatto sia per sviluppatori alle prime armi che non sono familiari con il mondo di Unicode e per sviluppatori esperti che vogliono capire cosa succede veramente dietro le quinte.", "language": "IT", "title": "Capire le codifiche e Unicode", "tags": ["pep393", "unicode", "python3", "encodings"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/capire-codifiche-unicode", "video": null, "description_md": "Lavorare con encoding e Unicode pu\u00f2 sembrare complicato, ma ogni sviluppatore\ndeve sapere come funzionano. Anche se lo standard Unicode \u00e8 in effetti\nabbastanza complesso, ci sono solo pochi concetti basilari che sono necessari\nper lavorare con Python e Unicode:\n\n  * la differenza tra stringhe Unicode e bytes;\n  * il modo in cui le encoding sono usate per rappresentare i caratteri;\n  * le differenze tra le varie encoding;\n  * come capire gli errori relati a Unicode;\n\nL\u2019obiettivo di questo talk \u00e8 quello di esporre questi concetti. Durante il\ntalk verranno anche affrontati temi come: raccomandazioni per usare Unicode,\nla situazione corrente di Unicode in Python 2 e Python 3 e le ultime novit\u00e0\nriguardanti Unicode in Python 3 (es. PEP393 - Flexible string representation).\nQuesto talk \u00e8 adatto sia per sviluppatori alle prime armi che non sono\nfamiliari con il mondo di Unicode e per sviluppatori esperti che vogliono\ncapire cosa succede veramente dietro le quinte.\n\n"}
{"speakers": ["Kai Lautaportti"], "description": "", "language": "EN", "title": "Introduction to Cassandra", "tags": [], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/introduction-cassandra", "video": null, "description_md": "\n\n"}
{"speakers": ["Patrick B\u00fcchler"], "description": "Background\nsoXes is an individual software development and consulting company based in Switzerland, Vietnam and Belarus.\n\nPython was already used in a number of smaller projects developed by soXes. However, it was not considered as being one of the main programming languages of the company. By beginning of 2012 the author of this talk could convince his business partner that Python would be a very valuable replacement of Java as one of the main programming languages to be used by the company.\n\nDuring the whole 2012 a big effort was made to start using Python as main programming language and to push as much projects as possible into this direction.\n\nNow, a the beginning of 2013, we can say that this move was successful. During this transition we learnt a lot about how to introduce new technologies, about specialties of Python, about the perception of Python in the public and last but not least about proper management of a software development company.\n\nThis Talk\nThe lessons we learned during our transition are, in the authors opinion, of public interest. The structure of the talk would be as follows:\n\n\nshort introduction of the company, its development process and answer to the question: \u201cWhy switching to a new programming language?\u201d\nWhy was Python the language of our choice? What advantages does Python have from the point of view of a small or medium-sized development company?\nHow did we implement the new language? What hurdles had to be taken? How was the reaction of our developers?\nHow was the reaction of our customers? What is the perception of Python in the business area where our customers work?\nWhat can be improved on Python from a business point of view? What should you consider when you introduce a new language like Python into a company?\nConclusion: Would we do it again? Answer: yes of course because\u2026", "language": "EN", "title": "Introducing Python as a main programming language in a company", "tags": ["best-practices", "teamwork", "software-engineering", "business", "ecommerce"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/introducing-python-as-a-main-programming-language-in-a-company", "video": null, "description_md": "**Background** soXes is an individual software development and consulting company based in Switzerland, Vietnam and Belarus.\n\nPython was already used in a number of smaller projects developed by soXes.\nHowever, it was not considered as being one of the main programming languages\nof the company. By beginning of 2012 the author of this talk could convince\nhis business partner that Python would be a very valuable replacement of Java\nas one of the main programming languages to be used by the company.\n\nDuring the whole 2012 a big effort was made to start using Python as main\nprogramming language and to push as much projects as possible into this\ndirection.\n\nNow, a the beginning of 2013, we can say that this move was successful. During\nthis transition we learnt a lot about how to introduce new technologies, about\nspecialties of Python, about the perception of Python in the public and last\nbut not least about proper management of a software development company.\n\n**This Talk** The lessons we learned during our transition are, in the authors opinion, of public interest. The structure of the talk would be as follows:\n\n  1. short introduction of the company, its development process and answer to the question: \u201cWhy switching to a new programming language?\u201d\n\n  2. Why was Python the language of our choice? What advantages does Python have from the point of view of a small or medium-sized development company?\n\n  3. How did we implement the new language? What hurdles had to be taken? How was the reaction of our developers?\n\n  4. How was the reaction of our customers? What is the perception of Python in the business area where our customers work?\n\n  5. What can be improved on Python from a business point of view? What should you consider when you introduce a new language like Python into a company?\n\n  6. Conclusion: Would we do it again? Answer: yes of course because\u2026\n\n"}
{"speakers": ["Lynn Root"], "description": "Django 1.5 introduced a configurable User model, fantastic! Now what? With the increased flexibility of user models, integrating Django into an existing infrastructure is now easier than ever.\n\nThis talk gives an introduction to the new configurable User model, and then walks through how to integrate Django applications to authenticate against already existing identity management systems like LDAP, Kerberos, etc.", "language": "EN", "title": "Introduce Django to your old friends", "tags": ["django", "kerberos", "integration", "ldap"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/introduce-django-to-your-old-friends", "video": null, "description_md": "Django 1.5 introduced a configurable User model, fantastic! Now what? With the\nincreased flexibility of user models, integrating Django into an existing\ninfrastructure is now easier than ever.\n\nThis talk gives an introduction to the new configurable User model, and then\nwalks through how to integrate Django applications to authenticate against\nalready existing identity management systems like LDAP, Kerberos, etc.\n\n"}
{"speakers": ["Daniel Greenfeld", "Audrey Roy"], "description": "Bring your laptops and join the authors of Two Scoops of Django for a hands-on Django workshop. We\u2019ll build a real, working site from the ground up, using Django 1.6 and Python 2.7/3.3. We\u2019ll cover as much as we can get through, including but not limited to Python and Django setup, project creation, app creation, models, the Django admin UI, views, migrations with South, user image uploads, new user registration, basic forms, and basic internationalization.", "language": "EN", "title": "Intro to Django", "tags": [], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/intro-django", "video": null, "description_md": "Bring your laptops and join the authors of Two Scoops of Django for a hands-on\nDjango workshop. We\u2019ll build a real, working site from the ground up, using\nDjango 1.6 and Python 2.7/3.3. We\u2019ll cover as much as we can get through,\nincluding but not limited to Python and Django setup, project creation, app\ncreation, models, the Django admin UI, views, migrations with South, user\nimage uploads, new user registration, basic forms, and basic\ninternationalization.\n\n"}
{"speakers": ["Marc-Andr\u00e9 Lemburg"], "description": "", "language": "EN", "title": "Interested in hosting EuroPython 2016/17?", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/interested-hosting-europython-201617", "video": null, "description_md": "\n\n"}
{"speakers": ["Paul Hildebrandt"], "description": "The Walt Disney Animation Studios has a long history of creating acclaimed animated films, and continues to be an industry leader with regard to artistic achievements, storytelling excellence, and cutting-edge innovations.\n\nJoin 17-year Disney veteran Paul Hildebrandt, Senior Software Engineer, as he offers insights into the Studio\u2019s filmmaking process with a particular focus on the technology underpinning.", "language": "EN", "title": "Inside the Hat: Technology @ Walt Disney Animation Studios", "tags": [], "datetime": "2013-07-01 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/under-hood-technology-walt-disney-animation-studios", "video": null, "description_md": "The Walt Disney Animation Studios has a long history of creating acclaimed\nanimated films, and continues to be an industry leader with regard to artistic\nachievements, storytelling excellence, and cutting-edge innovations.\n\nJoin 17-year Disney veteran Paul Hildebrandt, Senior Software Engineer, as he\noffers insights into the Studio\u2019s filmmaking process with a particular focus\non the technology underpinning.\n\n"}
{"speakers": ["Muharem Hrnjadovic"], "description": "Introduction to OpenStack and why it matters\n\nCloud computing presents a key paradigm shift for how systems are built,\ndeployed and operated.\n\nOpenStack:\n\n\nis leading the way to open cloud computing\nhas become the operating system for the cloud and won the race to become the standard\nis one of the most high-profile Python projects today and creating thousands of IT Jobs for open source developers\n\n\n\u201cNo one gets fired for choosing OpenStack\u201d :-) Even IBM makes a big bet on OpenStack and so should you!", "language": "EN", "title": "I see OpenStack in your future!", "tags": ["cloud"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/openstack-is-in-your-future", "video": null, "description_md": "## Introduction to OpenStack and why it matters\n\nCloud computing presents a key paradigm shift for how systems are built,\ndeployed and operated.\n\n**OpenStack**:\n\n  * is leading the way to open cloud computing\n  * has become the operating system for the cloud and won the race to become the standard\n  * is one of the most high-profile Python projects today and creating thousands of IT Jobs for open source developers\n\n\u201cNo one gets fired for choosing OpenStack\u201d :-) Even IBM makes a big bet on\nOpenStack and so should you!\n\n"}
{"speakers": ["Adam Hitchcock"], "description": "DISQUS is the largest* django app out there. But we aren\u2019t 100% Django.\n\nIn scaling our realtime architecture we have refined our ability to develop and launch services that are not in our main django app. This talk will be a deep dive into a few components and techniques that came out of the development of our realtime system.\n\nLessons we learned include:\n\n\nrunning a python service oriented architecture, and will show a lot of code (that you will be able to use!) to help you do the same.\nWhy I like queues more than RPC.\nIdempotency for fun and profit.\nSeparation of concerns makes deployments faster and smaller.\nDoing one thing well is better than doing two things kinda ok.\n\n\nTech I will talk about:\n\n\nkafka and rabbit, why do we have two queues in our system?\nzookeeper and how we use it to keep our services in sync.\nDISQUS can\u2019t get enough of nginx! how we are replacing core services with (superfast) nginx modules.\nrealtime data isn\u2019t just for our front end product anymore, how we use storm and s3 to get realtime stats on all of the data that DISQUS generates in a day.\nwe are somehow webscale without using node or mongodb.\n\n\n*From a sample of looking at only DISQUS.", "language": "EN", "title": "How DISQUS does \"it\" when \"it\" isn't Django", "tags": ["web", "realtime", "mongodb", "zookeeper", "scalability", "django", "celery", "optimization", "gevent", "concurrency", "performance"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/disquss-constantly-scaling-and-realtime-architecture", "video": null, "description_md": "DISQUS is the largest* django app out there. But we aren\u2019t 100% Django.\n\nIn scaling our realtime architecture we have refined our ability to develop\nand launch services that are not in our main django app. This talk will be a\ndeep dive into a few components and techniques that came out of the\ndevelopment of our realtime system.\n\nLessons we learned include:\n\n  * running a python service oriented architecture, and will show a lot of code (that you will be able to use!) to help you do the same.\n  * Why I like queues more than RPC.\n  * Idempotency for fun and profit.\n  * Separation of concerns makes deployments faster and smaller.\n  * Doing one thing well is better than doing two things kinda ok.\n\nTech I will talk about:\n\n  * kafka and rabbit, why do we have two queues in our system?\n  * zookeeper and how we use it to keep our services in sync.\n  * DISQUS can\u2019t get enough of nginx! how we are replacing core services with (superfast) nginx modules.\n  * realtime data isn\u2019t just for our front end product anymore, how we use storm and s3 to get realtime stats on all of the data that DISQUS generates in a day.\n  * we are somehow webscale without using node or mongodb.\n\n*From a sample of looking at only DISQUS.\n\n"}
{"speakers": ["Goran Peretin"], "description": "If you are interested in developing concurrent applications with Python, don\u2019t know the difference between concurrency and parallelism, never really understood what Greenlets are or just want to learn a couple of new buzzwords to impress your friends, you are in the right place. \n\nThis talk will give a brief overview of what concurrency is, how it is different from parallelism and in which cases you could benefit from writing concurrent programs. After that I will describe other methods of concurrency available in Python, with a focus on Greenlet-based concurrency and its inner workings. At the end, I will show an example program written in both sequential and concurrent way to show the difference in execution time.", "language": "EN", "title": "Greenlet-based concurrency", "tags": ["parallelization", "gevent", "optimization", "greenlet", "concurrency", "performance"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/greenlet-based-concurrency", "video": null, "description_md": "If you are interested in developing concurrent applications with Python, don\u2019t\nknow the difference between concurrency and parallelism, never really\nunderstood what Greenlets are or just want to learn a couple of new buzzwords\nto impress your friends, you are in the right place.\n\nThis talk will give a brief overview of what concurrency is, how it is\ndifferent from parallelism and in which cases you could benefit from writing\nconcurrent programs. After that I will describe other methods of concurrency\navailable in Python, with a focus on Greenlet-based concurrency and its inner\nworkings. At the end, I will show an example program written in both\nsequential and concurrent way to show the difference in execution time.\n\n"}
{"speakers": ["Craig Kerstiens"], "description": "With most frameworks the ORM attempts to treat all databases equally, this results in developers being limited in how many advantages they can take of their database. In particular Postgres has many features which developers would love to take advantage of but are not easily accessible via the Django ORM. This talk will cover:\n\n\nTour of the cool features in Postgres\nHighlight limitations within ORM\nUsing hStore within Django (a key/value datatype as a column, or known as NoSQL in your SQL DB)\nTaking advantage of Full Text Search\nArray Datatypes as a field and within your DB\nUsing SQL functions with the ORM", "language": "EN", "title": "Going beyond the Django ORM limitations with Postgres", "tags": ["database", "django"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/going-beyond-the-django-orm-limitations-with-postgres", "video": null, "description_md": "With most frameworks the ORM attempts to treat all databases equally, this\nresults in developers being limited in how many advantages they can take of\ntheir database. In particular Postgres has many features which developers\nwould love to take advantage of but are not easily accessible via the Django\nORM. This talk will cover:\n\n  * Tour of the cool features in Postgres\n  * Highlight limitations within ORM\n  * Using hStore within Django (a key/value datatype as a column, or known as NoSQL in your SQL DB)\n  * Taking advantage of Full Text Search\n  * Array Datatypes as a field and within your DB\n  * Using SQL functions with the ORM \n\n"}
{"speakers": ["John Britton"], "description": "Git is a version control system built on well known patterns in computer science.\n\nI will take you to the very bottom. The floor. The code. The algorithms. The directed acyclic graph of hashed bit sequences made efficient through LZW compression and deferred garbage collection determined by node reachability via hash relationships.\n\nWe want and need to know precisely how things work. Let\u2019s dig into the guts of Git.", "language": "EN", "title": "Git Internals - Graphs, Hashes, and Compression", "tags": [], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/git-internals-graphs-hashes-compression", "video": null, "description_md": "Git is a version control system built on well known patterns in computer\nscience.\n\nI will take you to the very bottom. The floor. The code. The algorithms. The\ndirected acyclic graph of hashed bit sequences made efficient through LZW\ncompression and deferred garbage collection determined by node reachability\nvia hash relationships.\n\nWe want and need to know precisely how things work. Let\u2019s dig into the guts of\nGit.\n\n"}
{"speakers": ["Nejc Zupan", "Domen Ko\u017ear"], "description": "It\u2019s a fact - Plone has a lot of complicated features. That doesn\u2019t mean Plone is hard for everything! This will be a simple tutorial that any Python developer can follow to get a simple TODO list application running inside of Plone. Would you want to deploy Plone for just a Todo list in real life? Probably not. You can however learn several simple, fast concepts that will get you most of the way there and you\u2019ll learn a lot about Plone in the process.\n\nThis tutorial will be a hands-on session, based on http://tutorialtodoapp.readthedocs.org/en/latest/.", "language": "EN", "title": "Getting started with Plone CMS development", "tags": ["scm", "web", "continuous-integration", "javascript", "buildout", "testing", "framework", "html", "zope", "best-practices", "CMS", "plone", "tutorial"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/getting-started-with-plone-cms-development", "video": null, "description_md": "It\u2019s a fact - Plone has a lot of complicated features. That doesn\u2019t mean Plone\nis hard for everything! This will be a simple tutorial that any Python\ndeveloper can follow to get a simple TODO list application running inside of\nPlone. Would you want to deploy Plone for just a Todo list in real life?\nProbably not. You can however learn several simple, fast concepts that will\nget you most of the way there and you\u2019ll learn a lot about Plone in the\nprocess.\n\nThis tutorial will be a hands-on session, based on\n<http://tutorialtodoapp.readthedocs.org/en/latest/>.\n\n"}
{"speakers": ["Lynn Root"], "description": "UPDATED: This talk was originally supposed to be given by Emily Karung.  In her place, Lynn Root gave a talk on PyLadies and a quick intro to Python with her tutorial, http://newcoder.io/dataviz.\n\n\n\nThis talk will show beginner developer ladies how to program using classes, how to use scripts and how to do some solid work in web programming for example python best practices like using virtual envs and pips, the difference between the different versions of python, how to create a basic program in python and a basic introduction to django as a gateway into the world of web development.\n\nMy major goal is female inclusion in the python developer world and to share my experience as a female developer.", "language": "EN", "title": "Getting more developer girls using python", "tags": ["women"], "datetime": "2013-07-01 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/getting-more-developer-girls-using-python", "video": null, "description_md": "UPDATED: This talk was originally supposed to be given by Emily Karung. In her\nplace, Lynn Root gave a talk on PyLadies and a quick intro to Python with her\ntutorial, http://newcoder.io/dataviz.\n\n* * *\n\nThis talk will show beginner developer ladies how to program using classes,\nhow to use scripts and how to do some solid work in web programming for\nexample python best practices like using virtual envs and pips, the difference\nbetween the different versions of python, how to create a basic program in\npython and a basic introduction to django as a gateway into the world of web\ndevelopment.\n\nMy major goal is female inclusion in the python developer world and to share\nmy experience as a female developer.\n\n"}
{"speakers": ["Muharem Hrnjadovic"], "description": "OpenStack is one of the most high profile python projects in existence\ntoday. It aims to bring an open and massively scalable cloud operating\nsystem to everybody and has been called the \u201clinux of the cloud\u201d.\n\nThis is your chance to catch up with the future of cloud computing!\n\nAgenda:\n\n\nOpenStack cloud overview\nnova API session (compute)\nswift API session (storage)\npython client bindings for the APIs above\ncloud architecture best practices\nexercises: e.g. write a python program that starts an instance running apache and loads a page from cloud storage.\n\n\nPrerequisites: basic python skills\nBenefits: learn cloud fundamentals and how to use OpenStack\n\nPlease note:\n\n\nthis session is endorsed by the OpenStack foundation\nall instructors will be well-qualified cloud practitioners nominated by Rackspace and/or the foundation\n\n\nReferences:\n\n\nhttp://www.openstack.org/\nhttp://www.rackspace.com/", "language": "EN", "title": "Get up to speed with OpenStack!", "tags": ["best-practices", "storage", "architecture", "cloud"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/learn-to-use-openstack", "video": null, "description_md": "OpenStack is one of the most high profile python projects in existence today.\nIt aims to bring an open and massively scalable cloud operating system to\neverybody and has been called the \u201clinux of the cloud\u201d.\n\nThis is your chance to catch up with the future of cloud computing!\n\n**Agenda**:\n\n  * OpenStack cloud overview\n  * nova API session (compute)\n  * swift API session (storage)\n  * python client bindings for the APIs above\n  * cloud architecture best practices\n  * exercises: e.g. write a python program that starts an instance running apache and loads a page from cloud storage.\n\n**Prerequisites**: basic python skills **Benefits**: learn cloud fundamentals and how to _use_ OpenStack\n\n**Please note**:\n\n  * this session is endorsed by the OpenStack foundation\n  * all instructors will be well-qualified cloud practitioners nominated by Rackspace and/or the foundation\n\n**References**:\n\n  * <http://www.openstack.org/>\n  * <http://www.rackspace.com/>\n\n"}
{"speakers": ["Radomir Dopieralski"], "description": "", "language": "EN", "title": "Game Development Tools", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/game-development-tools", "video": null, "description_md": "\n\n"}
{"speakers": ["Kay Schluehr"], "description": "Functional or black box testing of embedded devices at their communication endpoints hasn\u2019t caught much attention in the agile or open source communities, despite its prevalence in large parts of modern industries ranging from automotive to smartcards. When you have the opportunity to work in one of those industries you\u2019ll easily get sucked into a confusing realm where large fractions of the R&D staff writes thousands of little test scripts using proprietary programming languages or in-house frameworks and tools which will never see the daylight. Archaic, committee designed programming languages like TTCN-3 which cannot deny their heritage from the Pascal era occasionally bubble up. Academic papers and PhD theses which cover functional testing are moving straight into model checking with UML and propose system architectures which can easily compete with Java Enterprise solutions. In short, it is a total mess and therefore very stimulating. Unlike the web programming Favela chic it has an old industry, Gothic high tech flavor of slowly disintegrating sites of the digital age. \n\nIn my talk I\u2019ll approach functional testing (FT) from a Python angle using little more than a data structure that allows for data binding and continuous updates, a close relative of the venerable amb operator which goes back to Lisp inventor John McCarthy and a few Python decorators. I\u2019ll show how to put them together to control variation of data consistently. I do not suggest to throw out test scripts, on the contrary, just write them with techniques better suited for covering large numbers of test cases. In the last part of my talk I\u2019ll briefly introduce T3, a domain specific functional programming language, which I designed for FT. While T3 has been strongly influenced by Python and my explorative Python programming experiments it allows me to take a more radical stance and an independent synthesis. There will be hopefully some cross-fertilization between T3 and Python in the future.", "language": "EN", "title": "Functional testing with Python", "tags": ["testing", "automation"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/functional-testing-and-model-checking-with-python", "video": null, "description_md": "Functional or black box testing of embedded devices at their communication\nendpoints hasn\u2019t caught much attention in the agile or open source\ncommunities, despite its prevalence in large parts of modern industries\nranging from automotive to smartcards. When you have the opportunity to work\nin one of those industries you\u2019ll easily get sucked into a confusing realm\nwhere large fractions of the R&amp;D staff writes thousands of little test\nscripts using proprietary programming languages or in-house frameworks and\ntools which will never see the daylight. Archaic, committee designed\nprogramming languages like TTCN-3 which cannot deny their heritage from the\nPascal era occasionally bubble up. Academic papers and PhD theses which cover\nfunctional testing are moving straight into model checking with UML and\npropose system architectures which can easily compete with Java Enterprise\nsolutions. In short, it is a total mess and therefore very stimulating. Unlike\nthe web programming Favela chic it has an old industry, Gothic high tech\nflavor of slowly disintegrating sites of the digital age.\n\nIn my talk I\u2019ll approach functional testing (FT) from a Python angle using\nlittle more than a data structure that allows for data binding and continuous\nupdates, a close relative of the venerable amb operator which goes back to\nLisp inventor John McCarthy and a few Python decorators. I\u2019ll show how to put\nthem together to control variation of data consistently. I do not suggest to\nthrow out test scripts, on the contrary, just write them with techniques\nbetter suited for covering large numbers of test cases. In the last part of my\ntalk I\u2019ll briefly introduce T3, a domain specific functional programming\nlanguage, which I designed for FT. While T3 has been strongly influenced by\nPython and my explorative Python programming experiments it allows me to take\na more radical stance and an independent synthesis. There will be hopefully\nsome cross-fertilization between T3 and Python in the future.\n\n"}
{"speakers": ["Semen Trygubenko"], "description": "Reaping the benefits of functional programming can be a real challenge, falling anywhere between exciting and frustrating, to the point that one might end up feeling demotivated and embarrassed about writing in the functional style in the \u201creal world\u201d. I have always strived to write functional side-effect free code for production, and last year I have been taking functional programming for myself one step further by re-writing some of my Python tools in Haskell, and I would like to share my findings. In this tutorial we will work through a progression of increasing in complexity fun-to-solve problems, obtain solutions both in Python and Haskell, in order to be able to first hand compare and contrast readability, performance and development time. Bring a laptop and a couple of interpreters (ipython and ghci) and lets do some hacking!\n\nThis training was first given at EuroPython 2012. Version of this year, should the proposal be successful, will be expanded to include new material and clarifications and improvements based on the feedback from past attendees.", "language": "EN", "title": "Functional programming in Python and even Haskell", "tags": ["Algorithms", "FunctionalProgramming"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/functional-functional-programming-in-python-and-even-haskell-1", "video": null, "description_md": "Reaping the benefits of functional programming can be a real challenge,\nfalling anywhere between exciting and frustrating, to the point that one might\nend up feeling demotivated and embarrassed about writing in the functional\nstyle in the \u201creal world\u201d. I have always strived to write functional side-\neffect free code for production, and last year I have been taking functional\nprogramming for myself one step further by re-writing some of my Python tools\nin Haskell, and I would like to share my findings. In this tutorial we will\nwork through a progression of increasing in complexity fun-to-solve problems,\nobtain solutions both in Python and Haskell, in order to be able to first hand\ncompare and contrast readability, performance and development time. Bring a\nlaptop and a couple of interpreters (ipython and ghci) and lets do some\nhacking!\n\nThis training was first given at EuroPython 2012. Version of this year, should\nthe proposal be successful, will be expanded to include new material and\nclarifications and improvements based on the feedback from past attendees.\n\n"}
{"speakers": ["Motiejus Jak\u0161tys"], "description": "Presenting data and interface definition language which can be accessed using json, xml and google protocol buffers.\n\nPresented: motivation, examples and example API from Python. Discussion for Python API followed. Project name: piqi.", "language": "EN", "title": "Formal schemas for textual markup", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/formal-schemas-textual-markup", "video": null, "description_md": "Presenting data and interface definition language which can be accessed using\njson, xml and google protocol buffers.\n\nPresented: motivation, examples and example API from Python. Discussion for\nPython API followed. Project name: piqi.\n\n"}
{"speakers": ["Alessio Siniscalchi"], "description": "In questo talk si presentano strategie di gestione e processamento di dati GPS in near real-time prendendo spunto da un caso pratico. \nL\u2019utilizzo di Python in una catena di processamento ha consentito di coordinare il flusso di lavoro ed uniformare un alto numero di dati in formati eterogenei e provenienti da canali instabili, attraverso un\u2019interazione adattativa con diversi software esterni.\nIl caso pratico che si analizza riguarda il trattamento di grandi quantit\u00e0 di dati GPS (formato RINEX) relativi al monitoraggio di piattaforme di estrazione in mare aperto. Per la loro stessa natura, quindi, i dati devono essere trattati in alta affidabilit\u00e0 e le informazioni estrapolate dal processamento devono essere prodotte con il minimo ritardo possibile.", "language": "IT", "title": "Flussi di dati GPS in near real-time", "tags": ["quality-assurance", "realtime", "sensor networks", "automation"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/gestione-di-flussi-di-dati-gps-in-near-real-time", "video": null, "description_md": "In questo talk si presentano strategie di gestione e processamento di dati GPS\nin near real-time prendendo spunto da un caso pratico. L\u2019utilizzo di Python in\nuna catena di processamento ha consentito di coordinare il flusso di lavoro ed\nuniformare un alto numero di dati in formati eterogenei e provenienti da\ncanali instabili, attraverso un\u2019interazione adattativa con diversi software\nesterni. Il caso pratico che si analizza riguarda il trattamento di grandi\nquantit\u00e0 di dati GPS (formato RINEX) relativi al monitoraggio di piattaforme\ndi estrazione in mare aperto. Per la loro stessa natura, quindi, i dati devono\nessere trattati in alta affidabilit\u00e0 e le informazioni estrapolate dal\nprocessamento devono essere prodotte con il minimo ritardo possibile.\n\n"}
{"speakers": ["Alex Morega"], "description": "I will help you design/fix/improve your Flask-based application.", "language": "EN", "title": "Flask", "tags": ["web", "HTTP", "refactoring", "flask", "tdd", "framework", "html", "design", "software-engineering", "best-practices", "application-design", "architecture"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/flask", "video": null, "description_md": "I will help you design/fix/improve your Flask-based application.\n\n"}
{"speakers": ["Mike M\u00fcller"], "description": "Objective\n\nThis tutorial provides an overview of techniques to improve the performance of Python programs. The focus is on concepts such as profiling, diffrence of data structures and algorithms as well as a selection of tools an libraries that help to speed up Python.\n\nIntended Audience\n\nPython programmers who would like concepts to improve performance.\n\nAudience Level\n\nProgrammers with good Python knowledge.\n\nPrerequisites\n\nPlease bring your laptop with the operating system of your choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7, we need:\n\n\nRunSnakeRun\nGuppy_PE framework (<= Python 2.6)\nlineprofiler\npympler\nmem_profiler\npsyco (Python 2.6 only, version 1.5.2 or higher)\npypy\nNumPy (version 1.2 or higher).\n\n\nMethod\n\nThis is a hands-on course. Students are strongly encouraged to work along with the trainer at the interactive prompt. There will be exercises the students need to do on their own. Experience shows that this active involvement is essential for an effective learning.\n\nOutline\n\n\nHow fast is fast enough?\nOptimization guidelines\n\nPremature optimization\nOptimization rules\nSeven steps for incremental optimization\n\nOptimization strategy\n\nMeasuring in stones\nProfiling CPU usage\nProfiling memory usage\n\nAlgorithms and Anti-patterns\n\nString concatenation\nList and generator comprehensions\nThe right data structure\n\nCaching\nThe example\nTesting speed\nPure Python\nMeet Psyco, the JIT\nUsing PyPy\nNumPy for numeric arrays\nUsing multiple CPUs with multiprocessing\nCombination of optimization strategies\nResults of different example implementations\n\n\nI taught this tutorial multiple times and will update the content\nas I regularly do.", "language": "EN", "title": "Faster Python Programs through Optimization", "tags": [], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/faster-python-programs-through-optimizations", "video": null, "description_md": "## Objective\n\nThis tutorial provides an overview of techniques to improve the performance of\nPython programs. The focus is on concepts such as profiling, diffrence of data\nstructures and algorithms as well as a selection of tools an libraries that\nhelp to speed up Python.\n\n## Intended Audience\n\nPython programmers who would like concepts to improve performance.\n\n## Audience Level\n\nProgrammers with good Python knowledge.\n\n## Prerequisites\n\nPlease bring your laptop with the operating system of your choice (Linux, Mac\nOS X, Windows). In addition to Python 2.6 or 2.7, we need:\n\n  * [RunSnakeRun](http://www.vrplumber.com/programming/runsnakerun)\n  * [Guppy_PE framework](http://guppy-pe.sourceforge.net) (&lt;= Python 2.6)\n  * [lineprofiler](http://packages.python.org/line_profiler/)\n  * [pympler](http://code.google.com/p/pympler/)\n  * [mem_profiler](https://pypi.python.org/pypi/memory_profiler)\n  * [psyco](http://psyco.sourceforge.net) (Python 2.6 only, version 1.5.2 or higher)\n  * [pypy](http://pypy.org)\n  * [NumPy](http://numpy.scipy.org) (version 1.2 or higher).\n\n## Method\n\nThis is a hands-on course. Students are strongly encouraged to work along with\nthe trainer at the interactive prompt. There will be exercises the students\nneed to do on their own. Experience shows that this active involvement is\nessential for an effective learning.\n\n## Outline\n\n  * How fast is fast enough?\n  * Optimization guidelines \n    * Premature optimization\n    * Optimization rules\n    * Seven steps for incremental optimization\n  * Optimization strategy \n    * Measuring in stones\n    * Profiling CPU usage\n    * Profiling memory usage\n  * Algorithms and Anti-patterns \n    * String concatenation\n    * List and generator comprehensions\n    * The right data structure\n  * Caching\n  * The example\n  * Testing speed\n  * Pure Python\n  * Meet Psyco, the JIT\n  * Using PyPy\n  * NumPy for numeric arrays\n  * Using multiple CPUs with multiprocessing\n  * Combination of optimization strategies\n  * Results of different example implementations\n\nI taught this tutorial multiple times and will update the content as I\nregularly do.\n\n"}
{"speakers": ["Alessandro Molina"], "description": "Web development is more and more moving to rich JavaScript and mobile applications, building a fast and reliable API server has become a core foundation in such situations. \n\nThe new 2.3 version of TurboGears2 is aiming at providing a great toolkit on both Python3 and Python2 for such cases thanks to builtin support for: \n\n\nNew minimal mode for small single file applications.\nGevent based deploy on Mozilla Circus using the new GearBox toolkit \nThe TGJSonAutodoc sphinx extension for automatically documenting JSON based API \nOut of the box support for MongoDB using the Ming ODM \nThe DebugBar profiler and query analyzer for MongoDB \n\n\nThose tools can make really easy to quickly prototype a fully working and documented web service, greatly improving a developer life and quality of the services. Even deployment can become a single line command thanks to the GearBox toolkit integration with Mozilla Circus while the jsoncall sphinx extension can really speed up service documentation thanks to its tgjsonautodoc directive.", "language": "EN", "title": "Fast, documented and reliable JSON based webservices with Python", "tags": ["web", "turbogears", "mongodb", "json", "api", "gevent"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/building-reliable-and-fast-json-api-services-with-python", "video": null, "description_md": "Web development is more and more moving to rich JavaScript and mobile\napplications, building a fast and reliable API server has become a core\nfoundation in such situations.\n\nThe new 2.3 version of TurboGears2 is aiming at providing a great toolkit on\nboth Python3 and Python2 for such cases thanks to builtin support for:\n\n  * New minimal mode for small single file applications.\n  * Gevent based deploy on Mozilla Circus using the new GearBox toolkit \n  * The TGJSonAutodoc sphinx extension for automatically documenting JSON based API \n  * Out of the box support for MongoDB using the Ming ODM \n  * The DebugBar profiler and query analyzer for MongoDB \n\nThose tools can make really easy to quickly prototype a fully working and\ndocumented web service, greatly improving a developer life and quality of the\nservices. Even deployment can become a single line command thanks to the\nGearBox toolkit integration with Mozilla Circus while the jsoncall sphinx\nextension can really speed up service documentation thanks to its\ntgjsonautodoc directive.\n\n"}
{"speakers": ["Simone Dalla"], "description": "Sei un programmatore web (+1), usi Python (+1), usi Django (+1). Fin qui molto bene.\n\nMa sei pigro ed annoiato dal deploy della tua applicazione web. Ogni volta devi scaricare l\u2019ultima versione del codice dal VCS, riavviare Apache, aggiornare all\u2019ultima versione di PsycoPg2 sul virtualenv da PyPi, fare il backup del database, riavviare tutti i tuoi task asincroni, queue, job Celery. E ripetere tutto sui 5 server web che usi!\n\nDa ora in poi, puoi fare tutti questi passi con un singolo comando.\n\n\u201cMi stai prendendo per il\u2026 ?\u201d (so che lo stai pensando\u2026)\n\nNo, affatto. Mi chiamo Fabric, e ti far\u00f2 risparmiare tempo e denaro; sarai molto meno annoiato, e da ora in poi sar\u00f2 il tuo nuovo migliore amico.", "language": "IT", "title": "Fabric, miglior amico dei programmatori web pigri e annoiati", "tags": ["web", "fabric", "integration", "scalability", "django", "sysadmin", "architecture", "tutorial"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/fabric-miglior-amico-programmatori-web-pigri-annoiati", "video": null, "description_md": "Sei un programmatore web (+1), usi Python (+1), usi Django (+1). Fin qui molto\nbene.\n\nMa sei pigro ed annoiato dal deploy della tua applicazione web. Ogni volta\ndevi scaricare l\u2019ultima versione del codice dal VCS, riavviare Apache,\naggiornare all\u2019ultima versione di PsycoPg2 sul virtualenv da PyPi, fare il\nbackup del database, riavviare tutti i tuoi task asincroni, queue, job Celery.\nE ripetere tutto sui 5 server web che usi!\n\nDa ora in poi, puoi fare tutti questi passi con un singolo comando.\n\n\u201cMi stai prendendo per il\u2026 ?\u201d (so che lo stai pensando\u2026)\n\nNo, affatto. Mi chiamo Fabric, e ti far\u00f2 risparmiare tempo e denaro; sarai\nmolto meno annoiato, e da ora in poi sar\u00f2 il tuo nuovo migliore amico.\n\n"}
{"speakers": ["Christophe Pettus"], "description": "Most developers just use standard SQL when interacting with PostgreSQL from Python, but that misses some of the tremendous power of Postgres. We\u2019ll talk about how to extend PostgreSQL\u2019s features into Python (custom types and other advanced features), as well as how and when to embed your Python directly into PostgreSQL for maximum performance.\n\nSome experience with PostgreSQL is helpful, but not required.", "language": "EN", "title": "Extending Python into PostgreSQL", "tags": ["performance", "postgresql", "databases"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/extending-python-into-postgresql", "video": null, "description_md": "Most developers just use standard SQL when interacting with PostgreSQL from\nPython, but that misses some of the tremendous power of Postgres. We\u2019ll talk\nabout how to extend PostgreSQL\u2019s features into Python (custom types and other\nadvanced features), as well as how and when to embed your Python directly into\nPostgreSQL for maximum performance.\n\nSome experience with PostgreSQL is helpful, but not required.\n\n"}
{"speakers": ["P\u00e9ter Szab\u00f3"], "description": "", "language": "EN", "title": "EuroPython 2013 Google Jam Quiz Solutions", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/europython-2013-google-jam-quiz-solutions", "video": null, "description_md": "\n\n"}
{"speakers": ["Thomas Waldmann"], "description": "", "language": "EN", "title": "PGP / GPG Keysigning", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/pgp-gpg-keysigning", "video": null, "description_md": "\n\n"}
{"speakers": ["Benoit Bryon"], "description": "This lightning-talk presents main motivations and recommendations of PEP-423: \u201cnaming conventions and recipes related to packaging\u201d.\n\nThe PEP proposal, originally submitted in 2012, has been updated during EuroPython 2013.", "language": "EN", "title": "PEP 423: issues, best practices, tools about names", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/pep-423-issues-best-practices-tools-about-names", "video": null, "description_md": "This lightning-talk presents main motivations and recommendations of PEP-423:\n\u201cnaming conventions and recipes related to packaging\u201d.\n\nThe PEP proposal, originally submitted in 2012, has been updated during\nEuroPython 2013.\n\n"}
{"speakers": ["Holger Krekel"], "description": "", "language": "EN", "title": "P2P/NSA Idea Gathering", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/p2pnsa-idea-gathering", "video": null, "description_md": "\n\n"}
{"speakers": ["Holger Krekel"], "description": "", "language": "EN", "title": "P2P Open Trying Things", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/p2p-open-trying-things", "video": null, "description_md": "\n\n"}
{"speakers": ["Flavio Percoco"], "description": "OpenStack is an IaaS provider software written in Python. As such, it provides a massive scalable operating system and services like: Image, Storage, Object, Compute, etc.\n\nThis talks aims to give the audience an overview about OpenStack, its capabilities, its modules, coding styles, workflow and organization. \n\nAs a successful community driven development case, it\u2019s definitely a good reference for anyone willing to take that road or maybe joining existing projects.", "language": "EN", "title": "OpenStack: A python based IaaS provider", "tags": ["scm", "community", "gerrit", "cloud"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/openstack-a-python-based-iaas-provider", "video": null, "description_md": "OpenStack is an IaaS provider software written in Python. As such, it provides\na massive scalable operating system and services like: Image, Storage, Object,\nCompute, etc.\n\nThis talks aims to give the audience an overview about OpenStack, its\ncapabilities, its modules, coding styles, workflow and organization.\n\nAs a successful community driven development case, it\u2019s definitely a good\nreference for anyone willing to take that road or maybe joining existing\nprojects.\n\n"}
{"speakers": ["Cody Somerville"], "description": "Cloud computing is revolutionizing the industry by providing us with the ability to rapidly and dynamically provision infrastructure that has been abstracted behind APIs. Services such as Heat leverage these APIs to provide powerful orchestration capabilities to do the same for complex composite applications. \n\nWhat\u2019s an example of a really complex application? A cloud! Unfortunately, traditional cloud deployments use a separate set of tools to deploy and upgrade the control layer which means having two distinct provisioning systems. That\u2019s not optimal, so why not use cloud to deploy cloud?\n\nIn a talk that might sound like a new Christopher Nolan movie staring Leonardo DiCaprio, we\u2019ll look at how OpenStack\u2019s Heat and Nova \u201cbaremetal\u201d compute driver makes it possible to build a cloud where the control layer is itself deployed and upgraded via the same cloud API. We call this TripleO - OpenStack On OpenStack.", "language": "EN", "title": "OpenStack on OpenStack: Deploying OpenStack using OpenStack", "tags": [], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/openstack-openstack-deploying-openstack-using-openstack", "video": null, "description_md": "Cloud computing is revolutionizing the industry by providing us with the\nability to rapidly and dynamically provision infrastructure that has been\nabstracted behind APIs. Services such as Heat leverage these APIs to provide\npowerful orchestration capabilities to do the same for complex composite\napplications.\n\nWhat\u2019s an example of a really complex application? A cloud! Unfortunately,\ntraditional cloud deployments use a separate set of tools to deploy and\nupgrade the control layer which means having two distinct provisioning\nsystems. That\u2019s not optimal, so why not use cloud to deploy cloud?\n\nIn a talk that might sound like a new Christopher Nolan movie staring Leonardo\nDiCaprio, we\u2019ll look at how OpenStack\u2019s Heat and Nova \u201cbaremetal\u201d compute\ndriver makes it possible to build a cloud where the control layer is itself\ndeployed and upgraded via the same cloud API. We call this TripleO - OpenStack\nOn OpenStack.\n\n"}
{"speakers": ["Cody Somerville", "Joe Gordon"], "description": "", "language": "EN", "title": "OpenStack HelpDesk by HP", "tags": [], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/openstack-hp", "video": null, "description_md": "\n\n"}
{"speakers": ["Davide Corio"], "description": "Implementare soluzioni ERP e software gestionali in un paese come il nostro, dove la legislazione e le complicanze normative aggiungono un livello di difficolt\u00e0 non indifferente pu\u00f2 essere decisamente dispendioso.\n\nAvere quindi alle spalle delle soluzioni che forniscono un SDK snello e ottime opportunit\u00e0 di integrarsi con software e servizi di terze parti fa la differenza.\n\nVediamo quindi quali sono le API e gli strumenti ideali per integrare OpenERP con servizi della PA piuttosto che altri software legacy o no con i quali generalmente ci si scontra in Italia.", "language": "IT", "title": "OpenERP nel paese delle meraviglie", "tags": ["openerp", "integration", "webservices"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/openerp-nel-paese-delle-meraviglie", "video": null, "description_md": "Implementare soluzioni ERP e software gestionali in un paese come il nostro,\ndove la legislazione e le complicanze normative aggiungono un livello di\ndifficolt\u00e0 non indifferente pu\u00f2 essere decisamente dispendioso.\n\nAvere quindi alle spalle delle soluzioni che forniscono un SDK snello e ottime\nopportunit\u00e0 di integrarsi con software e servizi di terze parti fa la\ndifferenza.\n\nVediamo quindi quali sono le API e gli strumenti ideali per integrare OpenERP\ncon servizi della PA piuttosto che altri software legacy o no con i quali\ngeneralmente ci si scontra in Italia.\n\n"}
{"speakers": ["David Cramer"], "description": "It\u2019s becoming more and more common that companies are driving open source initiatives, but it\u2019s still far from a standard.\n\nThis talk will focus on the arguments one might make for (or against) open source in a company or even as a company. It will be driven from the takeaways of pushing open source as a fundamental culture at Disqus as well as the lessons learned from establishing a real business from an open source project.\n\nSpecifically, I\u2019ll cover:\n\n\nWhy open source is important for companies like Disqus\nThe takeaways of choosing to drive and use open source products\nHow a simple project like Sentry was born\nWhy Sentry remains open source (even as a for-profit business)", "language": "EN", "title": "Open Source as a Business", "tags": ["oss"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/open-source-as-a-business", "video": null, "description_md": "It\u2019s becoming more and more common that companies are driving open source\ninitiatives, but it\u2019s still far from a standard.\n\nThis talk will focus on the arguments one might make for (or against) open\nsource in a company or even as a company. It will be driven from the takeaways\nof pushing open source as a fundamental culture at Disqus as well as the\nlessons learned from establishing a real business from an open source project.\n\nSpecifically, I\u2019ll cover:\n\n  * Why open source is important for companies like Disqus\n  * The takeaways of choosing to drive and use open source products\n  * How a simple project like Sentry was born\n  * Why Sentry remains open source (even as a for-profit business)\n\n"}
{"speakers": ["Harry Percival"], "description": "Lo stesso talk del\u2019 anno scorso, pero COMPLETAMENTE DIVERSO!\nSeguiremo il tutorial officiale di Django, ma con la metodologia TDD - primo, i test!\nInclusi i test dello stesso browser con Selenium\nAnche \u201cunit test\u201d dei model, views e forms di Django\nDiscussioni della filosofia TDD: cosa testare, cosa non testare, come testare\u2026\nl\u2019Italiano del speaker sempre non e garantito perfetto\n\n\nhttp://www.tdd-django-tutorial.com/\n\n\u201cTest-Driven Django with Selenium\u201d\n\no - \u201cLa capra di Test incontra il pony di Django\u201d\n\nQuesto training sar\u00e0 particolarmente per in principianti, o uno che vuol\u2019 imparare un po di:\n\n\nDjango\nSelenium\nTDD (\"Test-Driven-Development\")\n\n\nL\u2019idea e di seguire il tutorial officiale di Django, dunque sar\u00e0 dal punto di visto dal principiante, pero a ogni punto useremo la metodologia \u201cTDD\u201d - costruendo dei test prima dal coding del sito.\n\nNon s\u2019agisce solo di \u201cunit test\u201d.  Si comincia con i \u201cfunctional\u201d test, usando Selenium, che permette da usare un vero browser per testare le funzione del sito, dal punto di vista del utilizzatore.\n\nCuest\u2019 anno ho tutto cambiato, perch\u00e9 sono scrivendo in libro per la O\u2019Reilly, un processo che mi ha fatto capire che la vecchia versione del tutorial era completamente sbagliata.  Adesso il percorso e molto piu logico, e le tecniche sono piu facile da capire.  Abbiamo anche qual-c\u2019uni temi nuovi\u2026", "language": "IT", "title": "Obidire alla capra! TDD con Python i Selenium", "tags": ["django", "testing", "selenium", "tdd"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/obidire-alla-capra-tdd-con-python-i-selenium-1", "video": null, "description_md": "  * Lo stesso talk del\u2019 anno scorso, pero COMPLETAMENTE DIVERSO!\n  * Seguiremo il tutorial officiale di Django, ma con la metodologia TDD - primo, i test!\n  * Inclusi i test dello stesso browser con Selenium\n  * Anche \u201cunit test\u201d dei model, views e forms di Django\n  * Discussioni della filosofia TDD: cosa testare, cosa non testare, come testare\u2026\n  * l\u2019Italiano del speaker sempre non e garantito perfetto\n\n<http://www.tdd-django-tutorial.com/>\n\n\u201cTest-Driven Django with Selenium\u201d\n\no - \u201cLa capra di Test incontra il pony di Django\u201d\n\nQuesto training sar\u00e0 particolarmente per in principianti, o uno che vuol\u2019\nimparare un po di:\n\n  * Django\n  * Selenium\n  * TDD (\"Test-Driven-Development\")\n\nL\u2019idea e di seguire il tutorial officiale di Django, dunque sar\u00e0 dal punto di\nvisto dal principiante, pero a ogni punto useremo la metodologia \u201cTDD\u201d -\ncostruendo dei test prima dal coding del sito.\n\nNon s\u2019agisce solo di \u201cunit test\u201d. Si comincia con i \u201cfunctional\u201d test, usando\nSelenium, che permette da usare un vero browser per testare le funzione del\nsito, dal punto di vista del utilizzatore.\n\nCuest\u2019 anno ho tutto cambiato, perch\u00e9 sono scrivendo in libro per la O\u2019Reilly,\nun processo che mi ha fatto capire che la vecchia versione del tutorial era\ncompletamente sbagliata. Adesso il percorso e molto piu logico, e le tecniche\nsono piu facile da capire. Abbiamo anche qual-c\u2019uni temi nuovi\u2026\n\n"}
{"speakers": ["Harry Percival"], "description": "tl;dr:\n - Covers the same material as the official Django tutorial, but with full TDD.\n - Browser-based testing with Selenium + in-depth unit-testing;\n - TDD Discussions: what to test, what not to test;\n - Aimed at beginners (new to Django, TDD or Selenium)\n\nIt\u2019ll be similar to my talk from last year, but COMPLETELY REWRITTEN thanks to insights derived from writing my book.  There will be loads of NEW STUFF like Django 1.5, and the whole flow of the talk now MAKES LOADS MORE SENSE.\n\nCome prepared! you\u2019ll need Git, Firefox, Python2.7, Django1.4/1.5 and Selenium installed\n\nhttp://www.tdd-django-tutorial.com/\n\nThe idea is to run through the steps covered by the official Django tutorial, covering the essentials of Django from a beginner\u2019s point of view. However, at each stage, instead of \u201cjust\u201d writing the Django code required to build our site, we first write tests.\n\nAnd we don\u2019t just write unit tests! We start by writing \u201cfunctional\u201d or \u201cacceptance\u201d tests, using Selenium - which means driving a real browser, and checking the actual behaviour of the site as it is rendered from the user\u2019s point of view \u2013 which might include JavaScript!\n\n[update] \u2013 the best way of keeping up with what happened in this talk is to take a look at my book about TDD and web development, available freely (and paid-for if you like) at my website.", "language": "EN", "title": "Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium", "tags": ["django", "testing", "selenium", "tdd"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/obey-the-testing-goat-rigorous-tdd-for-web-development-with-django-and-selenium", "video": null, "description_md": "**tl;dr:** \\- Covers the same material as the official Django tutorial, but with full TDD. \\- Browser-based testing with Selenium + in-depth unit-testing; \\- TDD Discussions: what to test, what not to test; \\- Aimed at beginners (new to Django, TDD or Selenium)\n\nIt\u2019ll be similar to my talk from last year, but COMPLETELY REWRITTEN thanks to\ninsights derived from writing my book. There will be loads of NEW STUFF like\nDjango 1.5, and the whole flow of the talk now MAKES LOADS MORE SENSE.\n\nCome prepared! you\u2019ll need **Git**, **Firefox**, **Python2.7**,\n**Django1.4/1.5** and **Selenium** installed\n\n[http://www.tdd-django-tutorial.com/](http://www.tdd-django-tutorial.com/%0A)\n\nThe idea is to run through the steps covered by the official Django tutorial,\ncovering the essentials of Django from a beginner\u2019s point of view. However, at\neach stage, instead of \u201cjust\u201d writing the Django code required to build our\nsite, we first write tests.\n\nAnd we don\u2019t just write unit tests! We start by writing \u201cfunctional\u201d or\n\u201cacceptance\u201d tests, using Selenium - which means driving a real browser, and\nchecking the actual behaviour of the site as it is rendered from the user\u2019s\npoint of view \u2013 which might include JavaScript!\n\n[update] \u2013 the best way of keeping up with what happened in this talk is to\ntake a look at my [book about TDD and web\ndevelopment](http://www.obeythetestinggoat.com), available freely (and paid-\nfor if you like) at my website.\n\n"}
{"speakers": ["Domen Ko\u017ear"], "description": "", "language": "EN", "title": "Nixos Operating System: Declarative Configuration Distribution", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/nixos-operating-system-declarative-configuration-distribution", "video": null, "description_md": "\n\n"}
{"speakers": ["Enrico Franchi"], "description": "In the last years Python greatly increased its popularity as a tool for number-crunching and computationally intensive tasks. Although such tasks are traditionally associated with scientific computing, they also arise in several other scenarios, such as business and financial applications, or in the increasingly growing domain of social media.\n\nA large part of Python success stems from its suitability both as a general purpose language for application development and as the language to perform these more computationally intensive tasks, albeit typically by gluing specialized libraries. \n\nIn the present talk, I introduce some of the tools and libraries that are typically used for such tasks, and I show how they fit nicely together to produce an effective computational environment that (i) is easy to use, (ii) is reasonably efficient, and (iii) interoperates effortlessly with the world outside. My main focus is to provide a brief introduction to the fundamental components that we use for crunching numbers and to show how they play nicely together.\n\nAnother important issue that needs to be addressed in most computationally intensive tasks is the efficient usage of internal memory. A part of this talk is devoted to understanding how to effectively represent data, considering the various trade-offs of Python built-ins and external libraries. Moreover, I introduce some profiling tools that allow measuring CPU or RAM usage. \n\nEventually, I examine how the problems that have been highlighted by profiling can be solved, (i) changing various high level strategies, (ii) using some of the previously discussed libraries (numpy, scipy, pandas), or (iii) using other tools, such as cython, scipy.weave, or F2Py.", "language": "EN", "title": "Never get in a battle of bits without ammunition.", "tags": ["cython", "C/C++", "nosql", "mongodb", "numeric", "hpc", "optimization", "Algorithms", "data-analysis", "iPython", "performance", "scientific-computing", "numpy"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/never-get-in-a-battle-of-bits-without-ammunition", "video": null, "description_md": "In the last years Python greatly increased its popularity as a tool for\nnumber-crunching and computationally intensive tasks. Although such tasks are\ntraditionally associated with scientific computing, they also arise in several\nother scenarios, such as business and financial applications, or in the\nincreasingly growing domain of social media.\n\nA large part of Python success stems from its suitability both as a general\npurpose language for application development and as the language to perform\nthese more computationally intensive tasks, albeit typically by gluing\nspecialized libraries.\n\nIn the present talk, I introduce some of the tools and libraries that are\ntypically used for such tasks, and I show how they fit nicely together to\nproduce an effective computational environment that (i) is easy to use, (ii)\nis reasonably efficient, and (iii) interoperates effortlessly with the world\noutside. My main focus is to provide a brief introduction to the fundamental\ncomponents that we use for crunching numbers and to show how they play nicely\ntogether.\n\nAnother important issue that needs to be addressed in most computationally\nintensive tasks is the efficient usage of internal memory. A part of this talk\nis devoted to understanding how to effectively represent data, considering the\nvarious trade-offs of Python built-ins and external libraries. Moreover, I\nintroduce some profiling tools that allow measuring CPU or RAM usage.\n\nEventually, I examine how the problems that have been highlighted by profiling\ncan be solved, (i) changing various high level strategies, (ii) using some of\nthe previously discussed libraries (numpy, scipy, pandas), or (iii) using\nother tools, such as cython, scipy.weave, or F2Py.\n\n"}
{"speakers": ["Giorgio Salluzzo", "Andrea De Marco"], "description": "It is inconsistent in an agile environment to dismiss the usage of\ntesting tools.\nTDD has changed developers\u2019 day by day job. Also Python has some\nuseful tools, like nose, py.test and coverage to support the TDD\nmethod.\n\nToday web services are complex with many entities bound together and\nwe only have two ways to test the whole system:\n\n\nusing external entities in the test environment\ncreating mocks\n\n\nUsually developers surrender to the 1st solution; it could be very\ndangerous if not impossible due to the impact on the third part\nproduction environment.\n\nCreating a mock from scratch could prove to be very expensive and\nrepetitive as it needs to be sync\u2019d with the original service.\nInitially our need was to find an HTTP mock and then a Redis one.\nAfter the research we realized that what we found is too focused to a\nspecific solution and sometimes incomplete.\nWe also realized that what we needed were not mocks but a Socket Mock Framework.\nFollowing the HTTPretty principles we started redesigning its core to\nplug the Redis mock and we called it Mocket (pronounced like the\nfrench word \u2018moquette\u2019). Mocket can drive the socket operations at our will.\nIn the talk we\u2019ll show how to test some code and we\u2019ll try to write\nthe memcached plugin.", "language": "EN", "title": "Mocket: a Socket Mock Framework", "tags": ["testing", "socket", "tdd"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/mocket-a-socket-mock-framework", "video": null, "description_md": "It is inconsistent in an agile environment to dismiss the usage of testing\ntools. TDD has changed developers\u2019 day by day job. Also Python has some useful\ntools, like nose, py.test and coverage to support the TDD method.\n\nToday web services are complex with many entities bound together and we only\nhave two ways to test the whole system:\n\n  * using external entities in the test environment\n  * creating mocks\n\nUsually developers surrender to the 1st solution; it could be very dangerous\nif not impossible due to the impact on the third part production environment.\n\nCreating a mock from scratch could prove to be very expensive and repetitive\nas it needs to be sync\u2019d with the original service. Initially our need was to\nfind an HTTP mock and then a Redis one. After the research we realized that\nwhat we found is too focused to a specific solution and sometimes incomplete.\nWe also realized that what we needed were not mocks but a Socket Mock\nFramework. Following the HTTPretty principles we started redesigning its core\nto plug the Redis mock and we called it [Mocket](https://github.com/mocketize\n/python-mocket) (pronounced like the french word \u2018moquette\u2019). Mocket can drive\nthe socket operations at our will. In the talk we\u2019ll show how to test some\ncode and we\u2019ll try to write the memcached plugin.\n\n"}
{"speakers": ["Mike M\u00fcller"], "description": "Python offers many meta programming possibilities. Besides metaclasses,\nfunction and class decorators, descriptors, or context managers can be\nused to \u201cprogram your program\u201d.\n\nThis talk gives a short overview over these techniques without going\ninto too many technical details. It rather tries to provide useful\nexamples for what these techniques can be applied to make your programs\nbetter.\n\nMeta programming is very powerful. But too much magic may be\ncounterproductive; your programs might become too complex. On the other \nhand, meta programming can help to make your programs more pythonic,\nhelp to avoid boilerplate code, and can provide a great tool to debug\nyour code.\n\nThere are several categories of tasks meta programming may be helpful:\n\n\nDesign a new program architecture. Especially if you need to create\nframework-like applications and want to make it as easy as possible for\nprogrammers to use your framework. If your framework needs to call user\ncode instead of being called, meta programming may help to make things \nsimpler.\nMonitor programs in a production environment. Tests and mocks are\ngreat but sometime it is very difficult to setup conditions that are \nenough production-like to reproduce the essential behavior you would\nlike to check for. Some meta programming can be helpful to provide\ninsight what is going on in your programs.\nAnalyze existing programs. You may not be that lucky to start from\nscratch but rather inherit an existing software that might have been\naround for a while and went through a few hands before. Insufficient or\noutdated documentation? What is really going on in the code? Meta\nprogramming may provide some effective tools to get know more about the\ninternals of the code.\n\n\nBring your ideas to discuss about when and when not use meta programming\ntechniques in Python.", "language": "EN", "title": "Meta Programming - Some Use Cases for Everyday Programming", "tags": ["debugging", "metaprogramming", "testing", "principles", "refactoring", "application-design", "architecture", "validation", "software-engineering"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/meta-programming-some-use-cases-for-everyday-programming", "video": null, "description_md": "Python offers many meta programming possibilities. Besides metaclasses,\nfunction and class decorators, descriptors, or context managers can be used to\n\u201cprogram your program\u201d.\n\nThis talk gives a short overview over these techniques without going into too\nmany technical details. It rather tries to provide useful examples for what\nthese techniques can be applied to make your programs better.\n\nMeta programming is very powerful. But too much magic may be\ncounterproductive; your programs might become too complex. On the other hand,\nmeta programming can help to make your programs more pythonic, help to avoid\nboilerplate code, and can provide a great tool to debug your code.\n\nThere are several categories of tasks meta programming may be helpful:\n\n  * **Design a new program architecture.** Especially if you need to create framework-like applications and want to make it as easy as possible for programmers to use your framework. If your framework needs to call user code instead of being called, meta programming may help to make things simpler.\n\n  * **Monitor programs in a production environment.** Tests and mocks are great but sometime it is very difficult to setup conditions that are enough production-like to reproduce the essential behavior you would like to check for. Some meta programming can be helpful to provide insight what is going on in your programs.\n\n  * **Analyze existing programs.** You may not be that lucky to start from scratch but rather inherit an existing software that might have been around for a while and went through a few hands before. Insufficient or outdated documentation? What is really going on in the code? Meta programming may provide some effective tools to get know more about the internals of the code.\n\nBring your ideas to discuss about when and when not use meta programming\ntechniques in Python.\n\n"}
{"speakers": ["Andreas Schreiber"], "description": "The Internet of Things is about small devices and sensors that are connected through networks. Typical sensors could be weather sensors or medical devices. The Internet of Things is gaining momentum with the availability of cheap small computer devices, such as Raspberry Pi or Arduino. Most devices have limited computing power. And often they are used with limited network bandwidth. Therefore, to connect (many) devices and exchange data requires extremely lightweight protocols and implementations. \n\nThis talk describes Message Queuing Telemetry Transport (MQTT), which is a very suitable messaging protocol for connecting small devices. MQTT uses a publish/subscribe architecture. It is very useful for pushing values from sensors to other devices (e.g., smartphones). Other use cases for MQTT are chat clients (e.g., the Facebook messaging uses MQTT).\n\nThe talk focuses on MQTT with Python. Especially, the Open Source MQTT broker Mosquitto is a very good lightweight MQTT implementation with a good Python library for writing client code. The talk contains a couple of examples of applications using Python and MQTT. This includes health applications running on Raspberry Pi and Android smartphones. It will be clear how easy and straightforward applications with messaging can be implemented with Python.", "language": "EN", "title": "Messaging for the Internet of Things", "tags": ["MessageQueues", "networking", "arduino", "raspberrypi", "health", "sensor networks", "android"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/messaging-for-the-internet-of-things", "video": null, "description_md": "The Internet of Things is about small devices and sensors that are connected\nthrough networks. Typical sensors could be weather sensors or medical devices.\nThe Internet of Things is gaining momentum with the availability of cheap\nsmall computer devices, such as Raspberry Pi or Arduino. Most devices have\nlimited computing power. And often they are used with limited network\nbandwidth. Therefore, to connect (many) devices and exchange data requires\nextremely lightweight protocols and implementations.\n\nThis talk describes Message Queuing Telemetry Transport\n([MQTT](http://mqtt.org/)), which is a very suitable messaging protocol for\nconnecting small devices. MQTT uses a publish/subscribe architecture. It is\nvery useful for pushing values from sensors to other devices (e.g.,\nsmartphones). Other use cases for MQTT are chat clients (e.g., the Facebook\nmessaging uses MQTT).\n\nThe talk focuses on MQTT with Python. Especially, the Open Source MQTT broker\n[Mosquitto](http://mosquitto.org/) is a very good lightweight MQTT\nimplementation with a good Python library for writing client code. The talk\ncontains a couple of examples of applications using Python and MQTT. This\nincludes health applications running on Raspberry Pi and Android smartphones.\nIt will be clear how easy and straightforward applications with messaging can\nbe implemented with Python.\n\n"}
{"speakers": ["Flavio Percoco"], "description": "Marconi is a multi-tenant cloud queuing system written in Python as part of the OpenStack project. As message bus, it\u2019s main goals are: performance, availability, durability, fault-tolerance and scalability.\n\nThis talk aims to give the audience as much information as possible about Marconi\u2019s architecture, design, patterns, performance, issues it faced and how / why it was built from scratch.", "language": "EN", "title": "Marconi: Queuing and Notification service for OpenStack", "tags": ["MessageQueues", "WSGI", "mongodb", "REST", "tdd", "application-design", "architecture", "cloud"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/marconi-a-pythonic-message-bus", "video": null, "description_md": "Marconi is a multi-tenant cloud queuing system written in Python as part of\nthe OpenStack project. As message bus, it\u2019s main goals are: performance,\navailability, durability, fault-tolerance and scalability.\n\nThis talk aims to give the audience as much information as possible about\nMarconi\u2019s architecture, design, patterns, performance, issues it faced and how\n/ why it was built from scratch.\n\n"}
{"speakers": ["Radomir Dopieralski"], "description": "Python lets you customize the behavior of your objects by defining special \u201cdouble underscore\u201d attributes on their classes. You can define the behavior of operators, the way the instances and classes are created, the way the attributes are accessed, the way inheritance is checked, etc. There is a lot of things you can do (and a lot of things you shouldn\u2019t) with it.\n\nIn this talk we will look at the different \u201cmagic\u201d attributes and see what they exactly do, and what they can be useful for and what kind of use should be avoided and why. We will look at common tricks employed by popular frameworks that turn Python into their own miniature domain-specific languages. We will also see how Python itself uses those mechanisms internally.\n\nThis talk is for people who are already familiar with the basics of Python, but would like to acquire some deeper understanding about it, and for advanced users who seek to organize their knowledge. At the end of the talk I want all of you to know what is the difference between init and new, how metaclass and subclasscheck work, and how slots uses the descriptor protocol.", "language": "EN", "title": "Magical attributes", "tags": ["best-practices", "hacking", "api", "design"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/magical-attributes", "video": null, "description_md": "Python lets you customize the behavior of your objects by defining special\n\u201cdouble underscore\u201d attributes on their classes. You can define the behavior\nof operators, the way the instances and classes are created, the way the\nattributes are accessed, the way inheritance is checked, etc. There is a lot\nof things you can do (and a lot of things you shouldn\u2019t) with it.\n\nIn this talk we will look at the different \u201cmagic\u201d attributes and see what\nthey _exactly_ do, and what they can be useful for and what kind of use should\nbe avoided and why. We will look at common tricks employed by popular\nframeworks that turn Python into their own miniature domain-specific\nlanguages. We will also see how Python itself uses those mechanisms\ninternally.\n\nThis talk is for people who are already familiar with the basics of Python,\nbut would like to acquire some deeper understanding about it, and for advanced\nusers who seek to organize their knowledge. At the end of the talk I want all\nof you to know what is the difference between **init** and **new**, how\n**metaclass** and **subclasscheck** work, and how **slots** uses the\ndescriptor protocol.\n\n"}
{"speakers": ["Andrew Mleczko"], "description": "While working on a modern web application sooner or later you will face the problem: I want to allow my users to authenticate with an external identity provider. There are several commercial solutions that will do it for you. \nMy talk is about Velruse - an open source, third-party authentication for web applications. I will present two successful use cases we have completed in the last few months that are using Velruse. Later I will show how your own code can profit of doing the same and how easy is to integrate it with custom identity providers.", "language": "EN", "title": "Lost in OAuth? Learn Velruse And Get Your Life Back!", "tags": ["web", "pyramid", "HTTP", "open-source", "case-study"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/lost-in-oauth-learn-velruse-and-get-your-life-back", "video": null, "description_md": "While working on a modern web application sooner or later you will face the\nproblem: I want to allow my users to authenticate with an external identity\nprovider. There are several commercial solutions that will do it for you. My\ntalk is about **Velruse** \\- an open source, third-party authentication for\nweb applications. I will present two successful use cases we have completed in\nthe last few months that are using Velruse. Later I will show how your own\ncode can profit of doing the same and how easy is to integrate it with custom\nidentity providers.\n\n"}
{"speakers": ["Florent Xicluna"], "description": "First we\u2019ll try to answer the basic questions:\n\n\nWhy (almost) every language has coding guidelines?\nIs it essential for your project?\n\n\nThen we\u2019ll go through the steps to reach the enlightenment:\n\n\nwe\u2019ll present the PEP-8 standard, which is the style guide for Python\nand we\u2019ll peek through the other materials available on the python.org website.\n\n\nAt this stage we\u2019ll demonstrate the pep8 tool, and how it helps you write better code.\nWe\u2019ll get a glimpse on the configuration of the tool, and on the project itself.\n\nWe will mention other checkers which are alternatives and complements for the pep8 checker.", "language": "EN", "title": "Let's code with style", "tags": ["best-practices", "quality-assurance"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/lets-code-with-style", "video": null, "description_md": "First we\u2019ll try to answer the basic questions:\n\n  * Why (almost) every language has coding guidelines?\n  * Is it essential for your project?\n\nThen we\u2019ll go through the steps to reach the enlightenment:\n\n  * we\u2019ll present the PEP-8 standard, which is the style guide for Python\n  * and we\u2019ll peek through the other materials available on the python.org website.\n\nAt this stage we\u2019ll demonstrate the pep8 tool, and how it helps you write\nbetter code. We\u2019ll get a glimpse on the configuration of the tool, and on the\nproject itself.\n\nWe will mention other checkers which are alternatives and complements for the\npep8 checker.\n\n"}
{"speakers": ["Giles Thomas"], "description": "At the core of PythonAnywhere there is a Tornado-based server, which allows people to use Python consoles running on our servers from inside their web browser.  We\u2019ve been through several iterations of the server design since we started in mid-2011, and this talk explains what they were, the scaling issues we encountered, and why we converged on the current design.", "language": "EN", "title": "Lessons learned from serving 1/4 million in-browser Python consoles with Tornado", "tags": [], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/lessons-learned-serving-14-million-browser-python-consoles-tornado", "video": null, "description_md": "At the core of PythonAnywhere there is a Tornado-based server, which allows\npeople to use Python consoles running on our servers from inside their web\nbrowser. We\u2019ve been through several iterations of the server design since we\nstarted in mid-2011, and this talk explains what they were, the scaling issues\nwe encountered, and why we converged on the current design.\n\n"}
{"speakers": ["Mathieu Virbel"], "description": "Since 2008, first known as PyMT, Kivy aimed to be a good multitouch framework in Python. Now, the organisation is bigger, and run severals projects used in the Python community. It has been funded for migrating to Python 3, and for running on the Rapsberry Pi. It already runs on iOS, Android, Linux, Windows and MacOSX.\n\nThis talk will present the Kivy organisation, and all the subprojects. We\u2019ll show how Kivy can be used to create awesome UI, or just simple desktop app. Then we\u2019ll discover python-for-android and kivy-ios to package and deploy in live the previous application on both ios and android device.\n\nWe\u2019ll also show a new tool named Buildozer, to easily package the app without thinking about python-for-android and kivy-ios.\n\nLast, we\u2019ll introduce Pyjnius (maybe Pyobjus), 2 libraries for accessing Java and Objective C language dynamically from Python. This is currently used to access Android API in Python without compiling a C/JNI extension. We\u2019ll also briefly cover Plyer, a future module that abstract features from various platform: Accelerometers, GPS, etc.", "language": "EN", "title": "Kivy, versatile framework for mobile and desktop", "tags": ["python-for-android", "android", "opengl", "iOS", "kivy"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/kivy-versatile-framework-for-mobile-and-desktop", "video": null, "description_md": "Since 2008, first known as PyMT, Kivy aimed to be a good multitouch framework\nin Python. Now, the organisation is bigger, and run severals projects used in\nthe Python community. It has been funded for migrating to Python 3, and for\nrunning on the Rapsberry Pi. It already runs on iOS, Android, Linux, Windows\nand MacOSX.\n\nThis talk will present the Kivy organisation, and all the subprojects. We\u2019ll\nshow how Kivy can be used to create awesome UI, or just simple desktop app.\nThen we\u2019ll discover python-for-android and kivy-ios to package and deploy in\nlive the previous application on both ios and android device.\n\nWe\u2019ll also show a new tool named Buildozer, to easily package the app without\nthinking about python-for-android and kivy-ios.\n\nLast, we\u2019ll introduce Pyjnius (maybe Pyobjus), 2 libraries for accessing Java\nand Objective C language dynamically from Python. This is currently used to\naccess Android API in Python without compiling a C/JNI extension. We\u2019ll also\nbriefly cover Plyer, a future module that abstract features from various\nplatform: Accelerometers, GPS, etc.\n\n"}
{"speakers": ["Simone Deponti"], "description": "Modern web development is split into two diverging areas: frontend and backend. Gone are the days in which the server side code could manage the UI, and the growt of rich web interfaces and mobile applications poses new challenge in the way we approach web development.\n\nIn this talk, we will show how the paradigms of server side development have been radically changed by this trend, and how emerging client side technologies such as Websockets are radically altering the landscape of web development, and how we can address such technologies using Python.\n\nWe will also highlight the challenges that such new paradigms arise in the area of security, performance, and system architecture.", "language": "EN", "title": "Server side story", "tags": ["networking", "deploy", "mobile", "javascript", "desktop", "sysadmin", "json", "gevent", "design", "software-engineering", "best-practices", "HTTP", "application-design", "websockets", "architecture"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/server-side-story", "video": null, "description_md": "Modern web development is split into two diverging areas: frontend and\nbackend. Gone are the days in which the server side code could manage the UI,\nand the growt of rich web interfaces and mobile applications poses new\nchallenge in the way we approach web development.\n\nIn this talk, we will show how the paradigms of server side development have\nbeen radically changed by this trend, and how emerging client side\ntechnologies such as Websockets are radically altering the landscape of web\ndevelopment, and how we can address such technologies using Python.\n\nWe will also highlight the challenges that such new paradigms arise in the\narea of security, performance, and system architecture.\n\n"}
{"speakers": ["Enrico Franchi"], "description": "Negli ultimi anni la popolarit\u00e0 di Python come strumento per lavori computazionalmente intensivi \u00e8 grandemente cresciuta. Nonostante questo tipo di compiti sia tradizionalmente associato con il calcolo scientifico, si incontrano anche in molte altre situazioni, come per esempio applicazioni finanziarie o nel mondo in continua crescita dei social media.\n\nIn questo talk, introduco alcuni degli strumenti e delle librerie che vengono usati in questi contesti, e mostro come si integrano fra di loro per produrre un ambiente di calcolo effettivo che sia (i) facile da usare, (ii) ragionevolmente efficiente, e (iii) che inter-opera efficacemente con il mondo esterno. Il mio obiettivo principale \u00e8 fornire una breve introduzione ai componenti fondamentali che usiamo per sgranocchiare numeri  e mostrare come lavorano in concerto.\n\nUn altro aspetto importante che deve essere affrontato nei compiti computazionalmente intensivi \u00e8 l\u2019utilizzo efficiente della memoria interna. Una parte di questo talk \u00e8 devoluta per capire come rappresentare efficacemente i dati, considerando i vari trade-off fra i built-in di Python e le librerie esterne. Per di pi\u00f9, introduco alcuni strumenti di profiling che consentono di misurare l\u2019utilizzo di CPU e di RAM.\n\nInfine, esamino come i potenziali problemi evidenziati dal profiling possono essere risolti cambiando (i) varie strategie ad alto livello, (ii) utilizzando alcune delle librerie precedentemente discusse (numpy, scipy, pandas), o (iii) usando altri strumenti, come per esempio cython, scipy.weave, o F2Py.", "language": "IT", "title": "Scegliere le armi per la battaglia del calcolo intensivo", "tags": ["bigdata", "optimization", "data-analysis", "hpc", "performance", "scientific-computing"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/scegliere-armi-battaglia-calcolo-intensivo", "video": null, "description_md": "Negli ultimi anni la popolarit\u00e0 di Python come strumento per lavori\ncomputazionalmente intensivi \u00e8 grandemente cresciuta. Nonostante questo tipo\ndi compiti sia tradizionalmente associato con il calcolo scientifico, si\nincontrano anche in molte altre situazioni, come per esempio applicazioni\nfinanziarie o nel mondo in continua crescita dei social media.\n\nIn questo talk, introduco alcuni degli strumenti e delle librerie che vengono\nusati in questi contesti, e mostro come si integrano fra di loro per produrre\nun ambiente di calcolo effettivo che sia (i) facile da usare, (ii)\nragionevolmente efficiente, e (iii) che inter-opera efficacemente con il mondo\nesterno. Il mio obiettivo principale \u00e8 fornire una breve introduzione ai\ncomponenti fondamentali che usiamo per sgranocchiare numeri e mostrare come\nlavorano in concerto.\n\nUn altro aspetto importante che deve essere affrontato nei compiti\ncomputazionalmente intensivi \u00e8 l\u2019utilizzo efficiente della memoria interna.\nUna parte di questo talk \u00e8 devoluta per capire come rappresentare\nefficacemente i dati, considerando i vari trade-off fra i built-in di Python e\nle librerie esterne. Per di pi\u00f9, introduco alcuni strumenti di profiling che\nconsentono di misurare l\u2019utilizzo di CPU e di RAM.\n\nInfine, esamino come i potenziali problemi evidenziati dal profiling possono\nessere risolti cambiando (i) varie strategie ad alto livello, (ii) utilizzando\nalcune delle librerie precedentemente discusse (numpy, scipy, pandas), o (iii)\nusando altri strumenti, come per esempio cython, scipy.weave, o F2Py.\n\n"}
{"speakers": ["David Cramer"], "description": "This talk will focus on best practices for building scalable web applications using traditional SQL databases (Postgres specifically). \n\nWe\u2019ll cover a number of ways you can augment SQL without replacing it, as well as patterns that affect many web applications:\n\n\nSchema changes on a busy application\nAnti-patterns for optimizing queries\nBasic horizontal sharding\nScalable counters with Redis\nMaterializing streams of data\nSimple queues as a solution to most problems", "language": "EN", "title": "Scalable SQL Patterns", "tags": ["web", "postgresql", "scalability", "sql"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/scalable-sql-patterns", "video": null, "description_md": "This talk will focus on best practices for building scalable web applications\nusing traditional SQL databases (Postgres specifically).\n\nWe\u2019ll cover a number of ways you can augment SQL without replacing it, as well\nas patterns that affect many web applications:\n\n  * Schema changes on a busy application\n  * Anti-patterns for optimizing queries\n  * Basic horizontal sharding\n  * Scalable counters with Redis\n  * Materializing streams of data\n  * Simple queues as a solution to most problems\n\n"}
{"speakers": ["Gabriel Nistor"], "description": "", "language": "EN", "title": "Rest API Framework", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/rest-api-framework", "video": null, "description_md": "\n\n"}
{"speakers": ["P\u00e9ter Szab\u00f3"], "description": "This talk presents an automated, safe, 0-downtime deployment setup for Python web applications running on a single Unix server, using existing open source technologies (proxy-capable web servers such as Apache and nginx, SSH, Git) and some custom scripts and Python modules. The setup works with Django or any other WSGI-capable web application, and it can use processes, threads, and/or coroutines (i.e. greenlets or tasklets with I/O libraries gevent and Syncless) for running workers in parallel. The setup also works not only with HTTP, but with other TCP-based servers.\n\nThe most important unique feature of this deployment setup is that the old version continues running with 0 downtime in case of a startup or unit test failure. Other features: dynamic worker pool size to accommodate increased load; a development system can run in parallel with the production system for manual testing.", "language": "EN", "title": "Updating web applications with 0 downtime", "tags": ["web", "stackless", "HTTP", "socket", "thread", "coroutine", "parallelization", "deploy", "WSGI", "django", "process", "unix", "gevent", "greenlet", "linux", "release-engineering", "servers"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/updating-web-applications-with-0-downtime", "video": null, "description_md": "This talk presents an automated, safe, 0-downtime deployment setup for Python\nweb applications running on a single Unix server, using existing open source\ntechnologies (proxy-capable web servers such as Apache and nginx, SSH, Git)\nand some custom scripts and Python modules. The setup works with Django or any\nother WSGI-capable web application, and it can use processes, threads, and/or\ncoroutines (i.e. greenlets or tasklets with I/O libraries gevent and Syncless)\nfor running workers in parallel. The setup also works not only with HTTP, but\nwith other TCP-based servers.\n\nThe most important unique feature of this deployment setup is that the old\nversion continues running with 0 downtime in case of a startup or unit test\nfailure. Other features: dynamic worker pool size to accommodate increased\nload; a development system can run in parallel with the production system for\nmanual testing.\n\n"}
{"speakers": ["Fabrizio Manfredi", "Federico Mosca"], "description": "RestFS \u00e8 un progetto sperimentale volto a sviluppare un filesystem distribuito open-source per ambienti di grandi dimensioni.\n\u00c8 stato realizzato in modo tale da poter scalare da un singolo nodo fino a migliaia di nodi, garantendo un sistema di storage ad alta affidabilita\u2019 con caratteristiche \nuniche nelle performance,  nella distribuzione dei data in piu datacenter e nell\u2019ottimizzazione in reti WAN .\nRestFS si fonda su quattro principali componenti: Cell, Service, Metadata and Data, in maniera tale da massimizzare la separazione nella distribuzione di data e metadata e rimuovere ogni sorta di single point of failure.\nLe caratteristiche principali di RestFS sono:\n- Scalabilit\u00e0, senza limiti di memoria di massa ne sul numero di client\n- Elevata disponibilit\u00e0, senza singol point of failure e replica dei dati\n- Adattivo, bilanciamento del carico e distribuzione uniforme\n- Alte Prestazioni, trasferimento parallelo, cache locale consistente e trasmissione dei dati per differenza\n- Flessibilit\u00e0, interfaccia S3 compatibile, interfaccia filesystem POSIX, librerie dedicate per l\u2019integrazione in server Web e a livello di applicazione\nL\u2019intervento tratter\u00e0 l\u2019architettura del framework, cos\u00ec come le nuove funzioni introdette recentemente. In particolare saranno discusse le soluzioni adottate per ottenere alte prestazione nella gestione del locking, della replica e del deduplication.\nLa presentazione mostrera\u2019 tra le altre cose l\u2019installazione, l\u2019 integrazione a livello applicativo e l\u2019estensione del sistema tramite plugin personalizzati.", "language": "IT", "title": "Uno sguardo agli internal di RestFS", "tags": ["clustering", "HTTP", "parallelization", "distributed", "twisted", "REST", "optimization", "Algorithms", "scalability", "performance", "hpc", "async"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/sguardo-internal-restfs", "video": null, "description_md": "RestFS \u00e8 un progetto sperimentale volto a sviluppare un filesystem distribuito\nopen-source per ambienti di grandi dimensioni. \u00c8 stato realizzato in modo tale\nda poter scalare da un singolo nodo fino a migliaia di nodi, garantendo un\nsistema di storage ad alta affidabilita\u2019 con caratteristiche uniche nelle\nperformance, nella distribuzione dei data in piu datacenter e\nnell\u2019ottimizzazione in reti WAN . RestFS si fonda su quattro principali\ncomponenti: Cell, Service, Metadata and Data, in maniera tale da massimizzare\nla separazione nella distribuzione di data e metadata e rimuovere ogni sorta\ndi single point of failure. Le caratteristiche principali di RestFS sono: \\-\nScalabilit\u00e0, senza limiti di memoria di massa ne sul numero di client \\-\nElevata disponibilit\u00e0, senza singol point of failure e replica dei dati \\-\nAdattivo, bilanciamento del carico e distribuzione uniforme \\- Alte\nPrestazioni, trasferimento parallelo, cache locale consistente e trasmissione\ndei dati per differenza \\- Flessibilit\u00e0, interfaccia S3 compatibile,\ninterfaccia filesystem POSIX, librerie dedicate per l\u2019integrazione in server\nWeb e a livello di applicazione L\u2019intervento tratter\u00e0 l\u2019architettura del\nframework, cos\u00ec come le nuove funzioni introdette recentemente. In particolare\nsaranno discusse le soluzioni adottate per ottenere alte prestazione nella\ngestione del locking, della replica e del deduplication. La presentazione\nmostrera\u2019 tra le altre cose l\u2019installazione, l\u2019 integrazione a livello\napplicativo e l\u2019estensione del sistema tramite plugin personalizzati.\n\n"}
{"speakers": ["Ezio Melotti"], "description": "Working with Unicode and encodings might be confusing, but every developer must know how they work. Even if the full Unicode standard is actually quite complex, only a few basic concepts are really necessary to work with Python and Unicode:\n\n\nthe differences between Unicode strings and bytes;\nhow encodings are used to store characters;\nthe differences between different encodings;\nhow to understand Unicode-related errors;\n\n\nThis talk aims to explain these concepts. Best practices for using Unicode, the current status of Unicode in Python 2 and 3, and latest Unicode-related updates (e.g. PEP393 \u2013 Flexible string representation) will also be discussed. The talk is suitable for both new developers that are not yet familiar with Unicode and for experienced developers that want to understand better what\u2019s going on under the hood.", "language": "EN", "title": "Understanding Encodings", "tags": ["pep393", "unicode", "python3", "encodings"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/understanding-encodings-1", "video": null, "description_md": "Working with Unicode and encodings might be confusing, but every developer\nmust know how they work. Even if the full Unicode standard is actually quite\ncomplex, only a few basic concepts are really necessary to work with Python\nand Unicode:\n\n  * the differences between Unicode strings and bytes;\n  * how encodings are used to store characters;\n  * the differences between different encodings;\n  * how to understand Unicode-related errors;\n\nThis talk aims to explain these concepts. Best practices for using Unicode,\nthe current status of Unicode in Python 2 and 3, and latest Unicode-related\nupdates (e.g. PEP393 \u2013 Flexible string representation) will also be discussed.\nThe talk is suitable for both new developers that are not yet familiar with\nUnicode and for experienced developers that want to understand better what\u2019s\ngoing on under the hood.\n\n"}
{"speakers": ["Domen Ko\u017ear"], "description": "This talk is meant for Python developers that would like to improve their development workflow using best tools for their job.\n\nI\u2019ll be going through tools I use everyday and quickly describe their meaning and usage. Tools will include nosetests, webtest, sphinx, mr.bob, pypi, zest.releaser, flake8, pyramid, supervisord, editor plugins, git, travis-ci, webhelpers, six, beets, runsnakerun and others.\n\nThe goal is to achieve overflow of \u201ccommon knowledge\u201d information for new people in Python community.\n\nhttps://python-guide.readthedocs.org/en/latest/ will be used as \u201cgo-to\u201d documentation.", "language": "EN", "title": "Tools for successful project development", "tags": ["project-management", "testing", "pyramid"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/tools-for-successful-project-development", "video": null, "description_md": "This talk is meant for Python developers that would like to improve their\ndevelopment workflow using best tools for their job.\n\nI\u2019ll be going through tools I use everyday and quickly describe their meaning\nand usage. Tools will include nosetests, webtest, sphinx, mr.bob, pypi,\nzest.releaser, flake8, pyramid, supervisord, editor plugins, git, travis-ci,\nwebhelpers, six, beets, runsnakerun and others.\n\nThe goal is to achieve overflow of \u201ccommon knowledge\u201d information for new\npeople in Python community.\n\nhttps://python-guide.readthedocs.org/en/latest/ will be used as \u201cgo-to\u201d\ndocumentation.\n\n"}
{"speakers": ["Armin Ronacher"], "description": "We all suffer from going with the flow in many cases.\n\nThe keynote gives some examples of how questioning some established rules revolutionized the industry and how we open our mind a bit.\n\nIt includes some interesting examples from the Python and programming community where people tried something new with tremendous success and how they came up with the idea.", "language": "EN", "title": "Thinking outside the Box", "tags": [], "datetime": "2013-07-01 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/thinking-outside-box", "video": null, "description_md": "We all suffer from going with the flow in many cases.\n\nThe keynote gives some examples of how questioning some established rules\nrevolutionized the industry and how we open our mind a bit.\n\nIt includes some interesting examples from the Python and programming\ncommunity where people tried something new with tremendous success and how\nthey came up with the idea.\n\n"}
{"speakers": ["Daniel Greenfeld"], "description": "This talk will explore what it is like being a developer in a community filled with experts from around the world. The goal of the talk is to provide useful content for beginners and topics of discussion for more advanced developers, while also focusing on Python\u2019s strengths.", "language": "EN", "title": "Thinking Hard About Python", "tags": [], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/thinking-hard-about-python", "video": null, "description_md": "This talk will explore what it is like being a developer in a community filled\nwith experts from around the world. The goal of the talk is to provide useful\ncontent for beginners and topics of discussion for more advanced developers,\nwhile also focusing on Python\u2019s strengths.\n\n"}
{"speakers": ["Russell Sherwood", "David Sale"], "description": "In Europython 2012 the term \u2018Agile Movement\u2019 was heard during a keynote, suggesting that the agile development process was a waste of time.  This talk looks to offer our view and experiences on why you need to be following this process now.  This isn\u2019t some cult idea, nor is it going to make your development team the best in the world.  What Agile can bring is a more structured, stable delivery stream to your business or project, along with happy, empowered developers.\n\nWhenever you\u2019re developing for a client there\u2019s always one thing that\u2019s inevitable: the requirements that you think you\u2019re agreeing on at the start are never the same as what the client has in mind: either the product that you produce is different to what the client expects, or you find that halfway through development the client changes their mind.\n\nBut where does this fit in to the waterfall model?  At what point do we consider that the client could change their mind? \n\n\n  \u201cI\u2019ve already gathered my requirements, nailed down my design and begun implementation, how dare the client come back to me and change the goalposts!\u201d \u2013 A waterfall developer\n\n\nLet\u2019s not forget: they\u2019re your client, and they\u2019re paying you.  We want to please them so that they come back to us.  Telling a client that we can\u2019t be flexible with what they ask is not going to leave them very happy.\n\nThis is where agile development steps in.  With agile, we lose the rigid structure of the waterfall model.  We know that requirements can change all the time, and that\u2019s just fine: there\u2019s no longer a need to smile and nod with gritted teeth.\n\nWith waterfall the fixed aspect are the requirements.  We know that we must deliver X, Y and Z, but the time that this will take is estimated.  With agile, this is flipped in to a more realistic model, where the time taken is fixed but the quantity of features delivered is estimated.\n\nSound odd?  It really works, and many software companies are noticing the benefits and migrating.  Are you ready to make the move?  This is an introduction to agile for beginners that will make you question the way your waterfall team works and will give you a few small ideas that can be implemented immediately.\n\nWe will give you a brief overview on the key points to give you a taster of what life is like in an agile development team:\n\n\nThe Agile Lifecycle: daily standups, planning games, showcases and retrospectives\nThe information radiator\nThe agile team \u2013 roles and responsibilities: scrum masters, QAs, analysts and developers\nTesting within an agile development team\nPair programming \u2013 is it really possible to develop in pairs?", "language": "EN", "title": "The \u2018Agile Movement\u2019", "tags": ["bdd", "continuous-integration", "project-management", "agile", "testing", "principles", "tdd", "pair-programming", "XP"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/the-agile-movement-and-why-ignoring-it-will-leave-you-stuck-in-a-rut", "video": null, "description_md": "In Europython 2012 the term \u2018Agile Movement\u2019 was heard during a keynote,\nsuggesting that the agile development process was a waste of time. This talk\nlooks to offer our view and experiences on why you **need** to be following\nthis process now. This isn\u2019t some cult idea, nor is it going to make your\ndevelopment team the best in the world. What Agile can bring is a more\nstructured, stable delivery stream to your business or project, along with\nhappy, empowered developers.\n\nWhenever you\u2019re developing for a client there\u2019s always one thing that\u2019s\ninevitable: the requirements that you think you\u2019re agreeing on at the start\nare never the same as what the client has in mind: either the product that you\nproduce is different to what the client expects, or you find that halfway\nthrough development the client changes their mind.\n\nBut where does this fit in to the waterfall model? At what point do we\nconsider that the client could change their mind?\n\n> _\u201cI\u2019ve already gathered my requirements, nailed down my design and begun\nimplementation, how dare the client come back to me and change the goalposts!\u201d\n\u2013 A waterfall developer_\n\nLet\u2019s not forget: they\u2019re your client, and they\u2019re paying you. We want to\nplease them so that they come back to us. Telling a client that we can\u2019t be\nflexible with what they ask is not going to leave them very happy.\n\nThis is where agile development steps in. With agile, we lose the rigid\nstructure of the waterfall model. We know that requirements can change all the\ntime, and that\u2019s just fine: there\u2019s no longer a need to smile and nod with\ngritted teeth.\n\nWith waterfall the fixed aspect are the requirements. We know that we must\ndeliver X, Y and Z, but the time that this will take is estimated. With agile,\nthis is flipped in to a more realistic model, where the time taken is fixed\nbut the quantity of features delivered is estimated.\n\nSound odd? It really works, and many software companies are noticing the\nbenefits and migrating. Are you ready to make the move? This is an\nintroduction to agile for beginners that will make you question the way your\nwaterfall team works and will give you a few small ideas that can be\nimplemented immediately.\n\nWe will give you a brief overview on the key points to give you a taster of\nwhat life is like in an agile development team:\n\n  * The Agile Lifecycle: daily standups, planning games, showcases and retrospectives\n  * The information radiator\n  * The agile team \u2013 roles and responsibilities: scrum masters, QAs, analysts and developers\n  * Testing within an agile development team\n  * Pair programming \u2013 is it really possible to develop in pairs?\n\n"}
{"speakers": ["Holger Krekel"], "description": "Peer2Peer computing is seeing a revival.  Holger discusses recent examples of successful and upcoming P2P technologies, contrasting it to existing cloud-centered services.  He argues that P2P is harder to get right from the development side, but promises to provide more efficiency and privacy for digital communications.  He goes on to list projects of interests for doing more P2P-style projects and looks at how Python could fit in as part of new platforms.", "language": "EN", "title": "The return of Peer2Peer computing", "tags": [], "datetime": "2013-07-01 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/return-peer2peer-computing", "video": null, "description_md": "Peer2Peer computing is seeing a revival. Holger discusses recent examples of\nsuccessful and upcoming P2P technologies, contrasting it to existing cloud-\ncentered services. He argues that P2P is harder to get right from the\ndevelopment side, but promises to provide more efficiency and privacy for\ndigital communications. He goes on to list projects of interests for doing\nmore P2P-style projects and looks at how Python could fit in as part of new\nplatforms.\n\n"}
{"speakers": ["Erik Janssens", "Jeroen Dierckx"], "description": "This talk will show how GUI applications written as a series of generators are fun to write, responsive, user friendly and easy to unit test.  We dive into the details of language functions of PEP 342 (Coroutines via Enhanced Generators) and PEP 380 (Syntax for Delegating to a Subgenerator).  With this knowledge refreshed, we discuss why and how these functions can be integrated in an event loop.  Then we demonstrate how we used these functions to rewrite all the asynchronous operations of the Camelot framework and avoided series of callbacks transforming the code from complicated to beatiful.", "language": "EN", "title": "The next iteration of your GUI", "tags": ["camelot", "gui", "coroutine"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/the-next-iteration-of-your-gui", "video": null, "description_md": "This talk will show how GUI applications written as a series of generators are\nfun to write, responsive, user friendly and easy to unit test. We dive into\nthe details of language functions of PEP 342 (Coroutines via Enhanced\nGenerators) and PEP 380 (Syntax for Delegating to a Subgenerator). With this\nknowledge refreshed, we discuss why and how these functions can be integrated\nin an event loop. Then we demonstrate how we used these functions to rewrite\nall the asynchronous operations of the Camelot framework and avoided series of\ncallbacks transforming the code from complicated to beatiful.\n\n"}
{"speakers": ["Mike M\u00fcller"], "description": "How can a programming language be equally appealing to beginners and advanced programmers?\n\nPython is very popular among beginner programmers. Frequently, people who have no programming background use Python to enter into the world of programming. High school students like to use Python and it is often their first programming language. It is relativity easy to learn and get started with. Projects like the Raspberry Pi use it as the preferred way of programming for this little great devices.\n\nOn the other hand, Python offers powerful features like metaprogramming that are often more jokingly referred to with the phrase \u201cmakes your head explode\u201d. Even experienced Python users can learn a lot of sophisticated techniques if they dive deeper into the language. These features often provide the basis for popular frameworks for testing, database and web programming.\n\nThis talk explores the features of Python that make it suitable for both extremes of the progrmmer spectrum. It analyzes this paradoxical situation to find out how much it contributes to Python\u2019s success.", "language": "EN", "title": "The Python Paradox", "tags": [], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-paradox", "video": null, "description_md": "How can a programming language be equally appealing to beginners and advanced\nprogrammers?\n\nPython is very popular among beginner programmers. Frequently, people who have\nno programming background use Python to enter into the world of programming.\nHigh school students like to use Python and it is often their first\nprogramming language. It is relativity easy to learn and get started with.\nProjects like the Raspberry Pi use it as the preferred way of programming for\nthis little great devices.\n\nOn the other hand, Python offers powerful features like metaprogramming that\nare often more jokingly referred to with the phrase \u201cmakes your head explode\u201d.\nEven experienced Python users can learn a lot of sophisticated techniques if\nthey dive deeper into the language. These features often provide the basis for\npopular frameworks for testing, database and web programming.\n\nThis talk explores the features of Python that make it suitable for both\nextremes of the progrmmer spectrum. It analyzes this paradoxical situation to\nfind out how much it contributes to Python\u2019s success.\n\n"}
{"speakers": ["Van Lindberg"], "description": "Python turned 20 years old a couple years ago. In that time, Python has matured from Guido\u2019s experiment into business-ready, hacker friendly language with an international community.\n\nBut what are we doing to build and secure the next twenty years of Python? What are the challenges that we face - in the implementation of the language and in the development of our community?", "language": "EN", "title": "The Next 20 Years of Python", "tags": [], "datetime": "2013-07-01 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/next-20-years-python", "video": null, "description_md": "Python turned 20 years old a couple years ago. In that time, Python has\nmatured from Guido\u2019s experiment into business-ready, hacker friendly language\nwith an international community.\n\nBut what are we doing to build and secure the next twenty years of Python?\nWhat are the challenges that we face - in the implementation of the language\nand in the development of our community?\n\n"}
{"speakers": ["Cesare Di Mauro"], "description": "In this talk I give you some information about how an idea about a new CPU\narchitecture (NEx64T) came, and what was needed to get some numbers that\nlet me compare it to the famous x86 and x64 ones.\n\nAn x86/x64 disassembler library was presented (diStorm3) with its\ndislib.py module that handles Microsoft\u2019s PE binary files.\n\nA basic algorithm to disassemble as much code as possible is shown, as\nwell as what kind of information were retrieved and profiled to get interesting\nstatistics.\n\nSome real world numbers are provided about the code density of the new CPU, and compared to x86 and x64 ones.", "language": "EN", "title": "x86/x64 assembly + Python = new CPU architecture (to rule the world)", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/x86x64-assembly-python-new-cpu-architecture-rule-world", "video": null, "description_md": "In this talk I give you some information about how an idea about a new CPU\narchitecture (NEx64T) came, and what was needed to get some numbers that let\nme compare it to the famous x86 and x64 ones.\n\nAn x86/x64 disassembler library was presented (diStorm3) with its dislib.py\nmodule that handles Microsoft\u2019s PE binary files.\n\nA basic algorithm to disassemble as much code as possible is shown, as well as\nwhat kind of information were retrieved and profiled to get interesting\nstatistics.\n\nSome real world numbers are provided about the code density of the new CPU,\nand compared to x86 and x64 ones.\n\n"}
{"speakers": ["Holger Krekel"], "description": "The py.test tool presents a rapid and simple way to write tests for your Python code.  This talks introduces some common testing terminology and basic pytest usage.  Moreover, it discusses some unique pytest features for writing unit- or functional tests. For unit tests, the simple Python \u201cassert\u201d statement is used for coding assertions.  As of 2011, this assert support has been perfected for Python 2.6 or higher, finally removing what some people have formerly called \u201cmagic side effects\u201d.  \n\nFor writing functional or acceptance tests py.test features a unique depdendency injection mechanism for managing test resources.  The talk shows how to setup these resources and how to configure it via command line options. In 2011 and 2012, QA folks from Mozilla and Redhat QA people endorsed pytest citing its unique features and the general customizability.  The talk concludes with a look on other features like distributing test load and other recently released plugins.", "language": "EN", "title": "pytest - rapid and simple testing with Python", "tags": ["qa", "professional", "testing"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/pytest-rapid-and-simple-testing-with-python", "video": null, "description_md": "The py.test tool presents a rapid and simple way to write tests for your\nPython code. This talks introduces some common testing terminology and basic\npytest usage. Moreover, it discusses some unique pytest features for writing\nunit- or functional tests. For unit tests, the simple Python \u201cassert\u201d\nstatement is used for coding assertions. As of 2011, this assert support has\nbeen perfected for Python 2.6 or higher, finally removing what some people\nhave formerly called \u201cmagic side effects\u201d.\n\nFor writing functional or acceptance tests py.test features a unique\ndepdendency injection mechanism for managing test resources. The talk shows\nhow to setup these resources and how to configure it via command line options.\nIn 2011 and 2012, QA folks from Mozilla and Redhat QA people endorsed pytest\nciting its unique features and the general customizability. The talk concludes\nwith a look on other features like distributing test load and other recently\nreleased plugins.\n\n"}
{"speakers": ["Hannu Krosing"], "description": "Until now some of the extensibility of PostgreSQL was reserved for C-langauge extensions only, as no PL-language (postgreSQLs \u201cpluggable languages\") could be used to create functions with most \u201cpseudo types\u201d - notably cstring and internal -  which are required for things like type input output function, full-text search pre-processors and some more esoteric support functions for query optimisation.\n\nIn this talk I describe the support for  types \u2018cstring\u2019 and \u2018internal\u2019 I am developing for pl/python in upcoming postgreSQL v9.3 version together with some examples of what new extensibility features of postgreSQL can now be easily developed in python.\n\nAs an example a pl/python wrapper for BSON binary objects is shown allowing you to store and index BSON (that is the only native datatype in MongoDB) objects and use them together with standard SQL types and PostgreSQL extension types in your SQL queries, taking full advantage of PostgreSQLs superior query optimization features.", "language": "EN", "title": "pl/python now as powerful as C", "tags": ["postgresql", "nosql", "database", "mongodb", "sql", "bigdata", "pl/python", "optimization", "pl/pythonu", "databases", "Full Text Search"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/plpython-now-as-powerful-as-c", "video": null, "description_md": "Until now some of the extensibility of PostgreSQL was reserved for C-langauge\nextensions only, as no PL-language (postgreSQLs \u201cpluggable languages\") could\nbe used to create functions with most \u201cpseudo types\u201d - notably cstring and\ninternal - which are required for things like type input output function,\nfull-text search pre-processors and some more esoteric support functions for\nquery optimisation.\n\nIn this talk I describe the support for types \u2018cstring\u2019 and \u2018internal\u2019 I am\ndeveloping for pl/python in upcoming postgreSQL v9.3 version together with\nsome examples of what new extensibility features of postgreSQL can now be\neasily developed in python.\n\nAs an example a pl/python wrapper for BSON binary objects is shown allowing\nyou to store and index BSON (that is the only native datatype in MongoDB)\nobjects and use them together with standard SQL types and PostgreSQL extension\ntypes in your SQL queries, taking full advantage of PostgreSQLs superior query\noptimization features.\n\n"}
{"speakers": ["Adam Groszer"], "description": "In a pain with ORMs? ZODB has no native queries?\n\nmongopersist provides ease of use combined with native query ability.\nFollow some simple rules and mongopersist will just work.\n\nFeatures:\n\n\ntransaction support (well, not ACID), more like undo\nwrite conflict detection\nobject caching\nquery logging, incl. traceback\nhooks for custom de/serialization\n\n\nIt is not a storage for the ZODB.\nWe\u2019ll go through the package\u2019s features using some samples.\n\nhttp://www.slideshare.net/agroszer/mongopersist-23966385", "language": "EN", "title": "mongopersist: Persisting python objects *transparently* to MongoDB", "tags": ["mongodb"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/mongopersist-persisting-python-objects-transparently-to-mongodb", "video": null, "description_md": "In a pain with ORMs? ZODB has no native queries?\n\nmongopersist provides ease of use combined with native query ability. Follow\nsome simple rules and mongopersist will just work.\n\nFeatures:\n\n  * transaction support (well, not ACID), more like undo\n  * write conflict detection\n  * object caching\n  * query logging, incl. traceback\n  * hooks for custom de/serialization\n\nIt is **not** a storage for the ZODB. We\u2019ll go through the package\u2019s features\nusing some samples.\n\nhttp://www.slideshare.net/agroszer/mongopersist-23966385\n\n"}
{"speakers": ["Michael F\u00f6tsch"], "description": "Slides are available: https://speakerdeck.com/mfoetsch/libspotify-adding-music-to-python\nSample code: https://github.com/mfoetsch/ep2013\n\n\nThis talk enables you to build cool stuff with and around music.\nLibspotify is a library that gives your application access to the Spotify music streaming service with its 20 million songs and 1 billion playlists.\n\n\nHow to use Libspotify from Python \nOther music APIs that you can use in conjunction with Spotify, like Echo Nest and Last.fm", "language": "EN", "title": "libspotify: Add music to Python", "tags": ["spotify", "music"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/libspotify-add-music-to-python", "video": null, "description_md": "  * Slides are available: <https://speakerdeck.com/mfoetsch/libspotify-adding-music-to-python>\n  * Sample code: <https://github.com/mfoetsch/ep2013>\n\nThis talk enables you to build **cool stuff** with and around music.\nLibspotify is a library that gives your application access to the **Spotify**\nmusic streaming service with its 20 million songs and 1 billion playlists.\n\n  * How to use **Libspotify** from Python \n  * Other music APIs that you can use in conjunction with Spotify, like **Echo Nest** and **Last.fm**\n\n"}
{"speakers": ["Holger Krekel"], "description": "Python still does not have a built-in installer that can install dependencies.  You have to install setuptools/distribute and easy_install/pip to use it.  Installation of packages is slow and depends on reachability of the pypi and other servers.  There is no quality control where you could e. g. see on which platforms the package successfully installs, let alone has automated tests passing.  There is not even a standard way to run tests.  However, there are many good recent developments and PEPs which i am going to discuss during my talk. The talk also walks through features of the \u201cdevpi\u201d project (very likely released by the time of EP2013).  devpi  takes a \u201cmeta tool\u201d approach and features a modern PyPI server implementation suitable for in-company usage as well as workflow commands to upload, test and install python packages, re-using existing tools and practises.", "language": "EN", "title": "devpi: driving your packaging and testing needs", "tags": ["packaging", "qa", "testing"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/devpi-driving-your-packaging-and-testing-needs", "video": null, "description_md": "Python still does not have a built-in installer that can install dependencies.\nYou have to install setuptools/distribute and easy_install/pip to use it.\nInstallation of packages is slow and depends on reachability of the pypi and\nother servers. There is no quality control where you could e. g. see on which\nplatforms the package successfully installs, let alone has automated tests\npassing. There is not even a standard way to run tests. However, there are\nmany good recent developments and PEPs which i am going to discuss during my\ntalk. The talk also walks through features of the \u201cdevpi\u201d project (very likely\nreleased by the time of EP2013). devpi takes a \u201cmeta tool\u201d approach and\nfeatures a modern PyPI server implementation suitable for in-company usage as\nwell as workflow commands to upload, test and install python packages, re-\nusing existing tools and practises.\n\n"}
{"speakers": ["Christian Theune"], "description": "batou is a service deployment utility inspired by tools like Puppet, Fabric, and other modern tools. It made a short appearance in a lightning talk and at the sprints during EP 2012. \n\nThe talk gives an overview and demonstrates with practical examples how we deploy web applications with many complex components:\n\n\nmodelling service components with Python\nmultiple environments\nmultiple platforms\ndevelopment environments\nconvergent behaviour\nremote deployments\nsecrets management (database passwords, SSL certificates, \u2026)\nno additional run-time dependencies\n\n\nI will show how the real-life requirements in our projects led us to develop a general model that integrates existing practices without building a huge stack of technologies.", "language": "EN", "title": "batou - a multi-(component|environment|platform|.*) deployment tool", "tags": ["fabric", "deploy", "devops", "integration", "hosting", "service-orchestration", "deployment", "best-practices", "webapp", "servers"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/batou-a-multi-componentenvironmentplatform-deployment-tool", "video": null, "description_md": "batou is a service deployment utility inspired by tools like Puppet, Fabric,\nand other modern tools. It made a short appearance in a lightning talk and at\nthe sprints during EP 2012.\n\nThe talk gives an overview and demonstrates with practical examples how we\ndeploy web applications with many complex components:\n\n  * modelling service components with Python\n  * multiple environments\n  * multiple platforms\n  * development environments\n  * convergent behaviour\n  * remote deployments\n  * secrets management (database passwords, SSL certificates, \u2026)\n  * no additional run-time dependencies\n\nI will show how the real-life requirements in our projects led us to develop a\ngeneral model that integrates existing practices without building a huge stack\nof technologies.\n\n"}
{"speakers": ["Roberto De Ioris"], "description": "During the 1.9 development cycle, uWSGI got high-performance websockets support. Even if lot of pure-python technologies exist for that purpose, none of them has/had the required performance to fit my company development target: browser games. Thanks to the high concurrency given by Gevent, and a couple more of uWSGI-specific features we accomplished our task. This talk will show you how to use both uWSGI and Gevent to write real time web apps (and games ;)", "language": "EN", "title": "Writing websockets applications with uWSGI and Gevent", "tags": ["websockets"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/writing-websockets-applications-with-uwsgi-and-gevent", "video": null, "description_md": "During the 1.9 development cycle, uWSGI got high-performance websockets\nsupport. Even if lot of pure-python technologies exist for that purpose, none\nof them has/had the required performance to fit my company development target:\nbrowser games. Thanks to the high concurrency given by Gevent, and a couple\nmore of uWSGI-specific features we accomplished our task. This talk will show\nyou how to use both uWSGI and Gevent to write real time web apps (and games ;)\n\n"}
{"speakers": ["Julien Thebault"], "description": "", "language": "EN", "title": "Write a Fault Tolerant web service using gevent + uwsgi", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/write-fault-tolerant-web-service-using-gevent-uwsgi", "video": null, "description_md": "\n\n"}
{"speakers": ["Roberto Polli"], "description": "While python is widely used for automating administration tasks, it\u2019s not still widely known and used between system administrators. \n\niPython is an interactive python shell that embeds bash functionalities. We\u2019ll show how to :\n\n\nreplace some bash tasks avoiding common errors\nresembling some bash behaviour\ncreate testing (nose) and monitoring scripts\nreuse existing python modules (eg.iotop, psutil, \u2026)\nuse flask to expose those scripts on HTTP\n\n\nWanna see something specific? Leave a comment! \nWe\u2019ll tune the talk agenda on the audience interests!", "language": "EN", "title": "Will ipython replace bash?", "tags": ["flask", "testing", "devops", "sysadmin", "linux", "iPython", "bash"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/will-ipython-replace-bash", "video": null, "description_md": "While python is widely used for automating administration tasks, it\u2019s not\nstill widely known and used between system administrators.\n\niPython is an interactive python shell that embeds bash functionalities. We\u2019ll\nshow how to :\n\n  * replace some bash tasks avoiding common errors\n\n  * resembling some bash behaviour\n\n  * create testing (nose) and monitoring scripts\n\n  * reuse existing python modules (eg.iotop, psutil, \u2026)\n\n  * use flask to expose those scripts on HTTP\n\nWanna see something specific? Leave a comment! We\u2019ll tune the talk agenda on\nthe audience interests!\n\n"}
{"speakers": ["Dmitry Jemerov"], "description": "", "language": "EN", "title": "Why Python Sucks", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/why-python-sucks", "video": null, "description_md": "\n\n"}
{"speakers": ["Massimo Di Pierro"], "description": "Open space session on Web2Py", "language": "EN", "title": "Web2Py", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/web2py", "video": null, "description_md": "Open space session on Web2Py\n\n"}
{"speakers": ["Alessandro Molina"], "description": "TurboGears aims at providing an open source Python web framework which is both flexible and fast to grasp, the framework provides support for pluggable applications and a rich quickstart that makes easy to rapidly prototype full featured web applications while keeping a flexible structure that makes possible to tune most of its behavior and its extensions.\n\nThe first part of the training will cover the setup of both a Python2 and Python3 web development environment with TurboGears, then a minimal project on Python3 will created to showcase web applications development on Python3. After developing a minimal webapp we will see how to use TurboGears to quickstart full featured web applications and which technologies are available on each environment.\n\nDuring the training you will learn:\n\n\nCreating Multiple python version environments with pythonbrew\nInstalling TurboGears2 on both environments\nHow to dispatch requests with ObjectDispatch\nWork with XML and Text based Template engines\nInstall the tg.devtools and use gearbox to create full featured web applications\nAccessing your models on SQLAlchemy and MongoDB\nUsing Authentication and Authorization\nImplementing Facebook Login\nTranslating your web application and get i18n ready\nUsing ToscaWidgets to create Forms\nCustomizing the TurboGears Admin\n\n\nPrerequisites\n\nA Linux system or Virtual Machine with Python 2.6 or 2.7 already installed.", "language": "EN", "title": "Web Applications on Python3 and Python2 with TurboGears", "tags": ["web", "WSGI", "sqlalchemy", "HTTP", "turbogears", "mongodb", "html", "python3"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/web-applications-with-turbogears-on-python3-and-python2", "video": null, "description_md": "TurboGears aims at providing an open source Python web framework which is both\nflexible and fast to grasp, the framework provides support for pluggable\napplications and a rich quickstart that makes easy to rapidly prototype full\nfeatured web applications while keeping a flexible structure that makes\npossible to tune most of its behavior and its extensions.\n\nThe first part of the training will cover the setup of both a Python2 and\nPython3 web development environment with TurboGears, then a minimal project on\nPython3 will created to showcase web applications development on Python3.\nAfter developing a minimal webapp we will see how to use TurboGears to\nquickstart full featured web applications and which technologies are available\non each environment.\n\nDuring the training you will learn:\n\n  * Creating Multiple python version environments with pythonbrew\n  * Installing TurboGears2 on both environments\n  * How to dispatch requests with ObjectDispatch\n  * Work with XML and Text based Template engines\n  * Install the tg.devtools and use gearbox to create full featured web applications\n  * Accessing your models on SQLAlchemy and MongoDB\n  * Using Authentication and Authorization\n  * Implementing Facebook Login\n  * Translating your web application and get i18n ready\n  * Using ToscaWidgets to create Forms\n  * Customizing the TurboGears Admin\n\nPrerequisites\n\nA Linux system or Virtual Machine with Python 2.6 or 2.7 already installed.\n\n"}
{"speakers": ["Joe Gordon"], "description": "The OpenStack Community has grown by leaps and bounds, in January 2011 there were 71 thousand lines of code and 61 developers and today there are 821 active developers, 896 thousand lines of code and over 2 thousand commits per month! According to Ohloh, \u2018this is one of the largest open-source teams in the world, and is in the top 2% of all project teams on Ohloh.\u2019\n\nKeeping development running at this scale quickly becomes challenging, especially while trying to keep development as accessible possible.  In this talk I will cover how OpenStack\u2019s code review process has evolved to work at scale.  We use many tools to streamline and automate the review process in order to reduce the burden on the reviewers. We have scaled and accelerated development by being strict and automatically enforcing our best practices.\n\nSources:\nhttps://www.ohloh.net/p/openstack\nhttps://www.ohloh.net/p/openstack/factoids#FactoidTeamSizeVeryLarge", "language": "EN", "title": "Very Large Development: How to run code review for 800+ Open Source Python Developers", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/very-large-development-how-run-code-review-800-open-source-python-developers", "video": null, "description_md": "The OpenStack Community has grown by leaps and bounds, in January 2011 there\nwere 71 thousand lines of code and 61 developers and today there are 821\nactive developers, 896 thousand lines of code and over 2 thousand commits per\nmonth! According to Ohloh, \u2018this is one of the largest open-source teams in\nthe world, and is in the top 2% of all project teams on Ohloh.\u2019\n\nKeeping development running at this scale quickly becomes challenging,\nespecially while trying to keep development as accessible possible. In this\ntalk I will cover how OpenStack\u2019s code review process has evolved to work at\nscale. We use many tools to streamline and automate the review process in\norder to reduce the burden on the reviewers. We have scaled and accelerated\ndevelopment by being strict and automatically enforcing our best practices.\n\nSources: https://www.ohloh.net/p/openstack\nhttps://www.ohloh.net/p/openstack/factoids#FactoidTeamSizeVeryLarge\n\n"}
{"speakers": ["Tarek Ziad\u00e9"], "description": "= Presentation =\n\nVaurien is basically a Chaos Monkey for your TCP connections. Vaurien acts as a proxy between your web application and any backend. \n\nYou can use it in your functional tests or even on a real deployment, to slow down/break/error out the requests and responses between your web application and a back end like LDAP, MySQL, Memcache, Redis and so on.\n\nThis is very useful to check how your application behaves when something is wrong with your backend. So instead of having to deal with it live in production - just have a test continuously testing various scenarii.\n\nVaurien is built in Python and you can write your own\n\n= Agenda =\n\nAfter explaining a catastrophic production push at Mozilla, I will describe how Vaurien can be used to continuously test how a web app behaves when a back end starts to have issues, and how people can write their own plugins to simulate realistic failures that may happen in their environments.\n\nThe target audience is web developers and sysadmins that want to deliver more robust applications\n\nNB - This presentation was made at the last FOSDEM - you can check the slides here: http://blog.ziade.org/slides/fosdem2013/vaurien.html - it will be quite similar but with the newest things we\u2019ll have", "language": "EN", "title": "Vaurien The Chaos TCP Proxy", "tags": ["qa", "web", "sysadmin", "testing"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/vaurien-the-chaos-tcp-proxy", "video": null, "description_md": "= Presentation =\n\nVaurien is basically a _Chaos Monkey_ for your TCP connections. Vaurien acts\nas a proxy between your web application and any backend.\n\nYou can use it in your functional tests or even on a real deployment, to slow\ndown/break/error out the requests and responses between your web application\nand a back end like LDAP, MySQL, Memcache, Redis and so on.\n\nThis is very useful to check how your application behaves when something is\nwrong with your backend. So instead of having to deal with it live in\nproduction - just have a test continuously testing various scenarii.\n\nVaurien is built in Python and you can write your own\n\n= Agenda =\n\nAfter explaining a catastrophic production push at Mozilla, I will describe\nhow Vaurien can be used to continuously test how a web app behaves when a back\nend starts to have issues, and how people can write their own plugins to\nsimulate realistic failures that may happen in their environments.\n\nThe target audience is web developers and sysadmins that want to deliver more\nrobust applications\n\nNB - This presentation was made at the last FOSDEM - you can check the slides\nhere: http://blog.ziade.org/slides/fosdem2013/vaurien.html - it will be quite\nsimilar but with the newest things we\u2019ll have\n\n"}
{"speakers": ["Anders Lehmann"], "description": "The talk is about the experiences I have had with using iPython\u2019s excellent\nNotebook to teach physics to first year engineering students. The iPython\nNotebook enables an engaging and interactive form of teaching. Engineering\nstudents sometimes find the physical concepts being taught to be very abstract\nand challenging. By using the Notebook to interactively visualize the\nconcepts helps in improving the understanding for the students. As an added benefit the students acquire a basic understanding of Python, NumPy and Matplotlib.\n\nIn the talk I will show a number of examples of how to use the notebook system\nin the classroom.", "language": "EN", "title": "Using iPython Notebook in the Classroom", "tags": ["Pedagogical learning", "iPython", "education", "physics", "Learning environment", "interactive"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/using-ipython-notebook-in-the-classroom", "video": null, "description_md": "The talk is about the experiences I have had with using iPython\u2019s excellent\nNotebook to teach physics to first year engineering students. The iPython\nNotebook enables an engaging and interactive form of teaching. Engineering\nstudents sometimes find the physical concepts being taught to be very abstract\nand challenging. By using the Notebook to interactively visualize the concepts\nhelps in improving the understanding for the students. As an added benefit the\nstudents acquire a basic understanding of Python, NumPy and Matplotlib.\n\nIn the talk I will show a number of examples of how to use the notebook system\nin the classroom.\n\n"}
{"speakers": ["Fredrik H\u00e5\u00e5rd"], "description": "Note: please have Python 3.2+ installed on your laptop, an offline copy of the standard library docs can also be useful.\n\nThere are a lot of things that are possible to do with Python, but are generally considered bad form (as in other languages). When you ask about them, more seasoned developers will tell you that you are asking the wrong questions, solving the wrong problems, and generally should be content using [insert library/framework here] instead of reinventing the wheel.\n\nAt some point in your developer career, you need to decide for yourself if you want to be forever content using other people\u2019s magical implementations, or if you want to take a shot at looking behind the smoke and mirrors and try to do better yourself.\n\nThis training session aims to help you understand some of the Python and standard library features that allow frameworks to do their magic, and do it in a way so that you walk away with your very own implementation of a sample framework to cannibalize for ideas.\n\nMuch of the content will be similar to what was included in the tutorial I did on advanced standard library (mis)usage found here, but this session will have a project-like focus of building exercise upon exercise.\n\nSpecific parts that will be included are, for example, plugin discovery, hot swapping code, and REPL access to running processes.", "language": "EN", "title": "User to framework author in four hours", "tags": ["best-practices", "interactive", "python3", "framework"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/user-to-framework-author-in-four-hours", "video": null, "description_md": "Note: please have Python 3.2+ installed on your laptop, an offline copy of the\nstandard library docs can also be useful.\n\nThere are a lot of things that are possible to do with Python, but are\ngenerally considered bad form (as in other languages). When you ask about\nthem, more seasoned developers will tell you that you are asking the wrong\nquestions, solving the wrong problems, and generally should be content using\n[insert library/framework here] instead of reinventing the wheel.\n\nAt some point in your developer career, you need to decide for yourself if you\nwant to be forever content using other people\u2019s magical implementations, or if\nyou want to take a shot at looking behind the smoke and mirrors and try to do\nbetter yourself.\n\nThis training session aims to help you understand some of the Python and\nstandard library features that allow frameworks to do their magic, and do it\nin a way so that you walk away with your very own implementation of a sample\nframework to cannibalize for ideas.\n\nMuch of the content will be similar to what was included in the tutorial I did\non advanced standard library (mis)usage found\n[here](https://ep2013.europython.eu/conference/talks/dark-corners-of-the-\nstandard-library), but this session will have a project-like focus of building\nexercise upon exercise.\n\nSpecific parts that will be included are, for example, plugin discovery, hot\nswapping code, and REPL access to running processes.\n\n"}
{"speakers": ["Jacob Hall\u00e9n"], "description": "Writing automated tests for your code is a requirement in modern software development and there lots of tools for collecting and running tests. There are also lots of instructions for how to use the tools.\n\nHowever, there are very few places where you can find out how to write your code so that it is testable and how to write meaningful tests.\n\nThis talk will focus on best practices for writing tests and you should come away from it with a better understanding of what kinds of test to write, when to write them and how to think about testing problems.\n\nThe talk is designed for beginner coders and people who have recently started to learn Python. We will be using the Python unittest framework and py.test in the examples.", "language": "EN", "title": "Testing for beginners", "tags": ["quality-assurance", "testing", "principles"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/testing-for-beginners", "video": null, "description_md": "Writing automated tests for your code is a requirement in modern software\ndevelopment and there lots of tools for collecting and running tests. There\nare also lots of instructions for how to use the tools.\n\nHowever, there are very few places where you can find out how to write your\ncode so that it is testable and how to write meaningful tests.\n\nThis talk will focus on best practices for writing tests and you should come\naway from it with a better understanding of what kinds of test to write, when\nto write them and how to think about testing problems.\n\nThe talk is designed for beginner coders and people who have recently started\nto learn Python. We will be using the Python unittest framework and py.test in\nthe examples.\n\n"}
{"speakers": ["Andreas Pelme"], "description": "Django\u2019s builtin testing tools are sometimes a bit cumbersome. This talk will show how to get started with testing in Django with pytest and how to make testing easier. Expect a lot of examples and general Django testing best practices.\n\nA common problem with Django\u2019s test runner is that it is hard to specify a subset of tests to run. Another issue can be the long time it takes to create database tables before each test run. Solutions to these and other common problems will be presented.\n\nThe talk will not be a tutorial of pytest itself, but it will show how some powerful features of pytest can help when writing Django tests. Some previous exposure to Django is recommended, but previous experience writing tests is not required. A couple of more advanced concepts will also be showed, which can be useful for people already into testing.", "language": "EN", "title": "Testing Django applications with pytest", "tags": ["django", "testing", "tdd"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/testing-django-applications-with-pytest", "video": null, "description_md": "Django\u2019s builtin testing tools are sometimes a bit cumbersome. This talk will\nshow how to get started with testing in Django with pytest and how to make\ntesting easier. Expect a lot of examples and general Django testing best\npractices.\n\nA common problem with Django\u2019s test runner is that it is hard to specify a\nsubset of tests to run. Another issue can be the long time it takes to create\ndatabase tables before each test run. Solutions to these and other common\nproblems will be presented.\n\nThe talk will not be a tutorial of pytest itself, but it will show how some\npowerful features of pytest can help when writing Django tests. Some previous\nexposure to Django is recommended, but previous experience writing tests is\nnot required. A couple of more advanced concepts will also be showed, which\ncan be useful for people already into testing.\n\n"}
{"speakers": ["Harry Percival"], "description": "Want to get into unit testing but not sure where to start?  Want to find out about Selenium and browser automation?  Want to talk about the practicalities of Test-Driven-Development?  Come along, ask questions, share your experience and horror stories\u2026\n\nI\u2019ll be there, I\u2019ll try and recruit a couple of my wiser, battle-scared colleagues from PythonAnywhere, and no doubt others with much more experience will come along too, to help point out all our mistakes\u2026", "language": "EN", "title": "Testing / TDD helpdesk", "tags": ["refactoring", "XP", "testing", "selenium", "tdd"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/testing-tdd-helpdesk", "video": null, "description_md": "Want to get into unit testing but not sure where to start? Want to find out\nabout Selenium and browser automation? Want to talk about the practicalities\nof Test-Driven-Development? Come along, ask questions, share your experience\nand horror stories\u2026\n\nI\u2019ll be there, I\u2019ll try and recruit a couple of my wiser, battle-scared\ncolleagues from PythonAnywhere, and no doubt others with much more experience\nwill come along too, to help point out all our mistakes\u2026\n\n"}
{"speakers": ["Petr Viktorin"], "description": "Even in the age of iPhones and web apps, text-based interfaces are still important.\n\nThis talk will briefly recount the history (and historical baggage) of the terminal, answer why text UIs are relevant, go through some tips on how to build them, and introduce the (mostly) awesome tools to do so: argparse, docopt; termcolor, colorama, blessings, curses, urwid. I\u2019ll concentrate on tips to choose and use the tools effectively, from deciding whether to build a text UI at all, to details from pipe friendliness to mouse input.\n\nThe talk should be accessible to any Python coder who\u2019s ever piped two programs together in a shell. Familiarity with text-based tools like Git, vi, or Midnight Commander will make you right at home.\n\nThe accompanying slides will run in a terminal emulator.", "language": "EN", "title": "Terminals, command lines, and text interfaces", "tags": ["tui", "urwid", "ui", "unix"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/terminals-command-lines-and-text-interfaces", "video": null, "description_md": "Even in the age of iPhones and web apps, text-based interfaces are still\nimportant.\n\nThis talk will briefly recount the history (and historical baggage) of the\nterminal, answer why text UIs are relevant, go through some tips on how to\nbuild them, and introduce the (mostly) awesome tools to do so: argparse,\ndocopt; termcolor, colorama, blessings, curses, urwid. I\u2019ll concentrate on\ntips to choose and use the tools effectively, from deciding whether to build a\ntext UI at all, to details from pipe friendliness to mouse input.\n\nThe talk should be accessible to any Python coder who\u2019s ever piped two\nprograms together in a shell. Familiarity with text-based tools like Git, vi,\nor Midnight Commander will make you right at home.\n\nThe accompanying slides will run in a terminal emulator.\n\n"}
{"speakers": ["Floris Bruynooghe"], "description": "As writing blocking network code is often seen as more natural then\nthe asynchronous equivalent with callbacks greenlets have become a\npopular approach to network programming.  However greenlet based\nframeworks have had mixed reactions criticising the common need for\nmonkeypatching and limitations of userland scheduling associated with\ngreenlets.\n\nThis talk will give an insight in how the eventlet framework works and\nwhat this means for the userland scheduling.  It will show how you can\navoid monkeypatching, discussing the benefits and limitations.  Lastly\nit will explain how to avoid the limitations of userland switching\nboth in python code and when calling blocking C code.", "language": "EN", "title": "Taming greenlets using eventlet", "tags": ["greenlet", "async", "networking", "socket", "eventlet"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/taming-greenlets-using-eventlet", "video": null, "description_md": "As writing blocking network code is often seen as more natural then the\nasynchronous equivalent with callbacks greenlets have become a popular\napproach to network programming. However greenlet based frameworks have had\nmixed reactions criticising the common need for monkeypatching and limitations\nof userland scheduling associated with greenlets.\n\nThis talk will give an insight in how the eventlet framework works and what\nthis means for the userland scheduling. It will show how you can avoid\nmonkeypatching, discussing the benefits and limitations. Lastly it will\nexplain how to avoid the limitations of userland switching both in python code\nand when calling blocking C code.\n\n"}
{"speakers": ["Jyrki Pulliainen"], "description": "Concurrency is hard. Consistency in distributed systems is hard. And then the whole thing should be highly-available and error resilient.\n\nFear not, there are good news: There exists an awesome tool called ZooKeeper to help you with this. There even exists a plethora of Python libraries for it, but how to know what to use and how?\n\nThis talk will walk you through ZooKeeper and how to use it with Python. We\u2019ll be focusing on what I think is the most prominient ZooKeeper library out there for Python: Kazoo.\n\nYou\u2019ll see how to do things in ZooKeeper and how to implement them using Kazoo. We\u2019ll also peek in to the recipes Kazoo offers, and if we have enough time, touch a real life application we\u2019ve used Kazoo and ZooKeeper to build at Spotify.", "language": "EN", "title": "Taming Pythons with ZooKeeper", "tags": [], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/taming-pythons-zookeeper", "video": null, "description_md": "Concurrency is hard. Consistency in distributed systems is hard. And then the\nwhole thing should be highly-available and error resilient.\n\nFear not, there are good news: There exists an awesome tool called ZooKeeper\nto help you with this. There even exists a plethora of Python libraries for\nit, but how to know what to use and how?\n\nThis talk will walk you through ZooKeeper and how to use it with Python. We\u2019ll\nbe focusing on what I think is the most prominient ZooKeeper library out there\nfor Python: Kazoo.\n\nYou\u2019ll see how to do things in ZooKeeper and how to implement them using\nKazoo. We\u2019ll also peek in to the recipes Kazoo offers, and if we have enough\ntime, touch a real life application we\u2019ve used Kazoo and ZooKeeper to build at\nSpotify.\n\n"}
{"speakers": ["Andrew Mleczko"], "description": "Working with agile methodologies is not a choice any more - it\u2019s rather a requirement. Short deadlines, new tools and fancy APIs to integrate with, force us to be more efficient.For this reason we have made Penelope (getpenelope.github.com) and we made it as agile as possible.\nIn my talk I will tell you how we have integrated Trac so you can start loving it again.\nHow you can squeeze the best from GoogleDrive and stop worrying that your project documentation is lost. Finally a sneak peek at the sophisticated reports that will answer most of your company\u2019s questions. Brought to you together with Pyramid and Twitter Bootstrap.", "language": "EN", "title": "Take Back Control Over Your Work. Agile Tips For Python Developers.", "tags": ["web", "pyramid", "postgresql", "open-source", "trac", "framework", "teamwork"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/take-back-control-over-your-work-agile-tips-for-python-developers", "video": null, "description_md": "Working with agile methodologies is not a choice any more - it\u2019s rather a\nrequirement. Short deadlines, new tools and fancy APIs to integrate with,\nforce us to be more efficient.For this reason we have made Penelope\n(getpenelope.github.com) and we made it as agile as possible. In my talk I\nwill tell you how we have integrated Trac so you can start loving it again.\nHow you can squeeze the best from GoogleDrive and stop worrying that your\nproject documentation is lost. Finally a sneak peek at the sophisticated\nreports that will answer most of your company\u2019s questions. Brought to you\ntogether with Pyramid and Twitter Bootstrap.\n\n"}
{"speakers": ["Rob Collins"], "description": "Testing anti-patterns: the things to avoid!\n\nImagine someone who really disliked testing. This is what they might say\u2026\n\nThere is much talk of the need for agile development, supported by tests. Agile is great. No tasks set in advance, no Microsoft Project plans to feed with wild guesses. But \u201csupported by tests\u201d? Forget political correctness, let me say it now: \n\n\n  Tests just slow us down.\n\n\nSo much time and money has been wasted. Testing is one of those \u201csadder investments\"**. In this talk, I will explain why most testing should be shunned. \n\nFirst, I will reluctantly detail the supposed best practices for test-driven development, behaviour-driven development, hiding-to-nothing development, test coverage, white-box testing, pink-box testing, A-B testing, integration testing, not-my-fault injection, regression testing, smoke testing, performance testing, usability testi\u2026 Oh, I give up. There are hundreds of ways to waste good development time!\n\nThese will all be a mouth-cleansing starter in preparation for the main course: Test-Driven Madness (or TDM, pronounced: \u201ctedium\u201d). This new technique guarantees \n\n\nrapid development\njob security. \n\n\nWriting tests takes time: some developers write more test code than functional code. Clearly this doubles the work load and slows down development. Surely testing is the job of the QA department? Unit tests are particularly pointless, since they duplicate what is covered by integration tests. And the number of integration tests can commonly be reduced to just one large test per requirement. If that passes, then all the code must be working. So let\u2019s quickly move on to implement the next feature!\n\nNot writing tests avoids false positives. Look at the trouble that testing caused for food retailers. Do you really want to discover the unimportant small percentage of horsemeat code that might be hidden in your modules, implicitly labelled as lines of good Python? Better you don\u2019t know.\n\nAnd testing is morally wrong. For many years, people have campaigned against testing on animals. They say it\u2019s cruel, unnecessary, and animals don\u2019t have a choice. In software development, animal testing hasn\u2019t so far been a big problem. But now we have a chance to stop the cruelty of testing on developers, who think they have no choice. You can help these poor sufferers, by joining TDM!\n\nFor the sweet trolley of the meal, I will show you hints and tips you wouldn\u2019t want to miss. There are workarounds for many problems. For instance, we will cover the situation when you have some intermittent failures in your code, looking at undervalued techniques in Python for eliminating errors, such as\n\ntry:\n    do_something_raising_an_intermittent_exception()\nexcept:\n    pass\n\n\nManagers need features. They can enthusiastically put a \u201cNew Feature\u201d up on the company web site. They\u2019re not going to get extra customers from putting \u201cReliable New Feature\u201d. It\u2019s the features that sell a product, and the company needs to make sales to stay in business. Go with the flow: vapourware is king. Reliability can catch up later, preferably when customers are too committed to the product features to be able to back out.\n\nMotivation\n\nLack of testing in TDM is closely coupled with lack of documentation. Use of Sphinx and other such \u2018cool\u2019 tools are really a waste of productive time when you could be adding new features. You know how your code works, and if there is minimal documentation, another advantage is that you will always be the one required to make any changes. Like comprehensive tests, documentation just makes it easier for other developers to take over and put you out of a job. Keep it brief, ignore PEP8, and use single-character global variable names wherever possible. Less typing == more features. Obviously.\n\nIn summary, come along and find out why writing tests is such a bad idea. Instead, use TDM, the complete meal, because it works. Mostly. \n\nChange your life with coding TDM, because testing is what customers are for!\n\n============================================\n\nVisit http://www.testdrivenmadness.com to find out about your nearest TDM course (for the low price of $1200/day, courtesy of subsidies from my sponsors, <insert-company-name>, the proud inventors of test-free software.) \n\nAll TDM course participants will be eligible for an IT NERD VEST** with a slogan chosen from:\n\n\nI love TDM\nYou nit! Testing??\nBreathe again \u2014 test-free zone.\n\n\n**(anagram)", "language": "EN", "title": "TDM: Test-Driven Madness", "tags": ["bdd", "XP", "testing", "tdm", "tdd"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/tdm-test-driven-madness", "video": null, "description_md": "**Testing anti-patterns**: the things to avoid!\n\n_Imagine someone who really disliked testing. This is what they might say\u2026_\n\nThere is much talk of the need for agile development, supported by tests.\nAgile is great. No tasks set in advance, no Microsoft Project plans to feed\nwith wild guesses. But \u201csupported by tests\u201d? Forget political correctness, let\nme say it now:\n\n> **Tests just slow us down.**\n\nSo much time and money has been wasted. Testing is one of those \u201csadder\ninvestments\"**. In this talk, I will explain why most testing should be\nshunned.\n\nFirst, I will reluctantly detail the supposed best practices for test-driven\ndevelopment, behaviour-driven development, hiding-to-nothing development, test\ncoverage, white-box testing, pink-box testing, A-B testing, integration\ntesting, not-my-fault injection, regression testing, smoke testing,\nperformance testing, usability testi\u2026 Oh, I give up. There are hundreds of\nways to waste good development time!\n\nThese will all be a mouth-cleansing starter in preparation for the main\ncourse: _Test-Driven Madness_ (or TDM, pronounced: \u201ctedium\u201d). This new\ntechnique guarantees\n\n  * rapid development\n  * job security. \n\nWriting tests takes time: some developers write more test code than functional\ncode. Clearly this doubles the work load and slows down development. Surely\ntesting is the job of the QA department? Unit tests are particularly\npointless, since they duplicate what is covered by integration tests. And the\nnumber of integration tests can commonly be reduced to just one large test per\nrequirement. If that passes, then all the code must be working. So let\u2019s\nquickly move on to implement the next feature!\n\nNot writing tests avoids false positives. Look at the trouble that testing\ncaused for food retailers. Do you really want to discover the unimportant\nsmall percentage of **horsemeat code** that might be hidden in your modules,\nimplicitly labelled as lines of good Python? Better you don\u2019t know.\n\nAnd **testing is morally wrong**. For many years, people have campaigned\nagainst testing on animals. They say it\u2019s cruel, unnecessary, and animals\ndon\u2019t have a choice. In software development, animal testing hasn\u2019t so far\nbeen a big problem. But now we have a chance to stop the cruelty of testing on\ndevelopers, who think they have no choice. You can help these poor sufferers,\nby joining TDM!\n\nFor the sweet trolley of the meal, I will show you hints and tips you wouldn\u2019t\nwant to miss. There are workarounds for many problems. For instance, we will\ncover the situation when you have some **intermittent failures** in your code,\nlooking at undervalued techniques in Python for eliminating errors, such as\n\n    \n    \n    try:\n        do_something_raising_an_intermittent_exception()\n    except:\n        pass\n    \n\nManagers need features. They can enthusiastically put a \u201cNew Feature\u201d up on\nthe company web site. They\u2019re not going to get extra customers from putting\n\u201cReliable New Feature\u201d. It\u2019s the features that sell a product, and the company\nneeds to make sales to stay in business. Go with the flow: vapourware is king.\n**Reliability can catch up later**, preferably when customers are too\ncommitted to the product features to be able to back out.\n\n**Motivation**\n\nLack of testing in TDM is closely coupled with lack of documentation. Use of\nSphinx and other such \u2018cool\u2019 tools are really a waste of productive time when\nyou could be adding new features. You know how your code works, and if there\nis minimal documentation, another advantage is that you will always be the one\nrequired to make any changes. Like comprehensive tests, documentation just\nmakes it easier for other developers to take over and put you out of a job.\nKeep it brief, ignore PEP8, and use single-character global variable names\nwherever possible. Less typing == more features. Obviously.\n\nIn summary, come along and find out why writing tests is such a bad idea.\nInstead, use TDM, the complete meal, because it works. Mostly.\n\nChange your life with coding TDM, because _testing is what customers are for!_\n\n============================================\n\nVisit http://www.testdrivenmadness.com to find out about your nearest TDM\ncourse (for the low price of $1200/day, courtesy of subsidies from my\nsponsors, _&lt;insert-company-name&gt;_, the proud inventors of test-free\nsoftware.)\n\nAll TDM course participants will be eligible for an IT NERD VEST** with a\nslogan chosen from:\n\n  * I love TDM\n  * You nit! Testing??\n  * Breathe again \u2014 test-free zone.\n\n**(anagram)\n\n"}
{"speakers": ["Andrea Crotti"], "description": "This talk will be about Test Driven Development, what it is, why you\nshould care about it and how to do it in Python.\n\nI will talk about unit testing, mocking and do a lot of live coding\nbasing on a talk which I gave @fosdem 2013, which I will integrate\nwith new interesting material.\n\nThe source code for the slides is at:\nhttps://github.com/AndreaCrotti/ep2013/tree/master/tdd\n\nand I\u2019ve attached the HTML produced that I used for the talk.", "language": "EN", "title": "TDD from scratch", "tags": ["best-practices", "testing", "tdd"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/tdd-from-scratch", "video": null, "description_md": "This talk will be about Test Driven Development, what it is, why you should\ncare about it and how to do it in Python.\n\nI will talk about unit testing, mocking and do a lot of live coding basing on\na talk which I gave @fosdem 2013, which I will integrate with new interesting\nmaterial.\n\nThe source code for the slides is at:\nhttps://github.com/AndreaCrotti/ep2013/tree/master/tdd\n\nand I\u2019ve attached the HTML produced that I used for the talk.\n\n"}
{"speakers": ["Andrey Vlasovskikh"], "description": "Static analysis is a method of making statements about the program based on its source code without actually running it. We will look at static analysis tools available for Python (PyLint, PyFlakes, Pep8, inspections in IDEs) and discuss what kinds of problems they can discover automatically in your source code. These tools can be used on a daily basis in order to reduce the amount of run-time errors and exceptions, and to discover code smells and code style discrepancies.\n\nWe will also look at how these tools are implemented internally, and walk through the steps they use to analyze Python code: lexing, parsing, reference resolution, type inference and so on. We will also discuss the problems that are caused by the dynamic nature of Python and the strategies used by static analysis tools for dealing with it.", "language": "EN", "title": "Static analysis of Python", "tags": ["text-editors", "static-analysis", "productivity"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/static-analysis-of-python", "video": null, "description_md": "Static analysis is a method of making statements about the program based on\nits source code without actually running it. We will look at static analysis\ntools available for Python (PyLint, PyFlakes, Pep8, inspections in IDEs) and\ndiscuss what kinds of problems they can discover automatically in your source\ncode. These tools can be used on a daily basis in order to reduce the amount\nof run-time errors and exceptions, and to discover code smells and code style\ndiscrepancies.\n\nWe will also look at how these tools are implemented internally, and walk\nthrough the steps they use to analyze Python code: lexing, parsing, reference\nresolution, type inference and so on. We will also discuss the problems that\nare caused by the dynamic nature of Python and the strategies used by static\nanalysis tools for dealing with it.\n\n"}
{"speakers": ["Emanuele Palazzetti"], "description": "SPDY \u00e8 un protocollo alternativo ad HTTP in grado di rendere le nostre applicazioni piuveloci ed intrinsecamente piu sicure. Data l\u2019esigenza comune di velocizzare il web, diversi applicativi server offrono ad oggi il supporto a SPDY out of the box, caratteristica che purtroppo non possiamo sfruttare se la nostra applicazione comunica con il protocollo WSGI.\n\nUna possibile soluzione a questo problema \u00e8 quella di avvalerci del web container Jetty, lo stato dell\u2019arte per quanto riguarda il supporto a SPDY. Mostreremo come sia possibile, grazie all\u2019interprete Jython, servire un\u2019applicazione Django sfruttando il protocollo SPDY ed avvalendoci del sistema SPDY push per trasferire file statici al client ad una velocit\u00e0 impressionante.", "language": "IT", "title": "Speed up your Django apps with Jython and SPDY", "tags": ["spdy", "jython", "jetty", "django"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/speed-up-your-django-apps-with-jython-and-spdy", "video": null, "description_md": "SPDY \u00e8 un protocollo alternativo ad HTTP in grado di rendere le nostre\napplicazioni piu`veloci ed intrinsecamente piu` sicure. Data l\u2019esigenza comune\ndi velocizzare il web, diversi applicativi server offrono ad oggi il supporto\na SPDY out of the box, caratteristica che purtroppo non possiamo sfruttare se\nla nostra applicazione comunica con il protocollo WSGI.\n\nUna possibile soluzione a questo problema \u00e8 quella di avvalerci del web\ncontainer Jetty, lo stato dell\u2019arte per quanto riguarda il supporto a SPDY.\nMostreremo come sia possibile, grazie all\u2019interprete Jython, servire\nun\u2019applicazione Django sfruttando il protocollo SPDY ed avvalendoci del\nsistema SPDY push per trasferire file statici al client ad una velocit\u00e0\nimpressionante.\n\n"}
{"speakers": ["Alessandro Amici"], "description": "Coding contests have been historically the playground of C++ and JAVA programmers, but with the advent of competitions like the Google Code Jam and the Facebook Hacker Cup many more languages, including Python, are making to the popularity charts with good results.\n\nIn the last couple of years the PyPy interpreter has given a serious boost to the competitiveness of Python thanks to its optimizing Just-In-Time compiler that makes tight loops and low-level memory management not just feasible but even close in efficiency to C++.\n\nCoding for extreme performance with PyPy feels quite different from usual Python coding, but several general lessons can be learned about speed and memory efficiency, that can be applied to real world scenarios, especially in numerical and scientific computing.\n\nThe program of the training is:\n\n\nset up a competition-ready PyPy environment\ninstall competition grade libraries: NumPyPy, NeworkX, SciPy, ParallelPython\npresent the algorithmic solutions for a few Qualification Round and Round 1 problems\npresent notable JIT friendly implementation patterns\nhands-on implementation of the solutions for the presented problems\nlessons learned.\n\n\nIt is important for prospective attendees to familiarise with the Google Code Jam platform and learn how to submit the solutions to problems before the start of the training.", "language": "EN", "title": "Solving Google Code Jam problems with PyPy", "tags": ["numpy", "JIT", "networkx", "performance", "scientific-computing", "pypy"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/solving-google-code-jam-problems-with-pypy", "video": null, "description_md": "Coding contests have been historically the playground of C++ and JAVA\nprogrammers, but with the advent of competitions like the Google Code Jam and\nthe Facebook Hacker Cup many more languages, including Python, are making to\nthe popularity charts with good results.\n\nIn the last couple of years the PyPy interpreter has given a serious boost to\nthe competitiveness of Python thanks to its optimizing Just-In-Time compiler\nthat makes tight loops and low-level memory management not just feasible but\neven close in efficiency to C++.\n\nCoding for extreme performance with PyPy feels quite different from usual\nPython coding, but several general lessons can be learned about speed and\nmemory efficiency, that can be applied to real world scenarios, especially in\nnumerical and scientific computing.\n\nThe program of the training is:\n\n  * set up a competition-ready PyPy environment\n  * install competition grade libraries: NumPyPy, NeworkX, SciPy, ParallelPython\n  * present the algorithmic solutions for a few Qualification Round and Round 1 problems\n  * present notable JIT friendly implementation patterns\n  * hands-on implementation of the solutions for the presented problems\n  * lessons learned.\n\nIt is important for prospective attendees to familiarise with the [Google Code\nJam platform](http://code.google.com/codejam/) and learn how to submit the\nsolutions to problems before the start of the training.\n\n"}
{"speakers": ["Hynek Schlawack"], "description": "Do you dread the moment when your shiny new application is \u201cready for production\u201d; except it isn\u2019t because deploying is hard? How about moving existing apps or deploying one app to many servers? I\u2019ll take you on a trip of dos and don\u2019ts of deploying Python apps on UNIXy systems. Afterwards, you will be able to find the best way to deploy your code without repeating the mistakes of many before you.\n\nIn order to achieve that, I would like to show you how we \u2013 a German web hosting company and domain registrar \u2013 deploy our numerous Python applications on UNIX-based systems. We need our deployments to be fast, reliable and predictable. And that\u2019s what we achieved. Due to the limited size of our tech staff, I\u2019m a true DevOp: I develop applications but also have to make sure they deploy and that they don\u2019t make the life of the operation guys miserable. My knowledge and experiences are fresh from the trenches as an infrastructure engineer, not just some theoretical, read-up stuff.\n\nThis talk will not be about tuning nginx for maximum performance or making Django TrueScale. It\u2019s about solid, repeatable and proven ways to deploy your Python applications, no matter which technology you use. At the end of my talk, you should know what not to do and where to look for things you should do.\n\nPlease note that this is the same talk/proposal I\u2019ve presented at PyCon in March 2013. Because I\u2019m shameless and because believe the topic is valuable. Since I\u2019ve got enormous positive feedback, I\u2019m positive you\u2019ll enjoy it just the same! And because I have more time, I will be able to share even more experiences with you.", "language": "EN", "title": "Solid Python Application Deployments For Everybody", "tags": ["best-practices", "project-management", "principles", "automation", "software-engineering"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/solid-python-application-deployments-for-everybody", "video": null, "description_md": "Do you dread the moment when your shiny new application is \u201cready for\nproduction\u201d; except it isn\u2019t because deploying is hard? How about moving\nexisting apps or deploying one app to many servers? I\u2019ll take you on a trip of\ndos and don\u2019ts of deploying Python apps on UNIXy systems. Afterwards, you will\nbe able to find the best way to deploy your code without repeating the\nmistakes of many before you.\n\nIn order to achieve that, I would like to show you how we \u2013 a German web\nhosting company and domain registrar \u2013 deploy our numerous Python applications\non UNIX-based systems. We need our deployments to be fast, reliable and\npredictable. And that\u2019s what we achieved. Due to the limited size of our tech\nstaff, I\u2019m a true DevOp: I develop applications but also have to make sure\nthey deploy and that they don\u2019t make the life of the operation guys miserable.\nMy knowledge and experiences are fresh from the trenches as an infrastructure\nengineer, not just some theoretical, read-up stuff.\n\nThis talk will **not** be about tuning nginx for maximum performance or making\nDjango TrueScale. It\u2019s about solid, repeatable and proven ways to deploy your\nPython applications, no matter which technology you use. At the end of my\ntalk, you should know what not to do and where to look for things you should\ndo.\n\nPlease note that this is the same talk/proposal I\u2019ve presented at PyCon in\nMarch 2013. Because I\u2019m shameless and because believe the topic is valuable.\nSince I\u2019ve got enormous positive feedback, I\u2019m positive you\u2019ll enjoy it just\nthe same! And because I have more time, I will be able to share even more\nexperiences with you.\n\n"}
{"speakers": ["Lynn Root"], "description": "Many want to learn to code, and many choose Python as a first language. You direct them to Learn Python the Hard Way, or Dive into Python. Great! But now what? I will present 5 digestible projects to gradually progress the Python learner from near drowning to a decent swimmer. The goal is to have new coders feeling accomplished and to continuing learning.\n\nIn this talk, I will present to you 5 projects that have been tried and tested on new folks themselves. These projects progress from just after someone who worked through \u201cLearn Python the Hard Way\u201d, \u201cDive into Python\u201d or a similar workbook, to contributing to open source, understanding the undertaking of a website, and new tools to make one\u2019s computing life fun and easier.\n\nAttendees will leave with the knowledge to push their new coder friends\u2019 skills from drowning to swimming a lap or two, complete with resources to find sample code & projects.", "language": "EN", "title": "Sink or swim: 5 life jackets to throw to New Coders", "tags": ["tutorials"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/sink-or-swim-5-life-jackets-to-throw-to-new-coders", "video": null, "description_md": "Many want to learn to code, and many choose Python as a first language. You\ndirect them to Learn Python the Hard Way, or Dive into Python. Great! But now\nwhat? I will present 5 digestible projects to gradually progress the Python\nlearner from near drowning to a decent swimmer. The goal is to have new coders\nfeeling accomplished and to continuing learning.\n\nIn this talk, I will present to you 5 projects that have been tried and tested\non new folks themselves. These projects progress from just after someone who\nworked through \u201cLearn Python the Hard Way\u201d, \u201cDive into Python\u201d or a similar\nworkbook, to contributing to open source, understanding the undertaking of a\nwebsite, and new tools to make one\u2019s computing life fun and easier.\n\nAttendees will leave with the knowledge to push their new coder friends\u2019\nskills from drowning to swimming a lap or two, complete with resources to find\nsample code &amp; projects.\n\n"}
{"speakers": ["Aureliana Barghini"], "description": "In questa presentazione descriviamo la componente geometrica di un simulatore di immagini da satellite; in sostanza si tratta di un sistema che restituisce dove si trova (posizione) e dove guarda (assetto) un satellite a partire da opportune informazioni di input. La soluzione deve essere sufficientemente flessibile da accettare leggi orarie arbitrarie per poter simulare il movimento di satelliti differenti.\n\nPer questo motivo si \u00e8 scelto di ultilizzare la libreria di calcolo simbolico SymPy per il calcolo dell\u2019orientamento del satellite definito da funzioni del tempo generiche (pitch, roll, yaw), e la libreria astronomica PyEphem il calcolo della posizione orbitale.\n\nIntegrando PyEphem con SymPy \u00e8 stato possibile sviluppare un sistema dinamico duttile e di facile utilizzo, capace di gestire facilmente molteplici sistemi di riferimento mobili, posizioni e direzioni.", "language": "IT", "title": "Simulare l'assetto e l'orbita di un satellite con SymPy e PyEphem", "tags": ["Sympy", "scientific-computing", "earth-obeservation", "PyEphem"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/simulazione-dellassetto-e-dellorbita-di-un-satellite-con-sympy-e-pyephem", "video": null, "description_md": "In questa presentazione descriviamo la componente geometrica di un simulatore\ndi immagini da satellite; in sostanza si tratta di un sistema che restituisce\ndove si trova (posizione) e dove guarda (assetto) un satellite a partire da\nopportune informazioni di input. La soluzione deve essere sufficientemente\nflessibile da accettare leggi orarie arbitrarie per poter simulare il\nmovimento di satelliti differenti.\n\nPer questo motivo si \u00e8 scelto di ultilizzare la libreria di calcolo simbolico\nSymPy per il calcolo dell\u2019orientamento del satellite definito da funzioni del\ntempo generiche (pitch, roll, yaw), e la libreria astronomica PyEphem il\ncalcolo della posizione orbitale.\n\nIntegrando PyEphem con SymPy \u00e8 stato possibile sviluppare un sistema dinamico\nduttile e di facile utilizzo, capace di gestire facilmente molteplici sistemi\ndi riferimento mobili, posizioni e direzioni.\n\n"}
{"speakers": ["Maurizio Delmonte"], "description": "Da semplice tecnico ho imparato come si gestisce un progetto software da validi maestri, e da quando sono io a occuparmi di gestione, ho potuto sperimentare decine di situazioni diverse. \nLa metodologia di gestione si deve adattare ai vari contesti che ci troviamo ad affrontare, ma avere uno strumento flessibile su cui contare \u00e8 irrinunciabile.\n\nSimpleManagement, rilasciato con licenza open source da Abstract, \u00e8 un\u2019applicazione web capace di integrare i documenti, le comunicazioni di progetto e il tracking delle attivit\u00e0 necessarie, condensando concetti di Extreme Management e SCRUM in un unico tool.\n\nDurante il talk vedremo insieme lo strumento, illustrando alcuni casi reali di applicazione.\n\nhttp://www.slideshare.net/miziodel/simple-management-europython-2013", "language": "IT", "title": "SimpleManagement: come semplificare la gestione progetti con Python", "tags": ["project-management", "open-source", "teamwork", "zope", "plone", "case-study"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/simplemanagement-come-semplificare-la-gestione-progetti-con-python", "video": null, "description_md": "Da semplice tecnico ho imparato come si gestisce un progetto software da\nvalidi maestri, e da quando sono io a occuparmi di gestione, ho potuto\nsperimentare decine di situazioni diverse. La metodologia di gestione si deve\nadattare ai vari contesti che ci troviamo ad affrontare, ma avere uno\nstrumento flessibile su cui contare \u00e8 irrinunciabile.\n\nSimpleManagement, rilasciato con licenza open source da Abstract, \u00e8\nun\u2019applicazione web capace di integrare i documenti, le comunicazioni di\nprogetto e il tracking delle attivit\u00e0 necessarie, condensando concetti di\nExtreme Management e SCRUM in un unico tool.\n\nDurante il talk vedremo insieme lo strumento, illustrando alcuni casi reali di\napplicazione.\n\nhttp://www.slideshare.net/miziodel/simple-management-europython-2013\n\n"}
{"speakers": ["Adam Hitchcock"], "description": "", "language": "EN", "title": "Services at Disqus", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/services-disqus", "video": null, "description_md": "\n\n"}
{"speakers": ["Christophe Pettus"], "description": "As applications grow and scale up, one of the first things that you hear about is \u201csharding\u201d your application. But what does that really mean? How do you design an application for sharding? What are the tradeoffs? How do you make this work on traditional database technology?\n\nWe\u2019ll talk about all these, based on real-life examples of very, very high volumes sites.", "language": "EN", "title": "Real-Life Sharding", "tags": ["postgresql", "scalability", "databases"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/real-life-sharding", "video": null, "description_md": "As applications grow and scale up, one of the first things that you hear about\nis \u201csharding\u201d your application. But what does that really mean? How do you\ndesign an application for sharding? What are the tradeoffs? How do you make\nthis work on traditional database technology?\n\nWe\u2019ll talk about all these, based on real-life examples of very, very high\nvolumes sites.\n\n"}
{"speakers": ["Alessandro Pisa"], "description": "Knuth\u2019s sentence \"It was nice to learn Python; a nice afternoon\" describes very well how easy it is to get engaged and fall in love with our favourite snake.\n\nBut if you are a professional programmer and use and abuse Python for paying your bills, there is a chance that your beloved pet will go out of control and bite you!\n\nTo save you some scars, I want to share with you 10 topical steps of my evolution from a Python programmer into a Python tamer.", "language": "EN", "title": "Python: from programmer to tamer", "tags": ["debugging", "testing", "integration", "scalability", "tdd", "optimization", "design", "software-engineering", "best-practices", "architecture"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-programmer-tamer", "video": null, "description_md": "Knuth\u2019s sentence _\"It was nice to learn Python; a nice afternoon\"_ describes\nvery well how easy it is to get engaged and fall in love with our favourite\nsnake.\n\nBut if you are a professional programmer and use and abuse Python for paying\nyour bills, there is a chance that your beloved pet will go out of control and\nbite you!\n\nTo save you some scars, I want to share with you 10 topical steps of my\nevolution from a Python programmer into a Python tamer.\n\n"}
{"speakers": ["Alessandro Pisa"], "description": "La frase di Knuth: \"\u00c8 stato bello imparare Python, un bel pomeriggio\" descrive alla perfezione quanto sia facile rimanere folgorati e innamorarsi del nostro serpente preferito.\n\nMa se sei un programmatore professionista e usi e abusi Python per guadagnarti da vivere, esiste la non remota possibilit\u00e0 che il tuo amato animaletto sfugga al tuo controllo e ti morda.\n\nPer risparmiarvi qualche cicatrice, vorrei condividere i 10 momenti topici che mi hanno fatto evolvere dall\u2019essere un programmatore ad essere un domatore di Python.", "language": "IT", "title": "Python: da programmatore a domatore", "tags": ["debugging", "testing", "integration", "scalability", "tdd", "optimization", "design", "software-engineering", "best-practices", "architecture"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-programmatore-domatore", "video": null, "description_md": "La frase di Knuth: _\"\u00c8 stato bello imparare Python, un bel pomeriggio\"_\ndescrive alla perfezione quanto sia facile rimanere folgorati e innamorarsi\ndel nostro serpente preferito.\n\nMa se sei un programmatore professionista e usi e abusi Python per guadagnarti\nda vivere, esiste la non remota possibilit\u00e0 che il tuo amato animaletto sfugga\nal tuo controllo e ti morda.\n\nPer risparmiarvi qualche cicatrice, vorrei condividere i 10 momenti topici che\nmi hanno fatto evolvere dall\u2019essere un programmatore ad essere un domatore di\nPython.\n\n"}
{"speakers": ["Ezio Melotti", "Franco Carbognani"], "description": "L\u2019European MaRs Analogue Station for Advanced Technologies Integration (ERAS) \u00e8 un programma guidato dalla Italian Mars Society, il cui obiettivo principale \u00e8 quello di fornire un banco di prova per studiare operazioni sul campo in preparazione a una missione con equipaggio su Marte.\n\nL\u2019obiettivo del sistema Command, Control, and Communication (C3) dell\u2019ERAS \u00e8 quello di fornire le seguenti funzionalit\u00e0:\n\n\nmonitorare e controllare habitate i suoi sottosistemi;\nmonitorare e mantenere la salute e la sicurezza dell\u2019equipaggio;\ncomunicare con il supporto missione, i rovers, e i membri dell\u2019equipaggio durante le attivit\u00e0 extraveicolari;\nsupportare l\u2019analisi dei dati relativi agli obiettivi della missione;\nhostare la parte principale dell\u2019assistenza dell\u2019equipaggio;\n\n\nSin dall\u2019inizio, Python \u00e8 stato un componente fondamentale del progetto,  e ci ha permesso di sviluppare le funzioni preliminari dei nodi C3, in particolare:\n\n\nComunicazione con la sonda spazialeHUNVEYOR-4;\nUna neural network dedicata al monitoraggio, rilevamento, e notificazione di situazioni anomale dei dati biomedici ricevuti dalla tuta spaziale Aouda.X creata dall\u2019OEWF (Austrian Space Forum);\nUna neural network dedicata alla previsione di tempeste solari pericolose, basata sui dati relativi al proton flux;\n\n\nDurante il talk vedremo come Python ci sta aiutando a portarvi su Marte.", "language": "IT", "title": "Python su Marte", "tags": ["tuta spaziale", "scientific-computing", "pytango", "neural network", "tango"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-su-marte", "video": null, "description_md": "L\u2019European MaRs Analogue Station for Advanced Technologies Integration (ERAS)\n\u00e8 un programma guidato dalla **Italian Mars Society**, il cui obiettivo\nprincipale \u00e8 quello di fornire un banco di prova per studiare operazioni sul\ncampo in preparazione a una **missione con equipaggio su Marte**.\n\nL\u2019obiettivo del sistema Command, Control, and Communication (C3) dell\u2019ERAS \u00e8\nquello di fornire le seguenti funzionalit\u00e0:\n\n  * monitorare e controllare habitate i suoi sottosistemi;\n  * monitorare e mantenere la salute e la sicurezza dell\u2019equipaggio;\n  * comunicare con il supporto missione, i rovers, e i membri dell\u2019equipaggio durante le attivit\u00e0 extraveicolari;\n  * supportare l\u2019analisi dei dati relativi agli obiettivi della missione;\n  * hostare la parte principale dell\u2019assistenza dell\u2019equipaggio;\n\nSin dall\u2019inizio, **Python** \u00e8 stato un componente fondamentale del progetto, e\nci ha permesso di sviluppare le funzioni preliminari dei nodi C3, in\nparticolare:\n\n  * Comunicazione con la sonda spazialeHUNVEYOR-4;\n  * Una neural network dedicata al monitoraggio, rilevamento, e notificazione di situazioni anomale dei dati biomedici ricevuti dalla tuta spaziale Aouda.X creata dall\u2019OEWF (Austrian Space Forum);\n  * Una neural network dedicata alla previsione di tempeste solari pericolose, basata sui dati relativi al proton flux;\n\nDurante il talk vedremo come Python ci sta aiutando a portarvi su Marte.\n\n"}
{"speakers": ["Ezio Melotti", "Franco Carbognani"], "description": "The European MaRs Analogue Station for Advanced Technologies Integration (ERAS) is a program spearheaded by the Italian Mars Society which main goal is to provide an effective test bed for field operation studies in preparation for manned missions to Mars. \nThe goal of the ERAS Command, Control, and Communication system (C3) is to provide the following functionalities:\n\n\nmonitor and control the habitat\u2019s environment and subsystems;\nmonitor and maintain crew health and safety;\ncommunicate with mission support, rovers and EVA crew members;\nsupport data processing related to the mission objectives;\nhost the core part of the crew assistant;\n\n\nSince the beginning, Python has been a fundamental component of the projects, \nand it allowed us to establish preliminary functionality of the C3 nodes, in particular:\n\n\nCommunication with the HUNVEYOR-4 space probe;\nA neural network dedicated to monitoring, detection, and alerting of anomalous situations from the OEWF (Austrian Space Forum) Aouda.X space suit biomedical data;\nA neural network dedicated to forecasting dangerous solar storms based on proton flux data;\n\n\nDuring the talk we will see how Python is helping us taking you on Mars.", "language": "EN", "title": "Python on Mars", "tags": ["pytango", "space suit tango", "tango", "mars", "scientific-computing", "neural network", "space suit"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-on-mars", "video": null, "description_md": "The European MaRs Analogue Station for Advanced Technologies Integration\n(ERAS) is a program spearheaded by the **Italian Mars Society** which main\ngoal is to provide an effective test bed for field operation studies in\npreparation for **manned missions to Mars**. The goal of the ERAS Command,\nControl, and Communication system (C3) is to provide the following\nfunctionalities:\n\n  * monitor and control the habitat\u2019s environment and subsystems;\n  * monitor and maintain crew health and safety;\n  * communicate with mission support, rovers and EVA crew members;\n  * support data processing related to the mission objectives;\n  * host the core part of the crew assistant;\n\nSince the beginning, **Python** has been a fundamental component of the\nprojects, and it allowed us to establish preliminary functionality of the C3\nnodes, in particular:\n\n  * Communication with the HUNVEYOR-4 space probe;\n  * A neural network dedicated to monitoring, detection, and alerting of anomalous situations from the OEWF (Austrian Space Forum) Aouda.X space suit biomedical data;\n  * A neural network dedicated to forecasting dangerous solar storms based on proton flux data;\n\nDuring the talk we will see how Python is helping us taking you on Mars.\n\n"}
{"speakers": ["Pablo Enfedaque"], "description": "The training will cover all the essentials of Python objects, from the most basic concepts to some advanced features, with real world examples and some exercises. The training contents are: \n\n\nType, id and value\nMutable vs. immutable types\nNew-style vs. old-style classes\nObjects data model and customisation\nInheritance: super, getattr and MRO\nInstantiation: __new__ and __init__\nMetaclasses\n\n\nI already gave this training internally at my company. All the content is available here: objects repository.\n\nTo complete the exercises proposed you will only need Python 2.7 with nose package installed and your favourite Python editor.\n\nAlthough it is targeted for beginners, most probably intermediate Pythonists may learn something new too.\n\nPlease, notice that there are no slides, only Python code. In the README.md or the objects repository there is a detailed usage explanation", "language": "EN", "title": "Python objects essentials", "tags": ["super", "principles", "datamodel"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-objects-essentials", "video": null, "description_md": "The training will cover all the essentials of Python objects, from the most\nbasic concepts to some advanced features, with real world examples and some\nexercises. The training contents are:\n\n  * Type, id and value\n  * Mutable vs. immutable types\n  * New-style vs. old-style classes\n  * Objects data model and customisation\n  * Inheritance: super, getattr and MRO\n  * Instantiation: __new__ and __init__\n  * Metaclasses\n\nI already gave this training internally at my company. All the content is\navailable here: [objects repository](https://github.com/pablito56/objects).\n\nTo complete the exercises proposed you will only need **Python 2.7** with\n**nose** package installed and your favourite Python editor.\n\nAlthough it is targeted for beginners, most probably intermediate Pythonists\nmay learn something new too.\n\n**Please, notice that there are no slides, only Python code. In the _README.md_ or the [objects repository](https://github.com/pablito56/objects) there is a detailed usage explanation**\n\n"}
{"speakers": ["Steven Citron-Pousty"], "description": "In this session, we will give a quick introduction to Platform as a Service (aka awesome-sauce for developers) with OpenShift as an example. After a few slides and your questions we will spend the rest of the time working with you to get your Python code up and running in less than 5 minutes. We will show you how easy it is to bring in dependencies and deploy your code. We will also have you merge in some of the (Github quickstarts)[https://github.com/openshift] we have assembled - including (Django)[https://github.com/openshift/django-example]. We will also demonstrate how to connect your code to a back-end data store such as MongoDB, MySQL, and Postgresql. The goal of this session is to have you leave with a laptop configured to run your code in the cloud for free!", "language": "EN", "title": "Python in the cloud with PaaS", "tags": ["flask", "mongodb", "geospatial", "postgresql", "cloud"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-in-the-cloud-with-paas", "video": null, "description_md": "In this session, we will give a quick introduction to Platform as a Service\n(aka awesome-sauce for developers) with OpenShift as an example. After a few\nslides and your questions we will spend the rest of the time working with you\nto get your Python code up and running in less than 5 minutes. We will show\nyou how easy it is to bring in dependencies and deploy your code. We will also\nhave you merge in some of the (Github\nquickstarts)[https://github.com/openshift] we have assembled - including\n(Django)[https://github.com/openshift/django-example]. We will also\ndemonstrate how to connect your code to a back-end data store such as MongoDB,\nMySQL, and Postgresql. The goal of this session is to have you leave with a\nlaptop configured to run your code in the cloud for free!\n\n"}
{"speakers": ["Oltjano Terpollari"], "description": "Do you like to cook?  I love it! I am not talking about pizza, but about cooking security scripts. Have you ever cooked a backdoor? I do it often in my \u2018python kitchen\u2019. Python is very important to me because it changed my life and the way i see the world. My paper objective is to encourage the hacker spirit to each one of you using python programming language. What is a hacker? What is penetration testing?  There are many of you new to hacking and information security, but  after you attend my talk, not anymore. Python makes it easy for you to learn hacking skills fast and I  will do my best to  make it easier for  you. Can python help you access facebook from your office where  social networks  are restriced? Yes, it can!  During the presentation i will provide some background information about the language, variables,functions, networking and explain to you why python is very important to information security industry and why it is becoming the favourite hacker/pentester language. We will learn how to code some basic tools used in penetration testing like, subnet calculator, port scanner, zip file password cracker, md5 hash password cracker and unix password cracker, banner grabbing tool etc. An important point in this presentation is to become familiar with some of the most important and most popular programs in the field of information security industry, Sqlmap and social engineering toolkit aka SET. The best way to learn python is to practise it and study open source tools coded in python. Both, Sqlmap and SET are programed in python, so why not break one of them and study python scripts that make the tool? Since a kid i have been curious to understand how things work.Sqlmap is one of the most used tool in web application penetration testing and it is an open source tool.Why not break it? How does this tool work? The paper will teach you also how sqlmap works.Do you want to know what happens with the python code when you try to detect sql injection flaws? How does the sqlmap pass web application firewalls? My paper will teach you these things.I am a cool guy and passionate in what i do, so my paper is too.", "language": "EN", "title": "Python for hackers and Penetration testing", "tags": ["sqlmap", "subnet", "set", "networking", "zip", "whitehat", "web", "windows", "sysadmin", "socket", "ssh", "linux", "hacking", "security", "pythonscripts"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-for-hackers-and-penetration-testing", "video": null, "description_md": "Do you like to cook? I love it! I am not talking about pizza, but about\ncooking security scripts. Have you ever cooked a backdoor? I do it often in my\n\u2018python kitchen\u2019. Python is very important to me because it changed my life\nand the way i see the world. My paper objective is to encourage the hacker\nspirit to each one of you using python programming language. What is a hacker?\nWhat is penetration testing? There are many of you new to hacking and\ninformation security, but after you attend my talk, not anymore. Python makes\nit easy for you to learn hacking skills fast and I will do my best to make it\neasier for you. Can python help you access facebook from your office where\nsocial networks are restriced? Yes, it can! During the presentation i will\nprovide some background information about the language, variables,functions,\nnetworking and explain to you why python is very important to information\nsecurity industry and why it is becoming the favourite hacker/pentester\nlanguage. We will learn how to code some basic tools used in penetration\ntesting like, subnet calculator, port scanner, zip file password cracker, md5\nhash password cracker and unix password cracker, banner grabbing tool etc. An\nimportant point in this presentation is to become familiar with some of the\nmost important and most popular programs in the field of information security\nindustry, Sqlmap and social engineering toolkit aka SET. The best way to learn\npython is to practise it and study open source tools coded in python. Both,\nSqlmap and SET are programed in python, so why not break one of them and study\npython scripts that make the tool? Since a kid i have been curious to\nunderstand how things work.Sqlmap is one of the most used tool in web\napplication penetration testing and it is an open source tool.Why not break\nit? How does this tool work? The paper will teach you also how sqlmap works.Do\nyou want to know what happens with the python code when you try to detect sql\ninjection flaws? How does the sqlmap pass web application firewalls? My paper\nwill teach you these things.I am a cool guy and passionate in what i do, so my\npaper is too.\n\n"}
{"speakers": ["Hannu Krosing"], "description": "In this talk I describe ways to do terabyte-scale multi-machine data warehousing using PostgreSQL as \u201cstorage and query processing layer\u201d and the \u201cskype scalability triplets\u201d pl/proxy, pgbouncer and (largely python based) skytools for loading the data into the cluster. \nEasy map-reduce type huge-data processing using pl/proxy, SQL, pl/pgsql and/or pl/pythonu is demonstrated and differences from typical NoSQL map-reduce are shown.\nWriting the \u201ctransform\u201d part of ETL  (extract-transform-load) as python plugins in near-real-time data collection pipeline for this type of data warehouse is demonstrated.\nAlso, a short comparison to other distributed data processing approaches is given, including which one to use for which task.", "language": "EN", "title": "Python and PostgreSQL for Huge Data Warehouses", "tags": ["postgresql", "nosql", "parallelization", "bigdata", "scalability", "pl/python", "olap", "optimization", "pl/pythonu", "architecture", "sql", "performance"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-and-postgresql-for-huge-data-warehouses", "video": null, "description_md": "In this talk I describe ways to do terabyte-scale multi-machine data\nwarehousing using PostgreSQL as \u201cstorage and query processing layer\u201d and the\n\u201cskype scalability triplets\u201d pl/proxy, pgbouncer and (largely python based)\nskytools for loading the data into the cluster. Easy map-reduce type huge-data\nprocessing using pl/proxy, SQL, pl/pgsql and/or pl/pythonu is demonstrated and\ndifferences from typical NoSQL map-reduce are shown. Writing the \u201ctransform\u201d\npart of ETL (extract-transform-load) as python plugins in near-real-time data\ncollection pipeline for this type of data warehouse is demonstrated. Also, a\nshort comparison to other distributed data processing approaches is given,\nincluding which one to use for which task.\n\n"}
{"speakers": ["Edward Easton"], "description": "This talk aims to discuss problems and solutions when implementing an end-to-end Python environment for a big company.\n\nThe term \u2018Enterprise\u2019 often has negative connotations in much of the open-source world, usually along the lines of \u2018expensive and bloated\u2019. In this case I\u2019d like to use it for describing a systems environment where the freedoms of a developer working at home with her laptop are not always available or practical. For example, coding on the holodeck of the Starship Enterprise. \u00a0\n\nBig teams and codebases need tools that make it very easy for new developers to get up and running writing code with the minimum of fuss. Large software platforms needs tools to manage complex package dependency graphs and release workflows. Also, production environments don\u2019t always have compilers or direct internet access so many of Python\u2019s standard packaging tools make it a bit tricky to get things going in these regards.\n\nI\u2019d like to present how we managed to solve a number of these problems for a recent client, a task which happily culminated in much of the software being open-sourced at https://github.com/eeaston/pkglib\n\nEdit: The software also has numerous testing tools included which I\u2019ll demonstrate, including py.test fixtures for mongo, redis, pyramid and generic servers, selenium webdriver and C/C++ code coverage and profiling.", "language": "EN", "title": "Python Packaging on the Enterprise", "tags": ["packaging", "jenkins", "continuous-integration", "systems-programming", "sysadmin"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-packaging-on-the-enterprise", "video": null, "description_md": "This talk aims to discuss problems and solutions when implementing an end-to-\nend Python environment for a big company.\n\nThe term \u2018Enterprise\u2019 often has negative connotations in much of the open-\nsource world, usually along the lines of \u2018expensive and bloated\u2019. In this case\nI\u2019d like to use it for describing a systems environment where the freedoms of\na developer working at home with her laptop are not always available or\npractical. For example, coding on the holodeck of the Starship Enterprise.\n\nBig teams and codebases need tools that make it very easy for new developers\nto get up and running writing code with the minimum of fuss. Large software\nplatforms needs tools to manage complex package dependency graphs and release\nworkflows. Also, production environments don\u2019t always have compilers or direct\ninternet access so many of Python\u2019s standard packaging tools make it a bit\ntricky to get things going in these regards.\n\nI\u2019d like to present how we managed to solve a number of these problems for a\nrecent client, a task which happily culminated in much of the software being\nopen-sourced at https://github.com/eeaston/pkglib\n\nEdit: The software also has numerous testing tools included which I\u2019ll\ndemonstrate, including py.test fixtures for mongo, redis, pyramid and generic\nservers, selenium webdriver and C/C++ code coverage and profiling.\n\n"}
{"speakers": ["Alan Franzoni"], "description": "Find the video for this talk here\n\nPython is quite a powerful language; sometimes, it\u2019s a too much powerful\nlanguage.\n\nVery often, little scaffolding is provided, and many choices are left to the\nprogrammer even when there\u2019s no need to; while an expert programmer will\nprobably know how to handle things, possibly because of past trial and errors,\nnovice programmers may just go stray with strange implementations, and Python\nnewbies coming from other languages will just try mimicking such languages\u2019\napproach.\n\nOther people may just crawl mailing lists looking for answers or ask their\nabout their own doubt, but quite often there\u2019s no clear answer even on focused\nquestions, because details are left to the programmer \u201cby design\u201d.\n\nWhat happens after a while is that, as soon as the lone programmer goes into a\nwider team or shares his work with the world, friction begins; different\npractices, albeit common-sense driven, often lead to issues and\nincompatibilities.\n\nOr maybe that a programmer who has grown in experience finds his own previous\nideas terrible and error-prone, and yet hard to fix once a lot of code is\nalready in place.\n\nIn this talk I introduce a set of issues I experiences and that I still see\nmany experience, along with a proposed solution, ranging from architecture, to\npackaging, to everyday programming.\n\nPlease note I don\u2019t try to estabilish best practices when I don\u2019t think\nthere\u2019s a clear one: I just aim for a good solution, which somebody may not\nagree with.", "language": "EN", "title": "Python Good Practices", "tags": ["design", "deploy", "patterns", "teamwork", "architecture", "best-practices"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/python-good-practices", "video": null, "description_md": "Find the video for this talk [here](http://youtu.be/osQLB3-dvT4)\n\nPython is quite a powerful language; sometimes, it\u2019s a too much powerful\nlanguage.\n\nVery often, **little scaffolding is provided**, and many choices are left to\nthe programmer even when there\u2019s no need to; while an expert programmer will\nprobably know how to handle things, possibly because of past trial and errors,\nnovice programmers may just go stray with strange implementations, and Python\nnewbies coming from other languages will just try mimicking such languages\u2019\napproach.\n\nOther people may just crawl mailing lists looking for answers or ask their\nabout their own doubt, but quite often there\u2019s no clear answer even on focused\nquestions, because details are left to the programmer \u201cby design\u201d.\n\nWhat happens after a while is that, **as soon as the lone programmer goes into\na wider team or shares his work with the world, friction begins**; different\npractices, **albeit common-sense driven**, often lead to issues and\nincompatibilities.\n\nOr maybe that a programmer who has grown in experience finds his own previous\nideas terrible and error-prone, and yet hard to fix once a lot of code is\nalready in place.\n\nIn this talk I introduce a set of issues I experiences and that I still see\nmany experience, along with a proposed solution, ranging from architecture, to\npackaging, to everyday programming.\n\nPlease note I don\u2019t try to estabilish **best** practices when I don\u2019t think\nthere\u2019s a clear one: I just aim for a **good** solution, which somebody may\nnot agree with.\n\n"}
{"speakers": ["Georges Dubus"], "description": "This talk will give a tour of pyramid\u2019s advanced configuration possibilities, and how to use them to facilitate apps creation, and to make nice libraries. It will be illustrated with my own experience creating a pyramid library (pyramid_persona), and others real-life examples.\n\nThe goal is to provide guidelines and pointers for real-life use of advance configuration tactics in pyramid. This talks requires some knowledge about how to create web applications with pyramid.", "language": "EN", "title": "Pyramid advanced configuration tactics for nice apps and libs", "tags": ["web", "pyramid", "case-study"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/pyramid-advanced-configuration-tactics-for-nice-apps-and-libs", "video": null, "description_md": "This talk will give a tour of pyramid\u2019s advanced configuration possibilities,\nand how to use them to facilitate apps creation, and to make nice libraries.\nIt will be illustrated with my own experience creating a pyramid library\n(pyramid_persona), and others real-life examples.\n\nThe goal is to provide guidelines and pointers for real-life use of advance\nconfiguration tactics in pyramid. This talks requires some knowledge about how\nto create web applications with pyramid.\n\n"}
{"speakers": ["Reimar Bauer"], "description": "In 2013 we run in germany the competition pymove3d.\nSee also my Lightning Talk\n\nWe want also a similar competition in 2014 with price-draw at the europython conference.", "language": "EN", "title": "Pymove 3D", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/pymove-3d", "video": null, "description_md": "In 2013 we run in germany the competition pymove3d. See also my [Lightning\nTalk](https://speakerdeck.com/reimarbauer/python-moves-the-world-attractive-\nprogramming-for-young-people)\n\nWe want also a similar competition in 2014 with price-draw at the europython\nconference.\n\n"}
{"speakers": ["Daniel Pope"], "description": "Games like Angry Birds or World of Goo have been enormously successful with their combination of simple, colourful graphics linked to a physics simulation, and with Python, creating your own game could take just few happy hours of hacking.\n\nI will introduce various off-the-shelf physics engines, explain the principles on which they work and show how to connect a physics engine to simple OpenGL graphics. Along the way I will share tools, techniques and tips I\u2019ve used for creating games in the past, and some of the pitfalls I\u2019ve encountered.\n\nThe talk may involve basic vector maths, Newtonian mechanics, and airborne radioactive cephalopods, so you may not be completely safe if you fear any of these things.", "language": "EN", "title": "Programming physics games with Python and OpenGL", "tags": ["opengl", "physics", "game-development", "graphics"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/programming-physics-games-with-python-and-opengl", "video": null, "description_md": "Games like Angry Birds or World of Goo have been enormously successful with\ntheir combination of simple, colourful graphics linked to a physics\nsimulation, and with Python, creating your own game could take just few happy\nhours of hacking.\n\nI will introduce various off-the-shelf physics engines, explain the principles\non which they work and show how to connect a physics engine to simple OpenGL\ngraphics. Along the way I will share tools, techniques and tips I\u2019ve used for\ncreating games in the past, and some of the pitfalls I\u2019ve encountered.\n\nThe talk may involve basic vector maths, Newtonian mechanics, and airborne\nradioactive cephalopods, so you may not be completely safe if you fear any of\nthese things.\n\n"}
{"speakers": ["Alessandro Amici"], "description": "Storicamente le competizioni di programmazione sportiva sono state appannagigo di programmatori C++ e JAVA, ma con l\u2019avvento di competizioni come il Google Code Jam e la Facebook Hacker Cup molti pi\u00f9 linguaggi di programmazione, incluso Python, sono diventati popolari.\n\nDa un paio d\u2019anni a questa parte l\u2019interprete di PyPy ha aumentato significativamente la competitivit\u00e0 del Python grazie al compilatore Just-In-Time con ottimizzazione che ha reso l\u2019uso dei cicli stretti e la gestione della memeoria a basso livello, non solo fattibili, ma addirittura vicini in efficienza a quelli del C++.\n\nProgrammare per la massima performance con PyPy \u00e8 piuttosto diverso dall\u2019usuale programmare in Python, ci\u00f2 nonostante si possono imparare numerose lezioni riguardo a velocit\u00e0 del codice e efficienza nell\u2019uso della memoria, che posso essere applicate anche a scenari reali, in particolare in ambito numerico e scientifico.\n\nDurante il seminario presenteremo come realizzare un ambiente PyPy pronto per le gare, le soluzioni di qualche problema del Google Code Jam e diverse tecniche per \u201cvincere con Python!\u201d", "language": "IT", "title": "Programmazione competitiva con PyPy: \"Vincere con Python!\"", "tags": ["numpy", "JIT", "networkx", "performance", "scientific-computing", "pypy"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/programmazione-competitiva-con-pypy-vincere-con-python", "video": null, "description_md": "Storicamente le competizioni di programmazione sportiva sono state appannagigo\ndi programmatori C++ e JAVA, ma con l\u2019avvento di competizioni come il Google\nCode Jam e la Facebook Hacker Cup molti pi\u00f9 linguaggi di programmazione,\nincluso Python, [sono diventati popolari](http://www.go-hero.net/jam).\n\nDa un paio d\u2019anni a questa parte l\u2019interprete di PyPy ha aumentato\nsignificativamente la competitivit\u00e0 del Python grazie al compilatore Just-In-\nTime con ottimizzazione che ha reso l\u2019uso dei cicli stretti e la gestione\ndella memeoria a basso livello, non solo fattibili, ma addirittura vicini in\nefficienza a quelli del C++.\n\nProgrammare per la massima performance con PyPy \u00e8 piuttosto diverso\ndall\u2019usuale programmare in Python, ci\u00f2 nonostante si possono imparare numerose\nlezioni riguardo a velocit\u00e0 del codice e efficienza nell\u2019uso della memoria,\nche posso essere applicate anche a scenari reali, in particolare in ambito\nnumerico e scientifico.\n\nDurante il seminario presenteremo come realizzare un ambiente PyPy pronto per\nle gare, le soluzioni di qualche problema del Google Code Jam e diverse\ntecniche per \u201cvincere con Python!\u201d\n\n"}
{"speakers": ["Manuel Ceron"], "description": "Function annotations (PEP 3107) are a powerful and interesting feature of Python that no one is using. This talk presents three practical use cases that can make developer\u2019s life better.\n\n\nType annotations for better tooling support and early error detection. Code analyzers, linters and IDEs can use type annotations to make smarter suggestions and show errors just after typing.\nLogic predicate annotations and design by contract. Adding preconditions and postconditions to your functions in an expressive way.\nDocumentation consistency and auto-documentation. By enforcing annotations, it\u2019s possible to check the consistency of docstrings or even create them automatically.\n\n\nHere is a small library I wrote implementing some of the concepts I will discuss in the talk: typeannotations", "language": "EN", "title": "Practical uses for function annotations", "tags": ["programminglanguage", "type-cheking"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/practical-uses-for-function-annotations", "video": null, "description_md": "Function annotations ([PEP 3107](http://www.python.org/dev/peps/pep-3107/))\nare a powerful and interesting feature of Python that no one is using. This\ntalk presents three practical use cases that can make developer\u2019s life better.\n\n  * Type annotations for better tooling support and early error detection. Code analyzers, linters and IDEs can use type annotations to make smarter suggestions and show errors just after typing.\n\n  * Logic predicate annotations and design by contract. Adding preconditions and postconditions to your functions in an expressive way.\n\n  * Documentation consistency and auto-documentation. By enforcing annotations, it\u2019s possible to check the consistency of docstrings or even create them automatically.\n\nHere is a small library I wrote implementing some of the concepts I will\ndiscuss in the talk:\n[typeannotations](https://github.com/ceronman/typeannotations)\n\n"}
{"speakers": ["Craig Kerstiens"], "description": "Postgres has long been known as a stable database product that reliably stores your data. However, in recent years it has picked up many features, allowing it to become a much sexier database.\n\nWe\u2019ll cover a whirlwind of Postgres features, which highlight why you should consider it for your next project. These include:\n\n\nDatatypes\nUsing other languages within Postgres\nExtensions including NoSQL inside your SQL database\nAccessing your non-Postgres data (Redis, Oracle, MySQL) from within Postgres\nWindow Functions", "language": "EN", "title": "Postgres Demystified", "tags": ["postgresql", "databases"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/postgres-demystified", "video": null, "description_md": "Postgres has long been known as a stable database product that reliably stores\nyour data. However, in recent years it has picked up many features, allowing\nit to become a much sexier database.\n\nWe\u2019ll cover a whirlwind of Postgres features, which highlight why you should\nconsider it for your next project. These include:\n\n  * Datatypes\n  * Using other languages within Postgres\n  * Extensions including NoSQL inside your SQL database\n  * Accessing your non-Postgres data (Redis, Oracle, MySQL) from within Postgres\n  * Window Functions\n\n"}
{"speakers": ["Hannu Krosing"], "description": "In this talk I show you how to set up a python and PostgreSQL based system which is easy to set up and easy to scale, provides ACID guarantees where they are needed and delays time-consistency between unrelated objects for scalability and availability where the latter are deemed more important.\n\nThe best thing is that this kind of scalability work for both OLTP and OLAP workloads, so with some planning you can have just a single large \u201cdatabase\u201d which can take almost any type of load.\n\nAlso, if you hate SQL, you can do all the OLTP stuff in a pythonic way using an automagically generated ORM layer inside the database, near the data. If you are really masochistic, you can use the same ORM also for map-reduce type distributed data processing, though on this side the small effort of learning SQL usually pays off when queries get more complex. But as I said, everything runs inside the databse, near the data and thus even the ORM & map-reduce analytics works fast.", "language": "EN", "title": "PostgreSQL is Web-Scale (Really :) )", "tags": ["postgresql", "nosql", "datamining", "parallelization", "distributed", "bigdata", "scalability", "pl/python", "olap", "optimization", "pl/pythonu", "orm", "sql", "performance"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/postgresql-is-web-scale-really", "video": null, "description_md": "In this talk I show you how to set up a python and PostgreSQL based system\nwhich is easy to set up and easy to scale, provides ACID guarantees where they\nare needed and delays time-consistency between unrelated objects for\nscalability and availability where the latter are deemed more important.\n\nThe best thing is that this kind of scalability work for both OLTP and OLAP\nworkloads, so with some planning you can have just a single large \u201cdatabase\u201d\nwhich can take almost any type of load.\n\nAlso, if you hate SQL, you can do all the OLTP stuff in a pythonic way using\nan automagically generated ORM layer inside the database, near the data. If\nyou are really masochistic, you can use the same ORM also for map-reduce type\ndistributed data processing, though on this side the small effort of learning\nSQL usually pays off when queries get more complex. But as I said, everything\nruns inside the databse, near the data and thus even the ORM &amp; map-reduce\nanalytics works fast.\n\n"}
{"speakers": ["Dougal Matthews"], "description": "PostgreSQL is a fantastic database with support for many features not found in\nother open source databases. This talk will show you how to use some of the\nmore interesting and unique capabilities of PostgreSQL.\n\nLearn how to use advanced column types and how they map to python, how to\nquery an external non-SQL database from PostgreSQL (with SQL) and how to write\nstored procedures in Python, to implement logic within the database.\n\nThe rough outline of the talk will be:\n\n\nIntroduction to myself and what I do.\nQuick PostgreSQL history lesson.\nAdvanced PostgreSQL column types.\nAccessing external databases with foreign data wrappers.\nUsing PLPython to write stored procedures.\n\n\nThis talk requires no previous experience of PostgreSQL but general experience\nwith a RDMS would be useful.", "language": "EN", "title": "PostgreSQL for Pythonistas.", "tags": ["postgresql", "databases"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/postgres-for-pythonistas", "video": null, "description_md": "PostgreSQL is a fantastic database with support for many features not found in\nother open source databases. This talk will show you how to use some of the\nmore interesting and unique capabilities of PostgreSQL.\n\nLearn how to use advanced column types and how they map to python, how to\nquery an external non-SQL database from PostgreSQL (with SQL) and how to write\nstored procedures in Python, to implement logic within the database.\n\nThe rough outline of the talk will be:\n\n  * Introduction to myself and what I do.\n  * Quick PostgreSQL history lesson.\n  * Advanced PostgreSQL column types.\n  * Accessing external databases with foreign data wrappers.\n  * Using PLPython to write stored procedures.\n\nThis talk requires no previous experience of PostgreSQL but general experience\nwith a RDMS would be useful.\n\n"}
{"speakers": ["Thomas Waldmann"], "description": "", "language": "EN", "title": "Pocoo Python3 Porting", "tags": [], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/pocoo-python3-porting", "video": null, "description_md": "\n\n"}
{"speakers": ["Maurizio Delmonte"], "description": "On behalf of the Plone Foundation, a number of EuroPython participants (probably no less than 10) will alternate in manning an Help Desk to provide Plone consulting and - on request - demos of how Plone works as well as Plone familiarization for all interested people.", "language": "EN", "title": "Plone Help Desk", "tags": ["plone"], "datetime": "2013-07-05 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/plone-help-desk", "video": null, "description_md": "On behalf of the Plone Foundation, a number of EuroPython participants\n(probably no less than 10) will alternate in manning an Help Desk to provide\nPlone consulting and - on request - demos of how Plone works as well as Plone\nfamiliarization for all interested people.\n\n"}
{"speakers": ["Thomas Waldmann"], "description": "A tour of decreasingly bad ideas regarding server/software-side password handling. After showing off popular ways to fail badly, I\u2019ll also show an easy and  recommendable way to deal with passwords (passlib) plus some generic ideas.\n\nTopics: Storage and Verification of passwords, algorithms, attacks, security breaches and consequences, password invalidation, thoughts about legacy hashes, upgrading hashes, double hashing, Q&A + discussion.\n\nGoal: encourage python developers to handle passwords adequately, encourage outsourcing and collaboration on this topic, avoid the next password desaster ;)\n\nPrerequisites: a basic understanding of Python, security and responsibility. Talk focus is on practical understanding (not on math or crypto theory).", "language": "EN", "title": "Passwords - the server side", "tags": ["sysadmin", "best-practices", "security", "servers"], "datetime": "2013-07-03 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/passwords-the-server-side", "video": null, "description_md": "A tour of decreasingly bad ideas regarding server/software-side password\nhandling. After showing off popular ways to fail badly, I\u2019ll also show an easy\nand recommendable way to deal with passwords (passlib) plus some generic\nideas.\n\nTopics: Storage and Verification of passwords, algorithms, attacks, security\nbreaches and consequences, password invalidation, thoughts about legacy\nhashes, upgrading hashes, double hashing, Q&amp;A + discussion.\n\nGoal: encourage python developers to handle passwords adequately, encourage\noutsourcing and collaboration on this topic, avoid the next password desaster\n;)\n\nPrerequisites: a basic understanding of Python, security and responsibility.\nTalk focus is on practical understanding (not on math or crypto theory).\n\n"}
{"speakers": ["Davide Corio"], "description": "Applicazioni native o ibride?\nChi si avvicina allo sviluppo di applicazioni mobile si pone subito questa domanda.\nHTML5 attrae moltissimo, soprattutto per chi non ha tempo/voglia di far pratica sugli SDK nativi, ma spesso risulta poco performante ed introduce la variante Javascript che in alcuni casi fa rimpiangere il non aver optato per un SDK nativo.\n\nKivy ci propone una strada alternativa e soprattutto ci permette di usare Python :-)", "language": "IT", "title": "Kivy, Python RAD per lo sviluppo di applicazioni mobile e non solo", "tags": ["mobile", "kivy-ios", "kivy"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/kivy-python-rad-per-lo-sviluppo-di-applicazioni-mobile-e-non-solo", "video": null, "description_md": "Applicazioni native o ibride? Chi si avvicina allo sviluppo di applicazioni\nmobile si pone subito questa domanda. HTML5 attrae moltissimo, soprattutto per\nchi non ha tempo/voglia di far pratica sugli SDK nativi, ma spesso risulta\npoco performante ed introduce la variante Javascript che in alcuni casi fa\nrimpiangere il non aver optato per un SDK nativo.\n\nKivy ci propone una strada alternativa e soprattutto ci permette di usare\nPython :-)\n\n"}
{"speakers": ["Mathieu Virbel"], "description": "I\u2019ll answer to any questions about:\n- Kivy\n- Your python applications on Android, iOS or Desktop\n- Android API / iOS API\n- Buildozer\n- And any others tools from the kivy.org\n\nYou can show what you did, where you have an issue, what performance issue you have, or if your design is ok!", "language": "EN", "title": "Kivy's Support", "tags": ["kivy-ios", "opengl", "buildozer", "iOS", "python-for-android", "kivy", "pyjnius", "android"], "datetime": "2013-07-04 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/kivys-support", "video": null, "description_md": "I\u2019ll answer to any questions about: \\- Kivy \\- Your python applications on\nAndroid, iOS or Desktop \\- Android API / iOS API \\- Buildozer \\- And any\nothers tools from the kivy.org\n\nYou can show what you did, where you have an issue, what performance issue you\nhave, or if your design is ok!\n\n"}
{"speakers": ["Satish Shankar"], "description": "Summary:\n\nHave you ever wondered how recommendation engines work? Or how you can predict house prices based on historical real-estate data? Learn how to use practical machine learning algorithms with python tools and libraries. By the end of the talk, you will be equipped to analyze large data sets, build customized predictive models, and most importantly, know your way around the world of modern machine learning algorithms.  Expect code snippets, demos and some pretty pictures generated from real-world data-sets! Prior programming experience upto an intermediate level is assumed. Basic vector math/statistics will be useful, but not necessary.\n\nTalk outline:\n\n1) Introduction to machine learning: supervised, unsupervised and reinforcement learning\n\n2) Feature extraction: examples from a few real world data sets, including text and image data.\n\n3) Supervised learning methods: regression, naive bayes, support vector machines. \n\n4) Unsupervised learning methods: clustering and dimensionality reduction\n\n5) Designing a recommendation engine: collaborative filtering. \n\n6) Debugging your machine learning algorithm: learning curves and the bias-variance tradeoff.\n\nAll concepts will be illustrated with real world data sets, drawn from the web. We will point to a rich array of python tools in the machine learning landscape, such as scikit-learn, NLTK, Gensim, matplotlib/numpy, and so on. \n\nGoals of the talk:\n\n1) Have an systematic way to think about machine learning.\n\n2) Understand the major different classes of machine learning algorithms so that you know when to use what.\n\n3) Know the most common pitfalls, limitations and bottlenecks while implementing a real world machine learning system.\n\nIntended audience: \n\nIf you want to know what are machine learning algorithms, what can they do, and how to use them: this talk is for you. If you are interested in building data-driven applications such as a recommendation engine, an automatic news/spam classifier, a handwritten digits recognizer and so on, this talk is for you.  \n\nPrerequisites:\n\nAn intermediate-level programming background is assumed. Prior exposure to vector math and basic statistics is useful, but not necessary.", "language": "EN", "title": "Introduction to machine learning using Python tools", "tags": ["statistics", "machine-learning", "datamining", "Algorithms", "data-analysis", "scientific-computing", "sklearn"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/introduction-to-machine-learning-using-python-tools", "video": null, "description_md": "**Summary:**\n\nHave you ever wondered how recommendation engines work? Or how you can predict\nhouse prices based on historical real-estate data? Learn how to use practical\nmachine learning algorithms with python tools and libraries. By the end of the\ntalk, you will be equipped to analyze large data sets, build customized\npredictive models, and most importantly, know your way around the world of\nmodern machine learning algorithms. Expect code snippets, demos and some\npretty pictures generated from real-world data-sets! Prior programming\nexperience upto an intermediate level is assumed. Basic vector math/statistics\nwill be useful, but not necessary.\n\n**Talk outline:**\n\n1) Introduction to machine learning: supervised, unsupervised and\nreinforcement learning\n\n2) Feature extraction: examples from a few real world data sets, including\ntext and image data.\n\n3) Supervised learning methods: regression, naive bayes, support vector\nmachines.\n\n4) Unsupervised learning methods: clustering and dimensionality reduction\n\n5) Designing a recommendation engine: collaborative filtering.\n\n6) Debugging your machine learning algorithm: learning curves and the bias-\nvariance tradeoff.\n\nAll concepts will be illustrated with real world data sets, drawn from the\nweb. We will point to a rich array of python tools in the machine learning\nlandscape, such as scikit-learn, NLTK, Gensim, matplotlib/numpy, and so on.\n\n**Goals of the talk:**\n\n1) Have an systematic way to think about machine learning.\n\n2) Understand the major different classes of machine learning algorithms so\nthat you know when to use what.\n\n3) Know the most common pitfalls, limitations and bottlenecks while\nimplementing a real world machine learning system.\n\n**Intended audience:**\n\nIf you want to know what are machine learning algorithms, what can they do,\nand how to use them: this talk is for you. If you are interested in building\ndata-driven applications such as a recommendation engine, an automatic\nnews/spam classifier, a handwritten digits recognizer and so on, this talk is\nfor you.\n\n**Prerequisites:**\n\nAn intermediate-level programming background is assumed. Prior exposure to\nvector math and basic statistics is useful, but not necessary.\n\n"}
{"speakers": ["Chmouel Boudjnah"], "description": "Swift is a highly available, distributed, eventually consistent object/blob store. It is analogous to Amazon Web Services - Simple Storage Service (S3). \n\nSwift is capable of storing billions of objects distributed across nodes. Swift has built-in redundancy and failover management and is capable of archiving and media streaming. It is extremely scalable in terms of both size (Several petabytes) and capacity (Number of objects).\n\nThis talk will give an overview of the Swift architecture and how the system works when used in production.", "language": "EN", "title": "Introduction to OpenStack Swift", "tags": ["res", "storage"], "datetime": "2013-07-02 00:00:00", "source": "https://ep2013.europython.eu/conference/talks/introduction-to-openstack-swift", "video": null, "description_md": "Swift is a highly available, distributed, eventually consistent object/blob\nstore. It is analogous to Amazon Web Services - Simple Storage Service (S3).\n\nSwift is capable of storing billions of objects distributed across nodes.\nSwift has built-in redundancy and failover management and is capable of\narchiving and media streaming. It is extremely scalable in terms of both size\n(Several petabytes) and capacity (Number of objects).\n\nThis talk will give an overview of the Swift architecture and how the system\nworks when used in production.\n\n"}
